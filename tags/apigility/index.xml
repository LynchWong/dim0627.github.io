<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apigility on Unresolved</title>
    <link>https://yet.unresolved.xyz/tags/apigility/</link>
    <description>Recent content in Apigility on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 14 Feb 2015 19:30:22 +0900</lastBuildDate>
    <atom:link href="https://yet.unresolved.xyz/tags/apigility/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Apigility &#43; React.jsでタスク管理ツールを作ってみる</title>
      <link>https://yet.unresolved.xyz/blog/2015/02/14/make-task-manager-by-using-apigility/</link>
      <pubDate>Sat, 14 Feb 2015 19:30:22 +0900</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2015/02/14/make-task-manager-by-using-apigility/</guid>
      <description>

&lt;p&gt;これに行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zendevent.doorkeeper.jp/events/19917&#34;&gt;Zend 社技術者による最近の PHP 関連の取り組みご紹介 - Zendイベント管理 | Doorkeeper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;英語辛かった。PHP7やらZ Rayやらまあ気になるものはそれなりにあったんだけど、その中でも触ってみようかなと思えるくらい興味を持てた&lt;a href=&#34;https://apigility.org/&#34;&gt;Apigility&lt;/a&gt;を触ってみようと思います。&lt;/p&gt;

&lt;p&gt;ついでなので使ってみたかったReact.jsも導入してみる。&lt;/p&gt;

&lt;h2 id=&#34;apigility:a8f13c6c06505842468ef355c1de93c5&#34;&gt;Apigility？&lt;/h2&gt;

&lt;p&gt;API構築に特化したフレームワークらしい。プレゼンテーションレイヤを完全に分離したアーキテクチャでの利用を想定しているんだと思う。&lt;/p&gt;

&lt;p&gt;何が強いかって、DBさえ用意してしまえば後はGUIから操作するだけでAPIが作れてしまう。
DBも多分メジャーどころは大抵使える(と思う)し、APIもRPCはもちろん、RESTfulな設計にもバッチリ対応してるらしい。&lt;/p&gt;

&lt;p&gt;今回は勉強も兼ねて、簡単なタスク管理ツールを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a8f13c6c06505842468ef355c1de93c5&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;このコマンドをべしっとやるだけで、カレントディレクトリにapigilityのディレクトリが切られる &amp;amp; サーバまで起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sS https://apigility.org/install | php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバを再度起動する場合は&lt;code&gt;php -S localhost:8888 -t public public/index.php&lt;/code&gt;とかやればOK。
画面を開くとこんな感じのが出てくる。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/apigility_top.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/apigility_top.png&#34; alt=&#34;apigility_top&#34; width=1352 height=701 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;ロゴがかわいいね。ここからAPIの追加やデータベース接続の設定やらが出来ます。&lt;/p&gt;

&lt;h2 id=&#34;データベースの準備:a8f13c6c06505842468ef355c1de93c5&#34;&gt;データベースの準備&lt;/h2&gt;

&lt;p&gt;適当なものなので、SQLiteでやっちゃう。テーブルはこんな感じで、名前と完了/未完了が持てるだけにしよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table tasks(id integer primary key, name varchar(20), finished integer);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apigilityからデータベースにつなぐ:a8f13c6c06505842468ef355c1de93c5&#34;&gt;Apigilityからデータベースにつなぐ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Settings&lt;/code&gt;の&lt;code&gt;Database Adapters&lt;/code&gt;から定義を追加出来る。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/database.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/database.png&#34; alt=&#34;database&#34; width=1251 height=762 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;今回はこんな感じで設定。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/def_database.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/def_database.png&#34; alt=&#34;def_database&#34; width=862 height=647 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;h2 id=&#34;apiを追加する:a8f13c6c06505842468ef355c1de93c5&#34;&gt;APIを追加する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;APIs&lt;/code&gt;の&lt;code&gt;Create New API&lt;/code&gt;からAPIを追加する。今回はTasksという名前で作成した。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/create_api.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/create_api.png&#34; alt=&#34;create_api&#34; width=567 height=294 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;粒度がわかりづらいけど、ここで作ったAPIに対して個々のサービスを追加していく。&lt;/p&gt;

&lt;p&gt;大分類みたいなものだと捉えればいいのかな。&lt;/p&gt;

&lt;h2 id=&#34;サービスを追加する:a8f13c6c06505842468ef355c1de93c5&#34;&gt;サービスを追加する&lt;/h2&gt;

&lt;p&gt;さっき作ったTasksAPIに、データベースの&lt;code&gt;tasks&lt;/code&gt;テーブルとRESTで紐づくサービスを追加する。&lt;/p&gt;

&lt;p&gt;サービスはRESTとRPCから選ぶことが出来て、RPCを選ぶと自動生成されたPHPのコードに自分で処理を書いていく感じになるみたい。&lt;/p&gt;

&lt;p&gt;んで指定したURLを叩くとその処理が呼ばれる、って感じ。&lt;/p&gt;

&lt;p&gt;今回は単純にテーブルとURLをRESTfulに対応付けられればいいのでRESTにしてます。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;code&gt;REST Service Name&lt;/code&gt;をtasks、&lt;code&gt;DB-Connected&lt;/code&gt;はさっき作ったアダプタとテーブル名を設定。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/create_service.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/create_service.png&#34; alt=&#34;create_service&#34; width=1249 height=477 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;こんな感じになる。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/def_service.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/def_service.png&#34; alt=&#34;def_service&#34; width=857 height=615 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;接続できるか試してみましょう。データがないので、まずはPOSTで格納してみる。&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/post_tasks.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/post_tasks.png&#34; alt=&#34;post_tasks&#34; width=1118 height=673 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;いけてるっぽい。取得は？&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/get_tasks.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/get_tasks.png&#34; alt=&#34;get_tasks&#34; width=1118 height=673 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;取れますね。&lt;/p&gt;

&lt;p&gt;もちろんSQLite側にも、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; select * from tasks;
1|task1|false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;入ってます。&lt;/p&gt;

&lt;h2 id=&#34;ビューを作る:a8f13c6c06505842468ef355c1de93c5&#34;&gt;ビューを作る&lt;/h2&gt;

&lt;p&gt;後は画面側を生のHTMLにして、取得と格納は全部JSに任せます。&lt;/p&gt;

&lt;p&gt;つってもここはあんまり説明してもしょうがないのでSSとコードだけ。表示はこんな感じで、&lt;/p&gt;

&lt;a href=&#34;https://yet.unresolved.xyz/images/2015-02-14/view.png&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;
  &lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2015-02-14/view.png&#34; alt=&#34;view&#34; width=524 height=206 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
&lt;/a&gt;


&lt;p&gt;こんなHTMLでやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;style&amp;gt;
#tasks-wrapper {
  margin: 20px auto;
  max-width: 500px;
}
#tasks {
}
.buttons {
  margin-right: 5px;
}
.buttons&amp;gt;button {
  margin-right: 5px;
}
&amp;lt;/style&amp;gt;

&amp;lt;div id=&amp;quot;tasks-wrapper&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;task-name&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Task name&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
      &amp;lt;button id=&amp;quot;task-post&amp;quot; class=&amp;quot;btn btn-success&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;登録&amp;lt;/button&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;div id=&amp;quot;tasks&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/react/0.12.2/react.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/react/0.12.2/JSXTransformer.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//code.jquery.com/jquery-2.1.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/app.js&amp;quot; type=&amp;quot;text/jsx&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSはこんな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Task = React.createClass({
    del: function(e) {
        $.ajax({
            type: &amp;quot;DELETE&amp;quot;,
            url: &amp;quot;/tasks/&amp;quot; + this.props.id,
        });
    },
    finish: function(e) {
        $.ajax({
            type: &amp;quot;PUT&amp;quot;,
            url: &amp;quot;/tasks/&amp;quot; + this.props.id,
            data: JSON.stringify({finished: 1}),
            headers: {
                &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
            }
        });
    },
    render: function() {
        return (&amp;lt;li className=&amp;quot;list-group-item clearfix&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;buttons pull-left&amp;quot;&amp;gt;
                        {this.props.finished == &amp;quot;0&amp;quot; ?
                            (&amp;lt;button className=&amp;quot;btn btn-primary btn-xs&amp;quot; onClick={this.finish}&amp;gt;完了&amp;lt;/button&amp;gt;)
                            : &amp;quot;&amp;quot;}
                        &amp;lt;button className=&amp;quot;btn btn-danger btn-xs&amp;quot; onClick={this.del}&amp;gt;削除&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;span className=&amp;quot;badge&amp;quot;&amp;gt;{this.props.finished == &amp;quot;0&amp;quot; ? &amp;quot;未完了&amp;quot; : &amp;quot;完了&amp;quot;}&amp;lt;/span&amp;gt;
                    {this.props.name}
                &amp;lt;/li&amp;gt;);
    }
});

var Tasks = React.createClass({
    getInitialState: function() {
        return {
            tasks: [],
        };
    },
    loadTasks: function() {
        $.get(this.props.source, function(result) {
            if(this.isMounted()) {
                this.setState({
                    tasks: result._embedded.tasks,
                });
            }
        }.bind(this));
    },
    componentDidMount: function() {
        this.loadTasks();
        setInterval(this.loadTasks, 2000);
    },
    render: function() {
        var tasks = this.state.tasks;
        return (&amp;lt;ul className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            tasks.map(function(task) {
                return &amp;lt;Task id={task.id} name={task.name} finished={task.finished} /&amp;gt;
            }.bind(this)
        )}&amp;lt;/ul&amp;gt;);
    }
});

React.render(
    &amp;lt;Tasks source=&amp;quot;/tasks&amp;quot; /&amp;gt;,
    document.getElementById(&#39;tasks&#39;)
);

$(&amp;quot;#task-post&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $.ajax(
        {
            type: &amp;quot;POST&amp;quot;,
            url: &amp;quot;/tasks&amp;quot;,
            data: JSON.stringify({name: $(&amp;quot;#task-name&amp;quot;).val(), finished: 0}),
            headers: {
                &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
            }
        })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;React.js気軽に手出したけど、まじでむずいですね。&lt;/p&gt;

&lt;p&gt;一人で書いてもこんだけぐちゃぐちゃするんだから、複数人でやるときはマジで気をつけないとすごいことになりそう。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:a8f13c6c06505842468ef355c1de93c5&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Apigility、すごく楽。
React.jsで心折れかけたけどそれはApigilityには関係ないわけで、サーバサイドの実装は本当にさくっと終わりました。&lt;/p&gt;

&lt;p&gt;ただ、ドキュメントが致命的なほど少ないと思いました。見逃してるだけなのかな。
Getting Startedとかはしっかり書かれてるから導入は楽なんだけど、少しでも発展的なものになると何処にも載ってない。&lt;/p&gt;

&lt;p&gt;さらにユーザも少ないから情報が拾えなくて、これをプロダクトで使うとなると辛い場面が多いかなと思った。
公式のドキュメントは結構ひどくて、2013年からの開発なのに8割くらい工事中だったりする。&lt;/p&gt;

&lt;p&gt;だから実際にこれを使いますか？ってなると、「まあ個人利用では使うかもしれませんね」って答えになってしまうかなあ。
でもやっぱりこの楽さは魅力なので、今後整備されていくことに期待。&lt;/p&gt;

&lt;p&gt;React.jsはもう少ししっかり勉強します。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
