<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgresql on Unresolved</title>
    <link>http://yet.unresolved.xyz/tags/postgresql/</link>
    <description>Recent content in Postgresql on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jan 2015 15:37:14 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vagrant &#43; CentOS &#43; PostgreSQLを最速で構築</title>
      <link>http://yet.unresolved.xyz/blog/2015/01/22/install-postgresql-on-centos/</link>
      <pubDate>Thu, 22 Jan 2015 15:37:14 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/01/22/install-postgresql-on-centos/</guid>
      <description>

&lt;p&gt;herokuにのっけるアプリを作るとき、ローカルではSQLite使ってたんだけどもう色々つらい。&lt;/p&gt;

&lt;p&gt;なんか整数で定義したカラムに文字列入るし！&lt;/p&gt;

&lt;p&gt;なんかオートインクリメントの設定の仕方がPostgreSQLと違うし！&lt;/p&gt;

&lt;p&gt;つらい。&lt;/p&gt;

&lt;p&gt;なのでもう、さっとPostgreSQLだけ入った仮想環境を作ってホスト側から繋げるようにしたい。&lt;/p&gt;

&lt;h2 id=&#34;vagrantfileの設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;Vagrantfileの設定&lt;/h2&gt;

&lt;p&gt;もう面倒なのはいやなのでCentOSとIPの設定だけやるよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &amp;quot;chef/centos-6.5&amp;quot;
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresqlの導入:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;PostgreSQLの導入&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo yum install postgresql
[vagrant@localhost ~]$ sudo yum install postgresql-server
[vagrant@localhost ~]$ sudo yum install postgresql-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さくっと入るやん！&lt;/p&gt;

&lt;h2 id=&#34;どうやって繋ぐのかな:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;どうやって繋ぐのかな&lt;/h2&gt;

&lt;p&gt;もうほんとPostgreSQLの使い方がわかんない、MySQLばっか触ってたからわかんない。&lt;/p&gt;

&lt;p&gt;そもそもサービス名はなによ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ service postgresql
Usage: /etc/init.d/postgresql {start|stop|status|restart|condrestart|try-restart|reload|force-reload|initdb}
[vagrant@localhost ~]$ service postgresql status
postmaster is stopped
[vagrant@localhost ~]$ sudo service postgresql start

/var/lib/pgsql/data is missing. Use &amp;quot;service postgresql initdb&amp;quot; to initialize the cluster first.
                                                           [FAILED]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;postgresql&lt;/code&gt;か、でもなんか起動しないね。&lt;/p&gt;

&lt;p&gt;なんか&lt;code&gt;initdb&lt;/code&gt;とやらで初期化をしなきゃいけないらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo -u postgres /usr/bin/initdb -D /var/lib/pgsql/data
could not change directory to &amp;quot;/home/vagrant&amp;quot;
The files belonging to this database system will be owned by user &amp;quot;postgres&amp;quot;.
This user must also own the server process.

The database cluster will be initialized with locale en_US.UTF-8.
The default database encoding has accordingly been set to UTF8.
The default text search configuration will be set to &amp;quot;english&amp;quot;.

fixing permissions on existing directory /var/lib/pgsql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /var/lib/pgsql/data/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects&#39; descriptions ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling &amp;quot;trust&amp;quot; authentication for local connections
You can change this by editing pg_hba.conf or using the -A option the
next time you run initdb.

Success. You can now start the database server using:

    /usr/bin/postgres -D /var/lib/pgsql/data
or
    /usr/bin/pg_ctl -D /var/lib/pgsql/data -l logfile start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んん？&lt;code&gt;/usr/bin/postgres -D /var/lib/pgsql/data&lt;/code&gt;で起動出来るの？&lt;/p&gt;

&lt;p&gt;でも&lt;code&gt;service&lt;/code&gt;でやるよ！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo service postgresql start
Starting postgresql service:                               [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出来るやん！&lt;/p&gt;

&lt;p&gt;ゲスト内で繋がるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ psql -U postgres
psql (8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出来るやん！&lt;/p&gt;

&lt;p&gt;ホスト側からいけるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql: could not connect to server: Connection refused
	Is the server running on host &amp;quot;192.168.33.10&amp;quot; and accepting
	TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけないね。&lt;/p&gt;

&lt;h2 id=&#34;接続の設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;接続の設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/postgresql.conf&lt;/code&gt;のコメントアウトを外したり&lt;code&gt;*&lt;/code&gt;にしたりこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen_addresses = &#39;*&#39;          # what IP address(es) to listen on;
                                        # comma-separated list of addresses;
                                        # defaults to &#39;localhost&#39;, &#39;*&#39; = all
                                        # (change requires restart)
port = 5432                             # (change requires restart)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/pg_hba.conf&lt;/code&gt;にこれを追加する感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host    all         all         0.0.0.0/0             trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけるかな？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql (9.3.5, server 8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけた！&lt;/p&gt;

&lt;p&gt;そのうちshellにまとめてprovisioning出来るようにしよう・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://iwa4.hatenablog.com/entry/2014/05/30/190000&#34;&gt;Vagrant で Windows に Postgres on CentOS 環境を構築 - 弘法にも筆の誤り&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dbonline.jp/postgresql/connect/index2.html&#34;&gt;PostgreSQLへの接続 - PostgreSQLへの接続と切断 - PostgreSQLの使い方&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lobosでマイグレーションができない in Heroku</title>
      <link>http://yet.unresolved.xyz/blog/2014/12/21/does-not-work-lobos-in-heroku/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2014/12/21/does-not-work-lobos-in-heroku/</guid>
      <description>

&lt;p&gt;ClojureのWebアプリがとりあえず動くところまで行ったんだけど、Herokuにのせようとしたら詰まった。&lt;/p&gt;

&lt;h2 id=&#34;何が起きたか:b3814854ab9c35505a0d42182d51f32f&#34;&gt;何が起きたか&lt;/h2&gt;

&lt;p&gt;今だにHerokuの使い方がようわからんのだけど、&lt;/p&gt;

&lt;p&gt;とりあえずローカルから向き先変えるよりもSSHの方がいっかなってことで&lt;code&gt;heroku run bash&lt;/code&gt;してやってます。&lt;/p&gt;

&lt;p&gt;ローカルからだとDBをSSLで接続させないといけないし・・・。&lt;/p&gt;

&lt;p&gt;んでマイグレーションしようとしたら、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure-repl&#34;&gt;user=&amp;gt; (migrate)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何も出ない。&lt;/p&gt;

&lt;p&gt;本当はこんな感じで、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure-repl&#34;&gt;user=&amp;gt; (migrate)
add-sites-table
add-entries-table
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成されたり変更されたテーブルが出てくるはず。&lt;/p&gt;

&lt;h2 id=&#34;原因はなんだったのか:b3814854ab9c35505a0d42182d51f32f&#34;&gt;原因はなんだったのか&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;lobos.migrations&lt;/code&gt;が読まれてない（というかリロードされてない）っぽい。&lt;/p&gt;

&lt;p&gt;そもそも&lt;code&gt;migrate&lt;/code&gt;自体はこんな感じで&lt;code&gt;lobos.migration&lt;/code&gt;の&lt;code&gt;do-migrations&lt;/code&gt;を呼んでます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defcommand migrate [&amp;amp; names]
  (let [names (if (empty? names)
                (mig/pending-migrations db-spec sname)
                names)]
    (mig/do-migrations db-spec sname :up names)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;do-migrations&lt;/code&gt;はこんな感じで、&lt;code&gt;list-migrations-names&lt;/code&gt;の結果を絞って実行してる。&lt;/p&gt;

&lt;p&gt;たぶんマイグレーション済みのものは除外とかそんな感じなんじゃないだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn do-migrations [db-spec sname with names &amp;amp; [silent]]
  (let [filter-migs #(only % (list-migrations-names))
        migrations (-&amp;gt;&amp;gt; names
                        (map str)
                        filter-migs
                        (when-&amp;gt;&amp;gt; (= with :down) reverse)
                        (map symbol)
                        (map (partial ns-resolve *migrations-namespace*))
                        (map var-get))]
    (binding [*record* nil]
      (doseq [migration migrations]
        (let [name (-&amp;gt; migration meta :name)]
          (when-not silent
            (println name))
          (if (= with :up)
            (do
              (up migration)
              (insert-migrations db-spec sname name))
            (do
              (down migration)
              (delete-migrations db-spec sname name))))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;list-migrations-names&lt;/code&gt;の定義がこれ、&lt;code&gt;list-migrations&lt;/code&gt;を呼んでる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn list-migrations-names []
  (map #(-&amp;gt; % meta :name str) (list-migrations)))

(defn list-migrations []
  (if *reload-migrations*
    (when (.exists (migrations-file))
      (swap! migrations (constantly []))
      (use :reload *migrations-namespace*)
      @migrations)
    @migrations))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;list-migrations&lt;/code&gt;が問題のようで、いや、たぶんHeroku側の環境がよくないんだと思うけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;      (use :reload *migrations-namespace*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;:reload&lt;/code&gt;が正常に動かなくてマイグレーション対象が取れてない。&lt;/p&gt;

&lt;p&gt;だから&lt;code&gt;list-migrations&lt;/code&gt;を実行した時、1回目はきちんとロードされて、&lt;/p&gt;

&lt;p&gt;2回目は&lt;code&gt;(swap! migrations (constantly []))&lt;/code&gt;で空っぽになったままリロードされてないのが悪かったみたい。&lt;/p&gt;

&lt;p&gt;だからこんな風に、2回目の実行からは空になった&lt;code&gt;migrations&lt;/code&gt;が返ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure-repl&#34;&gt;user=&amp;gt; (use &#39;lobos.migration)
WARNING: complement already refers to: #&#39;clojure.core/complement in namespace: user, being replaced by: #&#39;lobos.migration/complement
nil
user=&amp;gt; (list-migrations)
[#&amp;lt;migrations$reify__2390 lobos.migrations$reify__2390@445aed&amp;gt; #&amp;lt;migrations$reify__2392 lobos.migrations$reify__2392@42bfb95d&amp;gt;]
user=&amp;gt; (list-migrations)
[]
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解決策:b3814854ab9c35505a0d42182d51f32f&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;もう正直ここまでで一週間弱悩んだから、lobos使うのやめようかなとも思ったけどまあいい勉強だろうし・・・。&lt;/p&gt;

&lt;p&gt;暫定にしかならないけど、とりあえずリロードさせないようにしよう。&lt;/p&gt;

&lt;p&gt;ソースコードの通り、&lt;code&gt;*reload-migrations*&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になっている場合にリロードが走るらしい。&lt;/p&gt;

&lt;p&gt;だからこんな感じで&lt;code&gt;false&lt;/code&gt;で上書いてしまおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure-repl&#34;&gt;user=&amp;gt; (use &#39;lobos.migration)
WARNING: complement already refers to: #&#39;clojure.core/complement in namespace: user, being replaced by: #&#39;lobos.migration/complement
nil
user=&amp;gt; (ns lobos.migration)

IllegalStateException defonce already refers to: #&#39;lobos.utils/defonce in namespace: lobos.migration  clojure.lang.Namespace.warnOrFailOnReplace (Namespace.java:88)
user=&amp;gt; (def ^{:dynamic true} *reload-migrations* false)
#&#39;lobos.migration/*reload-migrations*
lobos.migration=&amp;gt; (use &#39;lobos.core)
WARNING: alter already refers to: #&#39;clojure.core/alter in namespace: lobos.migration, being replaced by: #&#39;lobos.core/alter
WARNING: drop already refers to: #&#39;clojure.core/drop in namespace: lobos.migration, being replaced by: #&#39;lobos.core/drop
nil
lobos.migration=&amp;gt; (migrate)
add-sites-table
add-entries-table
nil
lobos.migration=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これじゃない感がすごいけど、とりあえず通った・・・。&lt;/p&gt;

&lt;p&gt;Lobosはもう開発があんまり活発じゃないみたいだなあ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lobos.migration&lt;/code&gt;と&lt;code&gt;lobos.migrations&lt;/code&gt;の命名はちょっといけてないような・・・。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
