<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Unresolved</title>
    <link>http://localhost:1313/tags/docker/</link>
    <description>Recent content in Docker on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ClojureのWebアプリをDocker &#43; Beanstalkで動かす</title>
      <link>http://localhost:1313/blog/2014/12/31/clojure-on-docker-and-aws-beanstalk/</link>
      <pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/31/clojure-on-docker-and-aws-beanstalk/</guid>
      <description>

&lt;p&gt;たぶんこういうのはドキュメント読んでもわからないので、とにかく一通りの流れを実践してみる。&lt;/p&gt;

&lt;h2 id=&#34;imageの取得:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;Imageの取得&lt;/h2&gt;

&lt;p&gt;面倒なので&lt;a href=&#34;https://hub.docker.com/account/signup/&#34;&gt;Docker Hub&lt;/a&gt;からClojureが動く環境を持ってくる。&lt;/p&gt;

&lt;p&gt;オフィシャルリポジトリとやらがあったので、それを使います。Leiningenとか一式が入ってるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/_/clojure/&#34;&gt;clojure&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ローカルでの動作確認:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;ローカルでの動作確認&lt;/h2&gt;

&lt;p&gt;とりあえず世界に挨拶が出来るくらいのWebアプリを作っちゃおう。&lt;/p&gt;

&lt;p&gt;アプリ自体は重要じゃないので、とりあえずインタラクティブシェル上で適当にやります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  docker run -i -t clojure /bin/bash
root@e322a11f087d:/home# lein new compojure aws_webapp
Retrieving compojure/lein-template/0.4.1/lein-template-0.4.1.pom from clojars
Retrieving compojure/lein-template/0.4.1/lein-template-0.4.1.jar from clojars
root@e322a11f087d:/home# ls
aws_webapp
root@e322a11f087d:/home# cd aws_webapp/
root@e322a11f087d:/home/aws_webapp# ls
README.md  project.clj	resources  src	test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったらcompojureテンプレート自体がすでにHello Worldを実装してた・・・。&lt;/p&gt;

&lt;p&gt;そのままサーバ起動しちゃうとこんな感じでブラウザの自動起動のとこでエラーしちゃうので、&lt;code&gt;lein ring server-headless&lt;/code&gt;で起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@e322a11f087d:/home/aws_webapp# lein ring server
2015-01-01 05:41:35.432:INFO:oejs.Server:jetty-7.6.8.v20121106
2015-01-01 05:41:35.486:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
Started server on port 3000
Exception in thread &amp;quot;main&amp;quot; java.lang.InternalError: Can&#39;t connect to X11 window server using &#39;localhost:0.0&#39; as the value of the DISPLAY variable., compiling:(/tmp/form-init3570254627486988046.clj:1:72)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはデーモンとして起動しちゃえばローカルでの確認が出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  docker run -d -t -p 3000:3000 clojure:aws /bin/bash -c &amp;quot;cd /home/aws_webapp; lein ring server-headless&amp;quot;
e9981a71589918791d52888a0cb503bea133611395be58574047cd498c9e6f76
b2d$  docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                    NAMES
e9981a715899        clojure:aws         &amp;quot;/bin/bash -c &#39;cd /h   4 seconds ago       Up 3 seconds        0.0.0.0:3000-&amp;gt;3000/tcp   backstabbing_colden
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動しているのはboot2dockerの仮想マシン上なので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  boot2docker ip
192.168.59.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このIPの3000ポートに向けてアクセスすれば、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/2015-01-01/webapp.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/2015-01-01/webapp.png&#34; alt=&#34;webapp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;見れます。&lt;/p&gt;

&lt;p&gt;ringのサーバは起動が遅いので&lt;code&gt;docker logs [names]&lt;/code&gt;で確認しながらやるといいね。&lt;/p&gt;

&lt;h2 id=&#34;elastic-beanstalkで動かす:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;Elastic Beanstalkで動かす&lt;/h2&gt;

&lt;p&gt;大事なことに気づいたんだけど、BeanstalkはDockerfileとか必要なファイル一式をまとめたzipをアップするらしい。&lt;/p&gt;

&lt;p&gt;そもそもソースもイメージに入れちゃうっていうのは考えとしておかしいのかも。
Dockerのベストプラクティスみたいなのがよくわからないや。
warを&lt;code&gt;ADD&lt;/code&gt;で置くのが理想的なのかな。&lt;/p&gt;

&lt;p&gt;今回は面倒なので、clojureでWebサーバを立ち上げられる&lt;code&gt;http-kit&lt;/code&gt;というライブラリを使ってやってみます。&lt;/p&gt;

&lt;p&gt;ちょうどBeanstalk用のDockerfileとかも用意してくれる&lt;a href=&#34;https://github.com/mrmcc3/beanstalk-docker-app&#34;&gt;mrmcc3/beanstalk-docker-app&lt;/a&gt;というテンプレートがあったので、これを使わせてもらうことに。&lt;/p&gt;

&lt;h3 id=&#34;mrmcc3-beanstalk-docker-appでwebアプリを構築する:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;mrmcc3/beanstalk-docker-appでWebアプリを構築する&lt;/h3&gt;

&lt;p&gt;何はともあれ&lt;code&gt;new&lt;/code&gt;して作り直し。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;temp$ lein new beanstalk-docker-app superapp
Generating clojure app for AWS Beanstalk and docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで作られる。jarとかは&lt;code&gt;lein uberjar&lt;/code&gt;で作らなきゃダメかも。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.
|-- Dockerfile
|-- Dockerrun.aws.json
|-- project.clj
|-- src
|   `-- superapp
|       `-- main.clj
`-- target
    |-- classes
    |   |-- META-INF
    |   |-- clojure
    |   |-- org
    |   `-- superapp
    |-- production.jar
    |-- stale
    |   `-- extract-native.dependencies
    |-- superapp-0.1.0.jar
    `-- superapp-0.1.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfileはこんな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;# Dockerfile for clojure apps on AWS Elastic Beanstalk
# v0.0.1

FROM dockerfile/java
MAINTAINER Michael McClintock, mrmcc3@gmail.com
ADD target/production.jar /root/
EXPOSE 8080
CMD [&amp;quot;java&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/root/production.jar&amp;quot;]

# SUPPORT JVM OPTS ?
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;動作確認:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;動作確認&lt;/h3&gt;

&lt;p&gt;ローカルでの動作確認はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;superapp$ java -jar target/production.jar
13:33:07.705 [main] INFO  superapp.main - starting superapp
13:33:07.710 [main] INFO  superapp.main - serving status message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/2015-01-01/beanstalkDockerApp.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/2015-01-01/beanstalkDockerApp.png&#34; alt=&#34;beanstalkDockerApp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;デプロイ:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;デプロイ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lein zip&lt;/code&gt;でBeanstalk用のzipが&lt;code&gt;target&lt;/code&gt;配下に作成されるので、それをアップロード。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerrun.aws.json&lt;/code&gt;でポートの指定とかやってるんだけど、こいつもzipに入れてしまうとtimeoutしてしまった。
まあそれでも動くんだけどちょっと気持ち悪いので除外。&lt;/p&gt;

&lt;p&gt;ポートの指定やらはDockerfileでやってるので問題なく動きます。&lt;/p&gt;

&lt;p&gt;デプロイはこんな感じで成功。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/images/2015-01-01/deploy.png&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/2015-01-01/deploy.png&#34; alt=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかしデプロイは結構時間かかるなー。
Javaの起動とかライブラリのダウンロードで食ってるのかな・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wslash.com/?p=5584&#34;&gt;Dockerを勉強するための、Docker解説記事のまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://knowledge.sakura.ad.jp/tech/1811/&#34;&gt;これから始める「DockerでかんたんLAMP環境 for CentOS」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nudaygames.squarespace.com/blog/2014/12/13/clojure-websocket-server-on-elastic-beanstalk&#34;&gt;CLOJURE WEBSOCKET SERVER ON ELASTIC BEANSTALK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://inokara.hateblo.jp/entry/2013/12/29/215322&#34;&gt;Dockerfile の書き方「私的」なベストプラクティス（3）〜サービスの起動について〜&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>boot2dockerでCannot connect to the Docker daemon</title>
      <link>http://localhost:1313/blog/2014/12/30/could-not-run-docker-in-mac/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/30/could-not-run-docker-in-mac/</guid>
      <description>

&lt;p&gt;これまでは普通に手で作ったVMのUbuntu上でDockerを触ってたんだけど、なんかあれだしboot2dockerに移行しようかと。&lt;/p&gt;

&lt;p&gt;いろいろやってみようとしたら導入から結構躓いた。&lt;/p&gt;

&lt;h2 id=&#34;boot2dockerの導入:84c49f689db64d048346ac0ea18a9c93&#34;&gt;boot2dockerの導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/installation/mac/&#34;&gt;Installing Docker on Mac OS X&lt;/a&gt;に沿って導入してみる。&lt;/p&gt;

&lt;p&gt;あ、本体はインストーラじゃなくて&lt;code&gt;brew install boot2docker&lt;/code&gt;で導入してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ boot2docker init
2014/12/29 22:59:08 Downloading boot2docker ISO image...
2014/12/29 22:59:09 Latest release is v1.4.1
2014/12/29 23:00:17 Success: downloaded https://github.com/boot2docker/boot2docker/releases/download/v1.4.1/boot2docker.iso
	to /Users/DaisukeTsuji/.boot2docker/boot2docker.iso
Generating public/private rsa key pair.
Your identification has been saved in /Users/DaisukeTsuji/.ssh/id_boot2docker.
Your public key has been saved in /Users/DaisukeTsuji/.ssh/id_boot2docker.pub.
The key fingerprint is:
36:99:81:cf:0b:bd:77:3b:30:9d:66:70:ad:90:ac:35 DaisukeTsuji@DaisukeTsujis-MacBook-Air.local
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|                 |
|       .         |
|      . .. . .   |
|       + +E . .  |
|      . So * o   |
|       o.+o *    |
|        o .=.    |
|         . ...   |
|            ..   |
+-----------------+
2014/12/29 23:00:17 Creating VM boot2docker-vm...
2014/12/29 23:00:17 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)
2014/12/29 23:00:17 Setting NIC #1 to use NAT network...
2014/12/29 23:00:17 Port forwarding [ssh] tcp://127.0.0.1:2022 --&amp;gt; :22
2014/12/29 23:00:17 Port forwarding [docker] tcp://127.0.0.1:2375 --&amp;gt; :2375
2014/12/29 23:00:18 Setting NIC #2 to use host-only network &amp;quot;vboxnet1&amp;quot;...
2014/12/29 23:00:18 Setting VM storage...
2014/12/29 23:00:28 Done. Type `boot2docker up` to start the VM.
b2d$ boot2docker status
poweroff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは&lt;code&gt;start&lt;/code&gt;すれば使えるのかなと思ったらエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  boot2docker start
2014/12/30 20:56:21 Waiting for VM to be started...
.......
2014/12/30 20:56:43 Started.
2014/12/30 20:56:43 To connect the Docker client to the Docker daemon, please set:
2014/12/30 20:56:43     export DOCKER_HOST=tcp://192.168.59.103:2375
b2d$ docker run hello-world
2014/12/30 20:51:16 Post http:///var/run/docker.sock/v1.13/containers/create: dial unix /var/run/docker.sock: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数&lt;code&gt;$DOCKER_HOST&lt;/code&gt;に&lt;code&gt;tcp://192.168.59.103:2357&lt;/code&gt;が設定されてなきゃいけなかったっぽい。&lt;/p&gt;

&lt;p&gt;これによってboot2dockerで起動したVM中のdockerと接続してるのかな。と思ったら、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ export DOCKER_HOST=tcp://192.168.59.103:2375
b2d$ docker run hello-world
2014/12/30 20:58:41 Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数を設定してみるもまたエラー。デーモンと接続できない。&lt;/p&gt;

&lt;p&gt;1時間ほど詰まりましたが最悪な原因でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ brew update
b2d$ brew upgrade docker
b2d$ brew upgrade boot2docker
b2d$ boot2docker delete
b2d$ boot2docker init
b2d$ boot2docker up
b2d$ docker version
Client version: 1.4.1
Client API version: 1.16
Go version (client): go1.4
Git commit (client): 5bc2ff8
OS/Arch (client): darwin/amd64
Server version: 1.4.1
Server API version: 1.16
Go version (server): go1.3.3
Git commit (server): 5bc2ff8
b2d$ docker run hello-world
Unable to find image &#39;hello-world:latest&#39; locally
hello-world:latest: The image you are pulling has been verified
511136ea3c5a: Pull complete
7fa0dcdc88de: Pull complete
ef872312fe1b: Pull complete
Status: Downloaded newer image for hello-world:latest
Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
    (Assuming it was not already locally available.)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

For more examples and ideas, visit:
 http://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージが古かった・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:84c49f689db64d048346ac0ea18a9c93&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/boot2docker/osx-installer/issues/80&#34;&gt;Cannot connect to the Docker daemon · Issue #80 · boot2docker/osx-installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&#34;&gt;How to Use Docker on OS X: The Missing Guide | Viget&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/uchihara/items/d1b1885866949b63f7dc&#34;&gt;Dockerについて調べてみたのでめもめも - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://inokara.hateblo.jp/entry/2013/09/30/234806&#34;&gt;docker API を使ってみる - ようへいの日々精進 XP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kanekoa/items/cf3cabb23da69c609002&#34;&gt;OS X をサポートした Docker 0.8 を試す - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
