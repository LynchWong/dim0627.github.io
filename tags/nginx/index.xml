<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Unresolved</title>
    <link>http://yet.unresolved.xyz/tags/nginx/</link>
    <description>Recent content in Nginx on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jan 2016 10:57:35 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Python]Flaskアプリをnginx &#43; uWSGIでさくらVPSにデプロイする</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</link>
      <pubDate>Fri, 08 Jan 2016 10:57:35 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</guid>
      <description>

&lt;p&gt;CentOS6.5、Python2.7でやります。&lt;/p&gt;

&lt;p&gt;CentOS6.5にプリインストールされているPythonは2.6だと思うのですが、Python2.7の導入方法は書きません。
多分いろいろな環境で動いたり動かなかったりしちゃうと思うので。&lt;/p&gt;

&lt;p&gt;僕はこの記事を参考にしました。非常に簡単かつ完璧に書かれてて助かりました。こんな記事が書けるようになりたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/a_yasui/items/5f453297855791ed648d&#34;&gt;CentOS に Python2.7, Python3.3を入れたメモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;uwsgiをインストールする:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGIをインストールする&lt;/h2&gt;

&lt;p&gt;まあ当然WSGIを使います。PythonをWebアプリとして動かす際のサーバ間仕様ですね。&lt;/p&gt;

&lt;p&gt;WSGIで使えるコンテナはWikiを見る限り幾つかあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Web_Server_Gateway_Interface&#34;&gt;Web Server Gateway Interface - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WSGIアプリケーションコンテナの例としては、uWSGI, Gunicorn, Apacheモジュール (mod_wsgi, mod_pythonなど), Microsoft IIS（isapi-wsgi, PyISAPIe, ASPゲートウェイを使用）などがある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回はuWSGIを使います。&lt;/p&gt;

&lt;h3 id=&#34;uwsgi:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGI？&lt;/h3&gt;

&lt;p&gt;公式より引用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uwsgi-docs.readthedocs.org/en/latest/&#34;&gt;The uWSGI project — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The uWSGI project aims at developing a full stack for building hosting services.&lt;/p&gt;

&lt;p&gt;Application servers (for various programming languages and protocols), proxies, process managers and monitors are all implemented using a common api and a common configuration style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;アプリケーションサーバですね。&lt;/p&gt;

&lt;p&gt;今回はnginxの向こうにuWSGIを置いてサービスを動作させます。&lt;/p&gt;

&lt;h3 id=&#34;インストール:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんて簡単！&lt;/p&gt;

&lt;h3 id=&#34;パラメータオプションでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;パラメータオプションでの起動&lt;/h3&gt;

&lt;p&gt;uWSGIはコマンドから起動設定も含めた起動が出来ます。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで8000ポートで&lt;code&gt;wsgi_app&lt;/code&gt;がhttp全公開になります。
nginxと連携させる前に、一度このタイミングでアクセス出来るかを見とくと良いですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-w&lt;/code&gt;オプションはわかりづらいのですが、&lt;code&gt;main.py&lt;/code&gt;にアプリの起動が記述されてる場合は&lt;code&gt;main&lt;/code&gt;を指定するみたいですね。&lt;/p&gt;

&lt;p&gt;パラメータは公式のこのページが参考になりそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/Options.html&#34;&gt;uWSGI Options — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっとしたロジックも書ける様子。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/ConfigLogic.html&#34;&gt;Configuration logic — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iniファイルでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;iniファイルでの起動&lt;/h3&gt;

&lt;p&gt;パラメータをたくさんつけるとコマンドが長くなってしまうので&lt;code&gt;ini&lt;/code&gt;に落とし込みました。
&lt;code&gt;xml&lt;/code&gt;とかその他の形式でも行けるみたいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[uwsgi]
chdir = /path/to/src
module = wsgi
socket = /path/to/app.sock
touch-reload = /path/to/reload.trigger
logto = /var/log/uwsgi.log
max-requests = 1000
chmod-socket = 666

uid = www-user
gid = www-group
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は&lt;code&gt;uwsgi --ini wsgi.ini&lt;/code&gt;みたいな感じ。
ここでも一度アクセスできるかを確認するといいですね。&lt;/p&gt;

&lt;p&gt;chdirはカレントディレクトリの指定です。
これがないとコマンドでは動くのにupstartから起動したら動かない、なんてことになったり。&lt;/p&gt;

&lt;p&gt;socketについてはこの記事が詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロダクションで使うならその他細かな設定が必要かと思います。&lt;/p&gt;

&lt;h3 id=&#34;upstartから起動させる:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;upstartから起動させる&lt;/h3&gt;

&lt;p&gt;別に手で起動しても問題ないと思うのですが、多分ナンセンスなので。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/init/app.conf&lt;/code&gt;を作って、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;description &amp;quot;uWSGI&amp;quot;
start on runlevel [2345]
stop on runlevel [06]
respawn

env UWSGI=/path/to/uwsgi
exec $UWSGI --ini /path/to/wsgi.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sudo start app&lt;/code&gt;で起動出来ます。この起動の仕方は初めて知りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kuni-nakaji/items/f3426bf69be947c594c4&#34;&gt;Linux - upstartでデーモン化してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nginxとの連携:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;nginxとの連携&lt;/h2&gt;

&lt;p&gt;インストールは省きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server {
    listen       80;
    server_name  localhost;
    charset      utf-8;

    location / {
        try_files $uri @uwsgi;
    }

    location @uwsgi {
        include uwsgi_params;
        uwsgi_pass unix:/path/to/app.sock;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uWSGIが起動して&lt;code&gt;app.sock&lt;/code&gt;が配備されてる状態であればこれでアクセス出来るはず。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/morinokami/items/e0efb2ae2aa04a1b148b&#34;&gt;Flask + uWSGI + Nginx でハローワールドするまで @ さくらのVPS (CentOS 6.6) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html&#34;&gt;uWSGI で Django を使う方法 — Django 1.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
