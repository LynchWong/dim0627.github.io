<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centos on Unresolved</title>
    <link>http://localhost:1313/tags/centos/</link>
    <description>Recent content in Centos on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jan 2016 10:57:35 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/centos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Python]Flaskアプリをnginx &#43; uWSGIでさくらVPSにデプロイする</title>
      <link>http://localhost:1313/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</link>
      <pubDate>Fri, 08 Jan 2016 10:57:35 +0900</pubDate>
      
      <guid>http://localhost:1313/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</guid>
      <description>

&lt;p&gt;CentOS6.5、Python2.7でやります。&lt;/p&gt;

&lt;p&gt;CentOS6.5にプリインストールされているPythonは2.6だと思うのですが、Python2.7の導入方法は書きません。
多分いろいろな環境で動いたり動かなかったりしちゃうと思うので。&lt;/p&gt;

&lt;p&gt;僕はこの記事を参考にしました。非常に簡単かつ完璧に書かれてて助かりました。こんな記事が書けるようになりたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/a_yasui/items/5f453297855791ed648d&#34;&gt;CentOS に Python2.7, Python3.3を入れたメモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;uwsgiをインストールする:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGIをインストールする&lt;/h2&gt;

&lt;p&gt;まあ当然WSGIを使います。PythonをWebアプリとして動かす際のサーバ間仕様ですね。&lt;/p&gt;

&lt;p&gt;WSGIで使えるコンテナはWikiを見る限り幾つかあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Web_Server_Gateway_Interface&#34;&gt;Web Server Gateway Interface - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WSGIアプリケーションコンテナの例としては、uWSGI, Gunicorn, Apacheモジュール (mod_wsgi, mod_pythonなど), Microsoft IIS（isapi-wsgi, PyISAPIe, ASPゲートウェイを使用）などがある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回はuWSGIを使います。&lt;/p&gt;

&lt;h3 id=&#34;uwsgi:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGI？&lt;/h3&gt;

&lt;p&gt;公式より引用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uwsgi-docs.readthedocs.org/en/latest/&#34;&gt;The uWSGI project — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The uWSGI project aims at developing a full stack for building hosting services.&lt;/p&gt;

&lt;p&gt;Application servers (for various programming languages and protocols), proxies, process managers and monitors are all implemented using a common api and a common configuration style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;アプリケーションサーバですね。&lt;/p&gt;

&lt;p&gt;今回はnginxの向こうにuWSGIを置いてサービスを動作させます。&lt;/p&gt;

&lt;h3 id=&#34;インストール:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんて簡単！&lt;/p&gt;

&lt;h3 id=&#34;パラメータオプションでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;パラメータオプションでの起動&lt;/h3&gt;

&lt;p&gt;uWSGIはコマンドから起動設定も含めた起動が出来ます。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで8000ポートで&lt;code&gt;wsgi_app&lt;/code&gt;がhttp全公開になります。
nginxと連携させる前に、一度このタイミングでアクセス出来るかを見とくと良いですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-w&lt;/code&gt;オプションはわかりづらいのですが、&lt;code&gt;main.py&lt;/code&gt;にアプリの起動が記述されてる場合は&lt;code&gt;main&lt;/code&gt;を指定するみたいですね。&lt;/p&gt;

&lt;p&gt;パラメータは公式のこのページが参考になりそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/Options.html&#34;&gt;uWSGI Options — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっとしたロジックも書ける様子。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/ConfigLogic.html&#34;&gt;Configuration logic — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iniファイルでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;iniファイルでの起動&lt;/h3&gt;

&lt;p&gt;パラメータをたくさんつけるとコマンドが長くなってしまうので&lt;code&gt;ini&lt;/code&gt;に落とし込みました。
&lt;code&gt;xml&lt;/code&gt;とかその他の形式でも行けるみたいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[uwsgi]
chdir = /path/to/src
module = wsgi
socket = /path/to/app.sock
touch-reload = /path/to/reload.trigger
logto = /var/log/uwsgi.log
max-requests = 1000
chmod-socket = 666

uid = www-user
gid = www-group
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は&lt;code&gt;uwsgi --ini wsgi.ini&lt;/code&gt;みたいな感じ。
ここでも一度アクセスできるかを確認するといいですね。&lt;/p&gt;

&lt;p&gt;chdirはカレントディレクトリの指定です。
これがないとコマンドでは動くのにupstartから起動したら動かない、なんてことになったり。&lt;/p&gt;

&lt;p&gt;socketについてはこの記事が詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロダクションで使うならその他細かな設定が必要かと思います。&lt;/p&gt;

&lt;h3 id=&#34;upstartから起動させる:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;upstartから起動させる&lt;/h3&gt;

&lt;p&gt;別に手で起動しても問題ないと思うのですが、多分ナンセンスなので。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/init/app.conf&lt;/code&gt;を作って、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;description &amp;quot;uWSGI&amp;quot;
start on runlevel [2345]
stop on runlevel [06]
respawn

env UWSGI=/path/to/uwsgi
exec $UWSGI --ini /path/to/wsgi.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sudo start app&lt;/code&gt;で起動出来ます。この起動の仕方は初めて知りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kuni-nakaji/items/f3426bf69be947c594c4&#34;&gt;Linux - upstartでデーモン化してみる - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nginxとの連携:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;nginxとの連携&lt;/h2&gt;

&lt;p&gt;インストールは省きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server {
    listen       80;
    server_name  localhost;
    charset      utf-8;

    location / {
        try_files $uri @uwsgi;
    }

    location @uwsgi {
        include uwsgi_params;
        uwsgi_pass unix:/path/to/app.sock;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uWSGIが起動して&lt;code&gt;app.sock&lt;/code&gt;が配備されてる状態であればこれでアクセス出来るはず。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/morinokami/items/e0efb2ae2aa04a1b148b&#34;&gt;Flask + uWSGI + Nginx でハローワールドするまで @ さくらのVPS (CentOS 6.6) - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html&#34;&gt;uWSGI で Django を使う方法 — Django 1.4 documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant &#43; CentOS &#43; PostgreSQLを最速で構築</title>
      <link>http://localhost:1313/blog/2015/01/22/install-postgresql-on-centos/</link>
      <pubDate>Thu, 22 Jan 2015 15:37:14 +0900</pubDate>
      
      <guid>http://localhost:1313/blog/2015/01/22/install-postgresql-on-centos/</guid>
      <description>

&lt;p&gt;herokuにのっけるアプリを作るとき、ローカルではSQLite使ってたんだけどもう色々つらい。&lt;/p&gt;

&lt;p&gt;なんか整数で定義したカラムに文字列入るし。なんかオートインクリメントの設定の仕方がPostgreSQLと違うし。&lt;/p&gt;

&lt;p&gt;なのでもう、さっとPostgreSQLだけ入った仮想環境を作ってホスト側から繋げるようにしたい。&lt;/p&gt;

&lt;h2 id=&#34;vagrantfileの設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;Vagrantfileの設定&lt;/h2&gt;

&lt;p&gt;もう面倒なのはいやなのでCentOSとIPの設定だけやります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &amp;quot;chef/centos-6.5&amp;quot;
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresqlの導入:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;PostgreSQLの導入&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo yum install postgresql
[vagrant@localhost ~]$ sudo yum install postgresql-server
[vagrant@localhost ~]$ sudo yum install postgresql-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresqlの使い方がわからない:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;PostgreSQLの使い方がわからない&lt;/h2&gt;

&lt;p&gt;もうほんとPostgreSQLの使い方がわかんない、MySQLばっか触ってたからわかんない。&lt;/p&gt;

&lt;p&gt;そもそもサービス名はなんなんだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ service postgresql
Usage: /etc/init.d/postgresql {start|stop|status|restart|condrestart|try-restart|reload|force-reload|initdb}
[vagrant@localhost ~]$ service postgresql status
postmaster is stopped
[vagrant@localhost ~]$ sudo service postgresql start

/var/lib/pgsql/data is missing. Use &amp;quot;service postgresql initdb&amp;quot; to initialize the cluster first.
                                                           [FAILED]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;postgresql&lt;/code&gt;か、でもなんか起動しないですね。&lt;/p&gt;

&lt;p&gt;なんか&lt;code&gt;initdb&lt;/code&gt;とやらで初期化をしなきゃいけないらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo -u postgres /usr/bin/initdb -D /var/lib/pgsql/data
could not change directory to &amp;quot;/home/vagrant&amp;quot;
The files belonging to this database system will be owned by user &amp;quot;postgres&amp;quot;.
This user must also own the server process.

The database cluster will be initialized with locale en_US.UTF-8.
The default database encoding has accordingly been set to UTF8.
The default text search configuration will be set to &amp;quot;english&amp;quot;.

fixing permissions on existing directory /var/lib/pgsql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /var/lib/pgsql/data/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects&#39; descriptions ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling &amp;quot;trust&amp;quot; authentication for local connections
You can change this by editing pg_hba.conf or using the -A option the
next time you run initdb.

Success. You can now start the database server using:

    /usr/bin/postgres -D /var/lib/pgsql/data
or
    /usr/bin/pg_ctl -D /var/lib/pgsql/data -l logfile start
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo service postgresql start
Starting postgresql service:                               [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ゲスト内で繋がるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ psql -U postgres
psql (8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけますね。&lt;/p&gt;

&lt;p&gt;ホスト側からいけるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql: could not connect to server: Connection refused
	Is the server running on host &amp;quot;192.168.33.10&amp;quot; and accepting
	TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけないね。&lt;/p&gt;

&lt;h2 id=&#34;接続の設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;接続の設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/postgresql.conf&lt;/code&gt;のコメントアウトを外したり&lt;code&gt;*&lt;/code&gt;にしたりこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen_addresses = &#39;*&#39;          # what IP address(es) to listen on;
                                        # comma-separated list of addresses;
                                        # defaults to &#39;localhost&#39;, &#39;*&#39; = all
                                        # (change requires restart)
port = 5432                             # (change requires restart)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/pg_hba.conf&lt;/code&gt;にこれを追加する感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host    all         all         0.0.0.0/0             trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけるかな？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql (9.3.5, server 8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけますね。&lt;/p&gt;

&lt;p&gt;そのうちshellにまとめてprovisioning出来るようにしよう・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://iwa4.hatenablog.com/entry/2014/05/30/190000&#34;&gt;Vagrant で Windows に Postgres on CentOS 環境を構築 - 弘法にも筆の誤り&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dbonline.jp/postgresql/connect/index2.html&#34;&gt;PostgreSQLへの接続 - PostgreSQLへの接続と切断 - PostgreSQLの使い方&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
