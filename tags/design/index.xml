<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unresolved </title>
    <link>http://yet.unresolved.xyz/tags/design/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2014-12-09 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>LeiningenでSCSSを自動コンパイルする</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/09/automatically-compile-the-scss-in-leiningen/</link>
          <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/09/automatically-compile-the-scss-in-leiningen/</guid>
          <description>

&lt;p&gt;Clojureを始めて一週間ほどになりまして。&lt;/p&gt;

&lt;p&gt;ようやくWebアプリ開発に着手しました。&lt;/p&gt;

&lt;p&gt;というわけで開発環境を整えます。&lt;/p&gt;

&lt;h2 id=&#34;lein-haml-sassの導入:aea6c6aa18698925cad2fc33bce27d8b&#34;&gt;lein-haml-sassの導入&lt;/h2&gt;

&lt;p&gt;まったく贅沢な名前してんな！&lt;/p&gt;

&lt;p&gt;いえ、&lt;a href=&#34;https://github.com/rtircher/lein-haml-sass&#34;&gt;lein-haml-sass&lt;/a&gt;は素晴らしいプラグインです。&lt;/p&gt;

&lt;p&gt;これを使うとなんとhamlのコンパイルやsass/scssのコンパイルをやってくれます。&lt;/p&gt;

&lt;p&gt;ていうか&lt;strong&gt;sassとscssの違い&lt;/strong&gt;ってなんだっけ？真面目に考えるとわかんないな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1402/17/news102.html#02&#34;&gt;CSSコーディングで泣かないためのSassの基礎知識と10の利点 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;へえ・・・。&lt;/p&gt;

&lt;p&gt;とりあえず導入します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject example &amp;quot;1.2.3&amp;quot;
  :plugins [[lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに設定も記述。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;resources/sass/&lt;/code&gt;にscssを、&lt;code&gt;resources/public/css/&lt;/code&gt;にcssを出力する設定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject example-project &amp;quot;1.2.3&amp;quot;
  :haml {:src &amp;quot;resources/haml&amp;quot;
         :output-directory &amp;quot;resources/public/html&amp;quot;
         }

  :sass {:src &amp;quot;resources/sass&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         }

  :scss {:src &amp;quot;resources/scss&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         }
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまではコピペだけど、オレのファイル自体はこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject tpc &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]
                 [compojure &amp;quot;1.2.0&amp;quot;]
                 [ring/ring-defaults &amp;quot;0.1.2&amp;quot;]
                 [enlive &amp;quot;1.1.5&amp;quot;]]
  :plugins [[lein-ring &amp;quot;0.8.13&amp;quot;]
            [lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]]
  :ring {:handler tpc.core.handler/app}
  :profiles
  {:dev {:dependencies [[javax.servlet/servlet-api &amp;quot;2.5&amp;quot;]
                        [ring-mock &amp;quot;0.1.5&amp;quot;]]}}
  :scss {:src &amp;quot;resources/sass&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         :output-extension &amp;quot;css&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイルする:aea6c6aa18698925cad2fc33bce27d8b&#34;&gt;コンパイルする&lt;/h2&gt;

&lt;p&gt;さっそく&lt;code&gt;lein sass once&lt;/code&gt;してみるも、何も起きない！&lt;/p&gt;

&lt;p&gt;あっ、sassとscssでタスクが違う。&lt;/p&gt;

&lt;p&gt;ていうかsassフォルダにscss置くのってなんか違う気がしてきた！あとで名前変えよう。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;code&gt;lein scss once&lt;/code&gt;で無事動きました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lein scss auto&lt;/code&gt;で変更監視できるっぽい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Octopressのテーマを作ってみる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</link>
          <pubDate>Sun, 21 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</guid>
          <description>

&lt;p&gt;元のやつもすっごいかっこよくてよかったんだけど、さすがに他の人とかぶっちゃうのはやだよね。&lt;/p&gt;

&lt;p&gt;でもオレはデザイナーじゃないから、あんまりがっつりやるのもやだよね。&lt;/p&gt;

&lt;p&gt;てことで元のclassicテーマをパクって作ろう。&lt;/p&gt;

&lt;p&gt;Octopressから移行してしまったので、スクリーンショットだけ載せとく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34; class=&#34;image&#34; alt=&#34;flatten&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーマの変え方:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの変え方&lt;/h2&gt;

&lt;p&gt;そもそも変え方すら知らない。&lt;/p&gt;

&lt;p&gt;てことで調べた。&lt;/p&gt;

&lt;p&gt;どうやらここにテーマ単位のディレクトリが配置されるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes
classic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;rake install[theme name]&lt;/code&gt;でインストール。&lt;/p&gt;

&lt;h2 id=&#34;テーマの構成:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの構成&lt;/h2&gt;

&lt;p&gt;作るにも、テーマの定義に何が必要かがわからぬ。&lt;/p&gt;

&lt;p&gt;classicの中を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic
sass   source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んん、シンプル。&lt;/p&gt;

&lt;p&gt;察するに&lt;code&gt;sass&lt;/code&gt;がスタイル系で&lt;code&gt;source&lt;/code&gt;がテンプレート系なのかな？&lt;/p&gt;

&lt;p&gt;別にページレイアウトを変えたいとか、そんなたいそうなことは考えてないので、sass内をいじるだけでよさそう。&lt;/p&gt;

&lt;p&gt;sass内はどうなってるのかな？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic/sass
_base.scss     _partials.scss base           custom         partials       plugins        screen.scss

octopress git:(source)$ ls .themes/classic/sass/custom
_colors.scss _fonts.scss  _layout.scss _styles.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;.themes/classic/sass/custom/_styles.scss&lt;/code&gt;がオーバーライド用のファイルなわけだな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// This File is imported last, and will override other styles in the cascade
// Add styles here to make changes without digging in too much
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本当はsassで書きたいけど今その技術は持ち合わせてないし、ちょっと今やるのも面倒なので普通にCSSを書こう・・・。&lt;/p&gt;

&lt;p&gt;ということで出来ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/flatten&#34;&gt;flatten&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gravatarの件が入っちゃってるから、これは後で分離しなきゃなあ。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
