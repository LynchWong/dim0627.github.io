<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Unresolved</title>
    <link>http://yet.unresolved.xyz/tags/security/</link>
    <description>Recent content in Security on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Feb 2016 14:36:12 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>「CTF for Starter in IISEC」に行ってきた</title>
      <link>http://yet.unresolved.xyz/blog/2016/02/22/ctf-for-starter/</link>
      <pubDate>Mon, 22 Feb 2016 14:36:12 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/02/22/ctf-for-starter/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://atnd.org/events/74688&#34;&gt;CTF for Starter in IISEC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13時から17時まで、情報セキュリティ大学院大学にて開催された上記イベントに参加してきました。&lt;/p&gt;

&lt;h2 id=&#34;参加の動機:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;参加の動機&lt;/h2&gt;

&lt;p&gt;参加の理由は、もともとCTFやセキュリティに興味があったから。
CTFは参加する気ないけど・・・。&lt;/p&gt;

&lt;p&gt;イベント内でも説明されてたとおり、CTFはやっぱりハードルが高いし、
勉強出来るならしてみたいって人は多いと思う。
このイベントはそういった人に向けたものとのことだったので、参加を決めました。&lt;/p&gt;

&lt;h2 id=&#34;会場:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;会場&lt;/h2&gt;

&lt;p&gt;情報セキュリティ大学院大学さんの教室ひとつを貸しきっての開催でした。
コンクリート打ちっぱなしの無機質さがおしゃれだった。&lt;/p&gt;

&lt;p&gt;流石に電源だとかの設備も良く、特に不満なくイベントを終えられました。&lt;/p&gt;

&lt;h2 id=&#34;事前準備:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;前準備として、いくつかのソフトのインストールが必要だった。
基本的にWindows上での操作になるので、Macを使ってる人はModernIEを導入した上での準備が必要。&lt;/p&gt;

&lt;p&gt;導入したソフトは以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;OWASP ZAP&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Ollydbg&lt;/li&gt;
&lt;li&gt;AutoPsy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ModernIEはVirtualBox上で動かしてたんだけど、GuestOSにCPUを1コアしか使わせてなかったせいでめちゃくちゃ重かった。
会の中盤で気づいて直してからは快適でした。&lt;/p&gt;

&lt;h2 id=&#34;開催内容:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;開催内容&lt;/h2&gt;

&lt;p&gt;ネットワーク、ウェブ、フォレンジックのジャンルごとに幾つか問題が出題されて、
説明を受けながら自分でも頑張って解いていく感じ。
とっつきづらい問題でも挑戦してみる意欲を持てる感じに作られていたので、
楽しみながら勉強することが出来たと思う。&lt;/p&gt;

&lt;p&gt;周りもちょこちょこ見てたけど、開催者の方が丁寧にフォローをしてたので、躓いたまま放置されたりって人は居なかったみたい。
好印象だった。&lt;/p&gt;

&lt;h3 id=&#34;良かったこと:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;良かったこと&lt;/h3&gt;

&lt;p&gt;何より一番ためになったのは、ツールの使い方だと思う。
&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;とか&lt;a href=&#34;http://www.sleuthkit.org/autopsy/&#34;&gt;Autopsy&lt;/a&gt;とか、
名前は知ってても発展的な使い方を覚える機会が少ないから、それが学べたのは良かった。
まだまだわかってない機能ばかりだから、そこはこれからやっていったほうが良いと思うけど。&lt;/p&gt;

&lt;p&gt;出題サーバの不調等のトラブルもあったけど、比較的すぐ修復されていたし特に気にはならなかった。&lt;/p&gt;

&lt;h2 id=&#34;今後:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;今後&lt;/h2&gt;

&lt;p&gt;やっぱり自分が身をおいているのがWebの世界なので、Webが一番興味を持つことが出来た。
だからWebは特に意識しなくても勉強をしていけると思うけど、
フォレンジックやネットワークについてはちゃんと時間を取ってやっていきたいなと思ってる。&lt;/p&gt;

&lt;p&gt;この勉強会はStarterなだけあって、何度も参加すればその分恩恵があるかというとそういうわけではないので、
今後は独学か、また別の勉強会で学んでいけたらいいかなと。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/mochigomactf&#34;&gt;mochigoma(@mochigomaCTF)&lt;/a&gt;の皆様と&lt;a href=&#34;https://www.iisec.ac.jp/&#34;&gt;情報セキュリティ大学院大学&lt;/a&gt;様、ありがとうございました。
大変ためになりました。&lt;/p&gt;

&lt;h3 id=&#34;その他参加者のブログ:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;その他参加者のブログ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://followcolor.hatenadiary.jp/entry/2016/02/21/221917&#34;&gt;CTF for Starter in IISEC 感想 - followcolorのブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勝手に記載。僕なんかよりもセキュリティに造詣が深い方のようなので、参考になりました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OWASP ZAPでBASIC認証を突破する</title>
      <link>http://yet.unresolved.xyz/blog/2015/09/30/using-basic-auth-in-owasp-zap/</link>
      <pubDate>Wed, 30 Sep 2015 16:24:53 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/09/30/using-basic-auth-in-owasp-zap/</guid>
      <description>

&lt;p&gt;調べても意外と見つからない。&lt;/p&gt;

&lt;p&gt;要はリクエストヘッダに認証情報をくっつけられればいいんだけどその方法がわからない。&lt;/p&gt;

&lt;h2 id=&#34;リクエストヘッダに情報を差し込む:6779ddb6118e231a79097670a186005c&#34;&gt;リクエストヘッダに情報を差し込む&lt;/h2&gt;

&lt;p&gt;Stand AloneのScriptを作ってこんな感じでヘッダを差し込めるらしい&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; org.parosproxy.paros.network.HttpSender.addListener(
   new org.zaproxy.zap.network.HttpSenderListener {
     getListenerOrder: function() {
       return 1;
     },

     onHttpRequestSend: function(msg, initiator) {
       msg.getRequestHeader().setHeader(
         &amp;quot;Authorization&amp;quot;, &amp;quot;Basic ZHJwaGxxxxxxBob3Rv&amp;quot;);
     },

     onHttpResponseReceive: function(msg, initiator) {
     }
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6779ddb6118e231a79097670a186005c&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pupha.net/archives/2654/&#34;&gt;OWASP ZAP で送信されるリクエストに自動で独自ヘッダを追加する方法 - Web Application Security Memo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Clojure]ringのCSRFトークンを生成する</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</link>
      <pubDate>Sun, 22 Mar 2015 19:23:27 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</guid>
      <description>&lt;p&gt;ClojureのWebアプリは大抵ringでルーティングとかやると思うんだけど、
デフォルトだとPOSTリクエストした時にCSRFトークンチェックが入るようになっててたまに困る。&lt;/p&gt;

&lt;p&gt;なのでトークンの生成方法をメモ。&lt;/p&gt;

&lt;p&gt;チェックの処理は&lt;code&gt;site-defaults&lt;/code&gt;の、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def app
  (wrap-defaults app-routes site-defaults))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:security&lt;/code&gt;のところで設定出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def site-defaults
  &amp;quot;A default configuration for a browser-accessible website, based on current
  best practice.&amp;quot;
  {:params    {:urlencoded true
               :multipart  true
               :nested     true
               :keywordize true}
   :cookies   true
   :session   {:flash true
               :cookie-attrs {:http-only true}}
   :security  {:anti-forgery   true
               :xss-protection {:enable? true, :mode :block}
               :frame-options  :sameorigin
               :content-type-options :nosniff}
   :static    {:resources &amp;quot;public&amp;quot;}
   :responses {:not-modified-responses true
               :absolute-redirects     true
               :content-types          true}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを&lt;code&gt;false&lt;/code&gt;にしちゃえばもちろんCSRFのチェックはされなくなるんだけど、まあ普通はするべきですよね。&lt;/p&gt;

&lt;p&gt;トークンの生成の仕方はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns sample.handler
  (:require [ring.util.anti-forgery :refer :all]))
(anti-forgery-field)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ring.util.anti-forgery&lt;/code&gt;の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns ring.util.anti-forgery
  &amp;quot;Utility functions for inserting anti-forgery tokens into HTML forms.&amp;quot;
  (:use [hiccup core form]
        ring.middleware.anti-forgery))

(defn anti-forgery-field
  &amp;quot;Create a hidden field with the session anti-forgery token as its value.
  This ensures that the form it&#39;s inside won&#39;t be stopped by the anti-forgery
  middleware.&amp;quot;
  []
  (html (hidden-field &amp;quot;__anti-forgery-token&amp;quot; *anti-forgery-token*)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
