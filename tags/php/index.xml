<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unresolved </title>
    <link>http://yet.unresolved.xyz/tags/php/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2015-11-04 12:18:07 &#43;0900 JST</updated>

    
      
        <item>
          <title>ELB越しのLaravelでHTTPSを使おうとして困った話</title>
          <link>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</link>
          <pubDate>Wed, 04 Nov 2015 12:18:07 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</guid>
          <description>

&lt;h2 id=&#34;ssl証明書はelbに設置する:56aef34fa740ed018dee02e37b63f347&#34;&gt;SSL証明書はELBに設置する&lt;/h2&gt;

&lt;p&gt;何が普通なのか知らないけど、今回立ち上げた構成では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(80)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;っていう構成にしていました（するつもりだった）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/cloud/aws/aws-beginner-elb-ssl/&#34;&gt;【初心者向け】ELBにSSL証明書をインストールする ｜ Developers.IO&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題はリリース当日に:56aef34fa740ed018dee02e37b63f347&#34;&gt;問題はリリース当日に&lt;/h2&gt;

&lt;p&gt;リリースしてみたら何やら証明書のエラーが出てる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your connection to this site is private, but someone on the network might be able to change the look of the page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このページはSSL証明書が効いてるんだけど、ネットワーク上の何かがそうじゃなくしちゃうかもね？&lt;/p&gt;

&lt;p&gt;原因は&lt;strong&gt;httpsじゃないURLに飛ばすformタグがページに存在する&lt;/strong&gt;せいでした。&lt;/p&gt;

&lt;p&gt;開発環境でも僕僕証明書を用意したりしてHTTPSで通信するようにしておくべきでした。&lt;/p&gt;

&lt;h2 id=&#34;laravelのrouteメソッド:56aef34fa740ed018dee02e37b63f347&#34;&gt;Laravelのrouteメソッド&lt;/h2&gt;

&lt;p&gt;URLのレンダリングはLaravelの&lt;code&gt;route&lt;/code&gt;メソッドを使っています。&lt;/p&gt;

&lt;p&gt;これは結構気に入っていて、後でURLを変えたいって時にある程度コストを軽減してくれる（んじゃないか）と思っているから。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://laravel.com/docs/5.1/routing#named-routes&#34;&gt;HTTP Routing - Laravel - The PHP Framework For Web Artisans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でも今回はこのメソッドが&lt;strong&gt;HTTPのURLをレンダリングした&lt;/strong&gt;せいで問題が起こりました。&lt;/p&gt;

&lt;h2 id=&#34;laravelでhttpsのurlを取り扱う:56aef34fa740ed018dee02e37b63f347&#34;&gt;LaravelでHTTPSのURLを取り扱う&lt;/h2&gt;

&lt;p&gt;LaravelのRoutingはこんな感じなんだけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPSのみを許容することも出来るらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;https&#39;, &#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておけば&lt;code&gt;route&lt;/code&gt;メソッドでレンダリングされるURLもHTTPSになる。&lt;/p&gt;

&lt;h2 id=&#34;そして問題が起きる:56aef34fa740ed018dee02e37b63f347&#34;&gt;そして問題が起きる&lt;/h2&gt;

&lt;p&gt;先ほどの通り、LaravelでHTTPSの設定をすると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPSのみを受け付ける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLのをレンダリングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事になります。&lt;/p&gt;

&lt;p&gt;今回ELBの奥にあるLaravelが載ったインスタンスはnginxが80ポートを待ち受けています。&lt;/p&gt;

&lt;p&gt;なのでHTTPSだけを許容されると困るんですね、443で通信しなきゃいけない。&lt;/p&gt;

&lt;h2 id=&#34;解決策:56aef34fa740ed018dee02e37b63f347&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;わがままを言えば&lt;strong&gt;LaravelがHTTPを受け付けて&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLをレンダリングする&lt;/strong&gt;と嬉しい。&lt;/p&gt;

&lt;p&gt;けどその方法は見つからず（構成としてナンセンスなんだろう）、ELBとLaravelが載ったインスタンスの両方にSSL証明書を設置することにしました。&lt;/p&gt;

&lt;p&gt;というわけでこういう形。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(443)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めでたしめでたし。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>[Laravel5.1]発行されたSQLと実行計画を取得する</title>
          <link>http://yet.unresolved.xyz/blog/2015/09/30/get-explain-at-laravel/</link>
          <pubDate>Wed, 30 Sep 2015 13:44:48 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/09/30/get-explain-at-laravel/</guid>
          <description>

&lt;p&gt;インデックス設計をするときとか、ORMを通して実際に発行されたSQLとか実行計画がほしい。&lt;/p&gt;

&lt;h2 id=&#34;sqlの発行をフックする:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;SQLの発行をフックする&lt;/h2&gt;

&lt;p&gt;ここに書いてあるとおり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://laravel.com/docs/5.1/database#listening-for-query-events&#34;&gt;Database: Getting Started - Laravel - The PHP Framework For Web Artisans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DB&lt;/code&gt;の&lt;code&gt;listen&lt;/code&gt;メソッドに&lt;code&gt;$sql, $bindings, $time&lt;/code&gt;を受け取るClosureを渡せる。&lt;/p&gt;

&lt;p&gt;なので&lt;code&gt;App\Providers\AppServiceProvider&lt;/code&gt;の&lt;code&gt;boot()&lt;/code&gt;メソッドに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {
            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやればよい。&lt;/p&gt;

&lt;h2 id=&#34;実行計画も取る:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;実行計画も取る&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {

            if (preg_match(&amp;quot;/^select/&amp;quot;, $sql)) {
                $explain = \DB::select(&amp;quot;explain {$sql}&amp;quot;, $bindings);
                \Log::info($explain);
            }

            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう。&lt;/p&gt;

&lt;p&gt;updateとかもフックしちゃうと2回発行されたりして面倒なので、selectだけ。&lt;/p&gt;

&lt;p&gt;selectに絞らないとしても、explainの取得がさらにフックされて・・・ってなるので、&lt;/p&gt;

&lt;p&gt;何かしら絞る必要はあり。&lt;/p&gt;

&lt;h2 id=&#34;本番では取らない:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;本番では取らない&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {

            if (config(&#39;app.env&#39;) !== &#39;production&#39; &amp;amp;&amp;amp; preg_match(&amp;quot;/^select/&amp;quot;, $sql)) {
                $explain = \DB::select(&amp;quot;explain {$sql}&amp;quot;, $bindings);
                \Log::info($explain);
            }

            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Apigility &#43; React.jsでタスク管理ツールを作ってみる</title>
          <link>http://yet.unresolved.xyz/blog/2015/02/14/make-task-manager-by-using-apigility/</link>
          <pubDate>Sat, 14 Feb 2015 19:30:22 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/02/14/make-task-manager-by-using-apigility/</guid>
          <description>

&lt;p&gt;これに行ってきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://zendevent.doorkeeper.jp/events/19917&#34;&gt;Zend 社技術者による最近の PHP 関連の取り組みご紹介 - Zendイベント管理 | Doorkeeper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;英語辛かった。&lt;/p&gt;

&lt;p&gt;PHP7やらZ Rayやらまあ気になるものはそれなりにあったんだけど、&lt;/p&gt;

&lt;p&gt;その中でも触ってみようかなと思えるくらい興味を持てた&lt;a href=&#34;https://apigility.org/&#34;&gt;Apigility&lt;/a&gt;を触ってみようと思います。&lt;/p&gt;

&lt;p&gt;ついでなので使ってみたかったReact.jsも導入してみる。&lt;/p&gt;

&lt;h2 id=&#34;apigility:a8f13c6c06505842468ef355c1de93c5&#34;&gt;Apigility？&lt;/h2&gt;

&lt;p&gt;API構築に特化したフレームワークらしい。&lt;/p&gt;

&lt;p&gt;プレゼンテーションレイヤを完全に分離したアーキテクチャでの利用を想定しているんだと思う。&lt;/p&gt;

&lt;p&gt;何が強いかって、DBさえ用意してしまえば後はGUIから操作するだけでAPIが作れてしまう。&lt;/p&gt;

&lt;p&gt;DBも多分メジャーどころは大抵使える(と思う)し、APIもRPCはもちろん、RESTfulな設計にもバッチリ対応してるらしい。&lt;/p&gt;

&lt;p&gt;今回は勉強も兼ねて、簡単なタスク管理ツールを作ってみます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a8f13c6c06505842468ef355c1de93c5&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;このコマンドをべしっとやるだけで、カレントディレクトリにapigilityのディレクトリが切られる &amp;amp; サーバまで起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sS https://apigility.org/install | php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバを再度起動する場合は&lt;code&gt;php -S localhost:8888 -t public public/index.php&lt;/code&gt;とかやればOK。&lt;/p&gt;

&lt;p&gt;画面を開くとこんな感じのが出てくる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/apigility_top.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/apigility_top.png&#34; class=&#34;image&#34; alt=&#34;apigility_top&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ロゴがかわいいね。&lt;/p&gt;

&lt;p&gt;ここからAPIの追加やデータベース接続の設定やらが出来ます。&lt;/p&gt;

&lt;h2 id=&#34;データベースの準備:a8f13c6c06505842468ef355c1de93c5&#34;&gt;データベースの準備&lt;/h2&gt;

&lt;p&gt;適当なものなので、SQLiteでやっちゃう。&lt;/p&gt;

&lt;p&gt;テーブルはこんな感じで、名前と完了/未完了が持てるだけにしよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table tasks(id integer primary key, name varchar(20), finished integer);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apigilityからデータベースにつなぐ:a8f13c6c06505842468ef355c1de93c5&#34;&gt;Apigilityからデータベースにつなぐ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Settings&lt;/code&gt;の&lt;code&gt;Database Adapters&lt;/code&gt;から定義を追加出来る。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/database.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/database.png&#34; class=&#34;image&#34; alt=&#34;database&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はこんな感じで設定。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/def_database.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/def_database.png&#34; class=&#34;image&#34; alt=&#34;def_database&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;apiを追加する:a8f13c6c06505842468ef355c1de93c5&#34;&gt;APIを追加する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;APIs&lt;/code&gt;の&lt;code&gt;Create New API&lt;/code&gt;からAPIを追加する。&lt;/p&gt;

&lt;p&gt;今回はTasksという名前で作成した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/create_api.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/create_api.png&#34; class=&#34;image&#34; alt=&#34;create_api&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;粒度がわかりづらいけど、ここで作ったAPIに対して個々のサービスを追加していく。&lt;/p&gt;

&lt;p&gt;大分類みたいなものだと捉えればいいのかな？&lt;/p&gt;

&lt;h2 id=&#34;サービスを追加する:a8f13c6c06505842468ef355c1de93c5&#34;&gt;サービスを追加する&lt;/h2&gt;

&lt;p&gt;さっき作ったTasksAPIに、データベースの&lt;code&gt;tasks&lt;/code&gt;テーブルとRESTで紐づくサービスを追加する。&lt;/p&gt;

&lt;p&gt;サービスはRESTとRPCから選ぶことが出来て、&lt;/p&gt;

&lt;p&gt;RPCを選ぶと自動生成されたPHPのコードに自分で処理を書いていく感じになるみたい。&lt;/p&gt;

&lt;p&gt;んで指定したURLを叩くとその処理が呼ばれる、って感じ。&lt;/p&gt;

&lt;p&gt;今回は単純にテーブルとURLをRESTfulに対応付けられればいいのでRESTにしてます。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;code&gt;REST Service Name&lt;/code&gt;をtasks、&lt;code&gt;DB-Connected&lt;/code&gt;はさっき作ったアダプタとテーブル名を設定。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/create_service.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/create_service.png&#34; class=&#34;image&#34; alt=&#34;create_service&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/def_service.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/def_service.png&#34; class=&#34;image&#34; alt=&#34;def_service&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接続できるか試してみよう。&lt;/p&gt;

&lt;p&gt;データがないので、まずはPOSTで格納してみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/post_tasks.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/post_tasks.png&#34; class=&#34;image&#34; alt=&#34;post_tasks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いけてるっぽい。&lt;/p&gt;

&lt;p&gt;取得は？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/get_tasks.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/get_tasks.png&#34; class=&#34;image&#34; alt=&#34;get_tasks&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おお！取れる！&lt;/p&gt;

&lt;p&gt;もちろんSQLite側にも、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; select * from tasks;
1|task1|false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;入ってます。&lt;/p&gt;

&lt;h2 id=&#34;ビューを作る:a8f13c6c06505842468ef355c1de93c5&#34;&gt;ビューを作る&lt;/h2&gt;

&lt;p&gt;サーバサイドがあまりにもサクッと終わっちゃったな・・・。&lt;/p&gt;

&lt;p&gt;後は画面側を生のHTMLにして、取得と格納は全部JSに任せます。&lt;/p&gt;

&lt;p&gt;つってもここはあんまり説明してもしょうがないのでSSとコードだけ。&lt;/p&gt;

&lt;p&gt;そうですめんどくさくなりました。&lt;/p&gt;

&lt;p&gt;表示はこんな感じで、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-02-14/view.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-02-14/view.png&#34; class=&#34;image&#34; alt=&#34;view&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんなHTMLでやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;style&amp;gt;
#tasks-wrapper {
  margin: 20px auto;
  max-width: 500px;
}
#tasks {
}
.buttons {
  margin-right: 5px;
}
.buttons&amp;gt;button {
  margin-right: 5px;
}
&amp;lt;/style&amp;gt;

&amp;lt;div id=&amp;quot;tasks-wrapper&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;task-name&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Task name&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
      &amp;lt;button id=&amp;quot;task-post&amp;quot; class=&amp;quot;btn btn-success&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;登録&amp;lt;/button&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;div id=&amp;quot;tasks&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/react/0.12.2/react.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/react/0.12.2/JSXTransformer.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//code.jquery.com/jquery-2.1.3.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/app.js&amp;quot; type=&amp;quot;text/jsx&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSはこんな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Task = React.createClass({
    del: function(e) {
        $.ajax({
            type: &amp;quot;DELETE&amp;quot;,
            url: &amp;quot;/tasks/&amp;quot; + this.props.id,
        });
    },
    finish: function(e) {
        $.ajax({
            type: &amp;quot;PUT&amp;quot;,
            url: &amp;quot;/tasks/&amp;quot; + this.props.id,
            data: JSON.stringify({finished: 1}),
            headers: {
                &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
            }
        });
    },
    render: function() {
        return (&amp;lt;li className=&amp;quot;list-group-item clearfix&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;buttons pull-left&amp;quot;&amp;gt;
                        {this.props.finished == &amp;quot;0&amp;quot; ?
                            (&amp;lt;button className=&amp;quot;btn btn-primary btn-xs&amp;quot; onClick={this.finish}&amp;gt;完了&amp;lt;/button&amp;gt;)
                            : &amp;quot;&amp;quot;}
                        &amp;lt;button className=&amp;quot;btn btn-danger btn-xs&amp;quot; onClick={this.del}&amp;gt;削除&amp;lt;/button&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;span className=&amp;quot;badge&amp;quot;&amp;gt;{this.props.finished == &amp;quot;0&amp;quot; ? &amp;quot;未完了&amp;quot; : &amp;quot;完了&amp;quot;}&amp;lt;/span&amp;gt;
                    {this.props.name}
                &amp;lt;/li&amp;gt;);
    }
});

var Tasks = React.createClass({
    getInitialState: function() {
        return {
            tasks: [],
        };
    },
    loadTasks: function() {
        $.get(this.props.source, function(result) {
            if(this.isMounted()) {
                this.setState({
                    tasks: result._embedded.tasks,
                });
            }
        }.bind(this));
    },
    componentDidMount: function() {
        this.loadTasks();
        setInterval(this.loadTasks, 2000);
    },
    render: function() {
        var tasks = this.state.tasks;
        return (&amp;lt;ul className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            tasks.map(function(task) {
                return &amp;lt;Task id={task.id} name={task.name} finished={task.finished} /&amp;gt;
            }.bind(this)
        )}&amp;lt;/ul&amp;gt;);
    }
});

React.render(
    &amp;lt;Tasks source=&amp;quot;/tasks&amp;quot; /&amp;gt;,
    document.getElementById(&#39;tasks&#39;)
);

$(&amp;quot;#task-post&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $.ajax(
        {
            type: &amp;quot;POST&amp;quot;,
            url: &amp;quot;/tasks&amp;quot;,
            data: JSON.stringify({name: $(&amp;quot;#task-name&amp;quot;).val(), finished: 0}),
            headers: {
                &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,
            }
        })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;React.js気軽に手出したけど、まじでむずい。&lt;/p&gt;

&lt;p&gt;一人で書いてもこんだけぐちゃぐちゃするんだから、複数人でやるときはマジで気をつけないとすごいことになりそう。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:a8f13c6c06505842468ef355c1de93c5&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Apigility、すごく楽。&lt;/p&gt;

&lt;p&gt;React.jsで心折れかけたけどそれはApigilityには関係ないわけで、サーバサイドの実装は本当にさくっと終わりました。&lt;/p&gt;

&lt;p&gt;ただ、ドキュメントが致命的なほど少ないよ。&lt;/p&gt;

&lt;p&gt;Getting Startedとかはしっかり書かれてるから導入は楽なんだけど、少しでも発展的なものになると何処にも載ってない。&lt;/p&gt;

&lt;p&gt;さらにユーザも少ないから情報が拾えなくて、これをプロダクトで使うとなると辛い場面が多いかなと思った。&lt;/p&gt;

&lt;p&gt;公式のドキュメントは結構ひどくて、2013年からの開発なのに8割くらい工事中だったりする。&lt;/p&gt;

&lt;p&gt;だから実際にこれを使いますか？ってなると、「まあ個人利用では使うかもしれませんね」って答えになってしまうかなあ。&lt;/p&gt;

&lt;p&gt;でもやっぱりこの楽さは魅力なので、今後整備されていくことに期待。&lt;/p&gt;

&lt;p&gt;React.jsはもう少ししっかり勉強します。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>PHPファイルの定数に触るとvimがフリーズする</title>
          <link>http://yet.unresolved.xyz/blog/2015/02/05/vim-freezed-in-editting-a-php-file/</link>
          <pubDate>Thu, 05 Feb 2015 21:36:25 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/02/05/vim-freezed-in-editting-a-php-file/</guid>
          <description>&lt;p&gt;&lt;code&gt;neocomplcache&lt;/code&gt;のこの設定が甘かった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:neocomplcache_omni_patterns.php = &#39;[^. \t]-&amp;gt;\h\w*\|\h\w*::&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考になったのはこの記事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vim-jp.org/vim-users-jp/2011/01/06/Hack-193.html&#34;&gt;vim-jp » Hack #193: neocomplcacheの設定について知る　後編&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;g:neocomplcache_omni_patternsは、neocomplcacheがオムニ補完の関数を呼び出すためのキーワードパターンを設定します。 主な言語にはデフォルトで対応していますが、RubyやPHPなど重いものは無効化されています。 設定例のようにすれば有効化できますが、Vimがフリーズする可能性もあります。自己責任で使用してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり原因は定数云々じゃなく&lt;code&gt;self::&lt;/code&gt;がパターンに合致したせいで、補完が走り一気に重たくなったと。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
