<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Unresolved</title>
    <link>http://yet.unresolved.xyz/tags/hugo/</link>
    <description>Recent content in Hugo on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Dec 2015 14:49:18 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>プロダクションのWordPressを捨てHugoに移行した</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</link>
      <pubDate>Thu, 10 Dec 2015 14:49:18 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</guid>
      <description>

&lt;p&gt;あんまり仕事のことは書かないつもりだったんだけど、このブログの生成でもお世話になっている&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を結構本気で使ったのでそのことをまとめてみます。&lt;/p&gt;

&lt;h2 id=&#34;hugoをプロダクションで使った:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoをプロダクションで使った&lt;/h2&gt;

&lt;p&gt;いま僕が働いている会社では事業の一つとしてメディアを運営しています。
僕が入ったとき、それはWordPressで運用がなされていて、&lt;a href=&#34;http://www.advancedcustomfields.com/&#34;&gt;Advanced Custom Fields&lt;/a&gt;を使ったガチガチのカスタム具合でした。&lt;/p&gt;

&lt;p&gt;しかしありがちなことにプラグインの管理もなされず、構築した人は外部の人、つまり動いてはいるけどそれ以上でも以下でもなかったんですね。&lt;/p&gt;

&lt;p&gt;さらにライターさんの話を聞いてみれば「なんか入力欄がいっぱいあってライティングがめんどくさい」とのこと。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;誰も幸せになっていない状態&lt;/strong&gt;というわけですね。&lt;/p&gt;

&lt;p&gt;僕が初めてそれを見た時、まず思ったのは&lt;strong&gt;「触りたくない」&lt;/strong&gt;ということでした。&lt;/p&gt;

&lt;p&gt;WordPressはドメインとガチガチに紐づくし（プラグインでなんとかなるけど）、テーマのカスタマイズだとかのコストや、現状調査をするコストが無駄だと思ったんですね。&lt;/p&gt;

&lt;p&gt;また、Advanced Custom Fieldsを使っているということはテーマも特注でしょう。&lt;/p&gt;

&lt;p&gt;というわけでリプレースを提案しました。
快く受け入れてくれた社員の方々には本当に感謝しています。&lt;/p&gt;

&lt;h2 id=&#34;なぜhugoなのか:5f9546be55588508513a850a19b4c520&#34;&gt;なぜHugoなのか&lt;/h2&gt;

&lt;p&gt;やはりMarkdownは優秀だと思っていて、メディア程度の文章ならDBに突っ込むよりMarkdownでファイル管理したいなと思いました。&lt;/p&gt;

&lt;p&gt;というわけでライターさんには無理を言ってMarkdownを覚えてもらいました。
これも快く受け入れてくれたライターさんの度量の広さに感謝しています。&lt;/p&gt;

&lt;p&gt;正直僕はハナから静的サイトジェネレータを使う気でいて、候補に考えていたのはJekyllとHugoでした。
何故かと言うと、Jekyllはドキュメント量が期待できると思っていたし、Hugoはそもそも使い慣れてる点を評価したからです。&lt;/p&gt;

&lt;p&gt;しかしJekyllは使いませんでした。Octopressをやめた時同様、生成が遅すぎたんです。
約500超の記事生成に18秒ほどかかり、チューニングなどを検討するよりもやめたほうが早いと判断しました。&lt;/p&gt;

&lt;p&gt;というわけで案外さっくりとHugoに行き着くことになったわけです。&lt;/p&gt;

&lt;h2 id=&#34;運用体制のこと:5f9546be55588508513a850a19b4c520&#34;&gt;運用体制のこと&lt;/h2&gt;

&lt;p&gt;静的サイトジェネレータを使うということは何かしらの方法でMarkdownを取り込み、生成したHTMLをアップロードしなければなりません。&lt;/p&gt;

&lt;p&gt;とはいえ管理画面だとかを作ってMarkdownを吐き出させるのは無駄なコストにしか思えないし、
素直にMarkdownが書けてそのままHugoを動かす環境に取り込める仕組みを考える必要がありました。&lt;/p&gt;

&lt;p&gt;なるだけコードを書きたくなかったのです。&lt;/p&gt;

&lt;p&gt;僕の開発部ではBitBucketのプライベートレポジトリを活用しています。&lt;/p&gt;

&lt;p&gt;GitHubも同様で、SCMのホスティングサービスではGUIで直接ファイルをいじる機能があります。
実際これを使ったことはあまりないのですが、今回はこの機能に管理画面の代替品になってもらうことにしました。&lt;/p&gt;

&lt;p&gt;なのでライターさんはWordPressの管理画面を捨て、BitBucketを管理画面として使うことになるわけです。&lt;/p&gt;

&lt;p&gt;実際これでだいたいの運用は回っています。ですが1つだけ想定していなかったポイントがありました。&lt;/p&gt;

&lt;p&gt;それは&lt;strong&gt;画像のアップロードが出来ない&lt;/strong&gt;ことです。
記事に使いたい画像をGUIからアップすることが出来なかったのです。&lt;/p&gt;

&lt;p&gt;幸いこの問題は、デザイナさんがGitに慣れていたこともあり、SourceTreeから画像をアップしてくれることになりました。&lt;/p&gt;

&lt;p&gt;つくづく社員の方に恵まれていると思います。&lt;/p&gt;

&lt;h2 id=&#34;移行するためにやったこと:5f9546be55588508513a850a19b4c520&#34;&gt;移行するためにやったこと&lt;/h2&gt;

&lt;p&gt;では僕が大きく時間を割いたポイントをお話します。&lt;/p&gt;

&lt;p&gt;それは次の2点です。&lt;/p&gt;

&lt;h3 id=&#34;wordpressからのエクスポート:5f9546be55588508513a850a19b4c520&#34;&gt;WordPressからのエクスポート&lt;/h3&gt;

&lt;p&gt;既存記事をMarkdownとして取り出す必要がありました。
これはいろいろなツールを検討したのですが、結局最終的にはスクレイピングして力技で取得しました。&lt;/p&gt;

&lt;p&gt;Pythonで抽出を行ったのですが、使い捨てプログラムということで適当に書きすぎたこともあり、500記事の抽出に数分かかるような有様になりました。&lt;/p&gt;

&lt;p&gt;ちなみにHugo用の移行ツールも何種類かあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tools/#migration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Hugo - Tools&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;テーマの作成:5f9546be55588508513a850a19b4c520&#34;&gt;テーマの作成&lt;/h3&gt;

&lt;p&gt;Markdownが生成出来てしまえばあとはHugoのルールに乗っかるだけなので、サイトが形作られるのはあっというまでした。&lt;/p&gt;

&lt;p&gt;とはいえGolangのテンプレートの仕様に慣れがなかったため、初めは想定した動作をしてもらえずイライラする場面も多かったです。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの強み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの強み&lt;/h2&gt;

&lt;p&gt;僕が感じた強みはシンプルさでした。&lt;/p&gt;

&lt;p&gt;UNIX哲学にこんな言葉があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;全てのプログラムはフィルタとして振る舞うようにせよ。&lt;br /&gt;
Make every program a Filter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;UNIX哲学 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おそらくこれに該当するもっともな例はシェルだと思うのですが、実はHugoもまさにこれを体現しているようなもので、Markdownを一定のルールに従ってテーマというフィルタに通すだけのプログラムになっています。&lt;/p&gt;

&lt;p&gt;なのでそのルールさえ理解してしまえばテーマを作るのは容易で、約1週間程度でほぼ完成形につくり上げることが出来ました。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの弱み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの弱み&lt;/h2&gt;

&lt;p&gt;とはいえ静的サイトジェネレータだからこその弱みもあると思っています。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートエンジンが難しい:5f9546be55588508513a850a19b4c520&#34;&gt;テンプレートエンジンが難しい&lt;/h3&gt;

&lt;p&gt;テンプレートの書き方によってはパフォーマンスがガッツリ落ちる時があり、たかが500記事でも18秒ほどかかってしまうこともありました。&lt;/p&gt;

&lt;p&gt;これではHugoの強みである速さを活かしきれてないことになってしまいますね。&lt;/p&gt;

&lt;p&gt;結局チューニングをしたものの、やはり企業として運営しているサイトのため要求も多く、現在は7秒程度で生成する状況で落ち着きました。&lt;/p&gt;

&lt;p&gt;ゆくゆくはせめて3秒以内に抑えたいとは思っています。&lt;/p&gt;

&lt;p&gt;また、個人的にGolangのテンプレートと相性が悪いようで、その点は結構苦労しました。&lt;/p&gt;

&lt;h3 id=&#34;よく読まれている記事が抽出出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;よく読まれている記事が抽出出来ない&lt;/h3&gt;

&lt;p&gt;これはもうどうしょうもないので、GoogleAnalyticsにアクセスしてJSONを吐き出しておくスクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;HugoはJSONを読み込んで記事を生成するような構成にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;Hugo - Data Files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このデータファイルという機能は非常に優秀で、タグやカテゴリを英名 - 和名変換するためにも利用しています。簡易KVSですね。&lt;/p&gt;

&lt;h3 id=&#34;サムネイルの作成が出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;サムネイルの作成が出来ない&lt;/h3&gt;

&lt;p&gt;これもどうしょうもないので、スクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;Pythonで書けば数行で出来てしまうため、10分20分で実装出来たのはラッキーでした。&lt;/p&gt;

&lt;p&gt;これがないとPageSpeedInsightのスコアが大きく下がるため、見落とさずに対応できて良かったです。&lt;/p&gt;

&lt;h2 id=&#34;運用を始めてみて:5f9546be55588508513a850a19b4c520&#34;&gt;運用を始めてみて&lt;/h2&gt;

&lt;p&gt;僕の操作ミスでサービスダウンさせた場面は2度ほどありましたが、Hugoだから発生した問題は1つもありません。&lt;/p&gt;

&lt;p&gt;レスポンスタイムは大きく向上し、PageSpeedInsightもほぼ全ページが90点超えとなりました（これはHugo関係ないが）。&lt;/p&gt;

&lt;p&gt;しかしライターさんにMarkdownを覚えてもらったのはやはり少し気にかかっていて、Hugo特有のメタデータなどは出来る限りフォローに入るよう気をつけています。&lt;/p&gt;

&lt;p&gt;また、生成はcronで定時処理しており、その処理ログをSlackに流すようにしています。&lt;/p&gt;

&lt;p&gt;Slack側では「ERROR」という文言を含むメッセージが発せられた場合にアラートがあげられるようにしており、簡易的な監視ツールとして手軽に立ち上げられたのではないかと思っています。&lt;/p&gt;

&lt;p&gt;そして、この運用による恩恵もいくつかあります。&lt;/p&gt;

&lt;h3 id=&#34;プルリクエストが使えるようになった:5f9546be55588508513a850a19b4c520&#34;&gt;プルリクエストが使えるようになった&lt;/h3&gt;

&lt;p&gt;メディアということで大量の記事を抱えているわけですが、その個々の記事のクオリティを上げることも重要な作業です。&lt;/p&gt;

&lt;p&gt;この運用だとBitBucket上に記事データがあるため、プルリクエストをライターさんになげる運用ができるようになりました。&lt;/p&gt;

&lt;p&gt;ソーシャルコーディングならぬ、ソーシャルライティングですね。&lt;/p&gt;

&lt;h3 id=&#34;編集履歴が残るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;編集履歴が残るようになった&lt;/h3&gt;

&lt;p&gt;これはWordPressでも機能としてあるのかもしれませんが、Gitによる強力なバージョン管理が行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事ファイルがどのような変遷をたどってきたか、どの行を誰が書いたのかがわかるのは大きなメリットだと思います。&lt;/p&gt;

&lt;h3 id=&#34;記事の一括操作が出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;記事の一括操作が出来るようになった&lt;/h3&gt;

&lt;p&gt;記事データがテキストファイルで存在するため、一括置換が容易になりました。&lt;/p&gt;

&lt;p&gt;これまでもタグやカテゴリの設定しなおし等を行いたい場面があったようですが、そういった作業も人間の手を介さずに一瞬で行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事を柔軟に扱うという点では、WordPressでの運用より10歩も20歩も前進出来たように思います。&lt;/p&gt;

&lt;p&gt;データをテキストファイルで保持できているので、エンジニアとしてもプラシーボ的な安心があります。&lt;/p&gt;

&lt;h3 id=&#34;校正が自動化出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;校正が自動化出来るようになった&lt;/h3&gt;

&lt;p&gt;文章を扱うサービスということもあり、ライティングルールを定めています。&lt;/p&gt;

&lt;p&gt;とはいえ現状どうかというと、結構な割合で守られていません。
しかしこれは書き手のチェックに委ねられていたため、しかたのないことだと思います。&lt;/p&gt;

&lt;p&gt;今回はテキストファイルとしてデータがあるので、正規表現でチェック出来るような校正はシェル化出来ました。&lt;/p&gt;

&lt;p&gt;これは毎週金曜日の夕方に処理されるようになっており、アラートが上がった記事はSlackに通知されるようになっています。&lt;/p&gt;

&lt;p&gt;また、サイズの大きい画像などが格納された場合も同様で、この処理の際にアラートがあがるようにしてあります。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:5f9546be55588508513a850a19b4c520&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;というわけでWordPressから静的サイトジェネレータへの移行を会社でおこなった話を書きました。&lt;/p&gt;

&lt;p&gt;現在は非常に安定して運用が出来ており、なおかつ非常に早いスピードで改修が出来ています。&lt;/p&gt;

&lt;p&gt;WordPressでの運用に手こずっている方は、一度静的サイトジェネレータでの運用も検討してはいいのではないでしょうか。&lt;/p&gt;

&lt;p&gt;素晴らしきプロダクトである&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;と開発者である&lt;a href=&#34;http://spf13.com/&#34;&gt;Steve Francia氏&lt;/a&gt;に感謝。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo0.15でSummaryが日本語に対応するっぽい</title>
      <link>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</link>
      <pubDate>Fri, 09 Oct 2015 22:15:51 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</guid>
      <description>&lt;p&gt;会社のMacにも&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;をセットアップしてあるんだけど、テーマの編集とかの続きを家でやろうとしたら&lt;code&gt;.Summary&lt;/code&gt;が異なる挙動をしてることに気づいた。&lt;/p&gt;

&lt;p&gt;どうやらHugoのバージョンによって、日本語の解釈がうまくいったりいかなかったりするみたい。&lt;/p&gt;

&lt;p&gt;ソースを読んでたらどうやら日本語のサポートもされてるようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/823334875d396bdc15770c335c2029a01a7ef2ce/hugolib/page.go&#34;&gt;hugo/page.go at 823334875d396bdc15770c335c2029a01a7ef2ce · spf13/hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;随分追ってみたんだけど&lt;code&gt;Metadata&lt;/code&gt;が何を返すのかよくわからず、コミットを見てたらCJKうんたらが追加されたのは最近っぽいことがわかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/commit/823334875d396bdc15770c335c2029a01a7ef2ce?diff=split&#34;&gt;WordCount and Summary support CJK Language · spf13/hugo@8233348&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PRのコメントを読んでみると、configになんか書けばなんとかなりそうな雰囲気。&lt;/p&gt;

&lt;p&gt;でもなんで会社のMacは期待した挙動をしてるんだ？&lt;/p&gt;

&lt;p&gt;Goのバージョンが新しいから？&lt;/p&gt;

&lt;p&gt;今のHugoなら&lt;code&gt;config.yaml&lt;/code&gt;にこう書けば日本語もきちんと処理をするようになってた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;HasCJKLanguage: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これできちんと70文字？70word？でSummaryが生成されるようになる。&lt;/p&gt;

&lt;p&gt;静的サイトジェネレータも実行環境によって挙動が変わることがあると少し面倒だなあ。&lt;/p&gt;

&lt;p&gt;Golangは他人の書いたソースが読みやすくて良い。&lt;/p&gt;

&lt;p&gt;書くのはあんまりすきじゃないけど。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search Consoleから被リンクを辿ってたら以下の記事にたどり着いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deprode.net/log/logs/2015-11-05/&#34;&gt;2015 11 05 - log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ブログのauthor様が仰るとおり、僕のHugoの環境はStableじゃなくてDevです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15-DEV&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;僕のブログのせいで戸惑わせてしまい、大変失礼しました。&lt;/p&gt;

&lt;p&gt;このことに伴い、記事のタイトルを&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HugoのSummaryが日本語に対応した&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;から&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo0.15でSummaryが日本語に対応するっぽい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;に変更しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo向けの新しいテーマを作った</title>
      <link>http://yet.unresolved.xyz/blog/2015/06/20/making-new-theme-robust-for-hugo/</link>
      <pubDate>Sat, 20 Jun 2015 11:30:06 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/06/20/making-new-theme-robust-for-hugo/</guid>
      <description>

&lt;p&gt;前に作ったやつが飽きてしまったので、そもそもForkするんじゃなくて0から作ることにしました。&lt;/p&gt;

&lt;h2 id=&#34;出来たもの:b3f0c0f315f1fbc2ee8323461148b3d4&#34;&gt;出来たもの&lt;/h2&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/hugo_theme_robust&#34;&gt;dim0627/hugo_theme_robust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-06-20/theme_tn.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-06-20/theme_tn.png&#34; class=&#34;image&#34; alt=&#34;theme_tn&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;トップの最新4記事は2カラム、それ以降は4カラムで表示するようにしてる。&lt;/p&gt;

&lt;p&gt;前はPost一覧とかの画面もあったけど、そもそも必要無いような気がして色々削った。
なので今回はシンプルにトップ、記事詳細、タグ別記事一覧の3ページだけ。&lt;/p&gt;

&lt;p&gt;トップとタグ別記事一覧は同じテンプレートを使ってるから、少し冗長になってしまった気はする。
Hugoのテンプレート構成が今だによくわかってないから、共通化とかがうまく出来ない・・・。&lt;/p&gt;

&lt;h2 id=&#34;工夫したこと:b3f0c0f315f1fbc2ee8323461148b3d4&#34;&gt;工夫したこと&lt;/h2&gt;

&lt;p&gt;前にテーマを作って思ったんだけど、Hugoの強みは各テーマをOverride出来ることだと思ってます。
だからそれ前提で書かないと、Overrideしたいのは一部でも、ファイルまるごとコピるはめになっちゃう。&lt;/p&gt;

&lt;p&gt;前はそれでもう何がなんだかわからなくなったので、今回はそれを避けようとした。&lt;/p&gt;

&lt;p&gt;何をしたかというと、空っぽのテンプレートファイルを最初からいろいろな場所に設置しておくことにした。
Overrideしたい人はこのファイルを各自のディレクトリにコピーして編集すればいいし、Overrideしない人はほっとけば影響もない。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:b3f0c0f315f1fbc2ee8323461148b3d4&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;数時間でざーっと作ったので、最後のほうはCSSもぶれまくったのは反省。
あとReadmeとかいろいろ書けてない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;spf13/hugoThemes&lt;/a&gt;にプルリクも送らねば・・・。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoでマルチバイトのタイトルをうまいこと使う</title>
      <link>http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/</link>
      <pubDate>Wed, 07 Jan 2015 23:56:32 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;でちょっと困ったこと。&lt;/p&gt;

&lt;p&gt;僕は&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;から移行してきたからなおさらなんだけど、記事のタイトルがURLにされてしまう。&lt;/p&gt;

&lt;p&gt;あ、僕は&lt;code&gt;config.yaml&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permalinks:
  post: /blog/:year/:month/:day/:title/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を設定してるからなんだけど。&lt;/p&gt;

&lt;p&gt;そうすると日本語とかのマルチバイト文字を使うとパーセントエンコードが走って結構悲惨なことになる。
というか僕の環境だとリンクがきちんと飛べなかった・・・。&lt;/p&gt;

&lt;p&gt;Octopressは記事のファイル名がURLになってたから、ファイル名さえ英語なら問題なかったんだよね。&lt;/p&gt;

&lt;p&gt;なので今回やった対処法をメモっとく。&lt;/p&gt;

&lt;h2 id=&#34;urlの構成と対応策:305b326c361986ca7e3bc18a2fbce87d&#34;&gt;URLの構成と対応策&lt;/h2&gt;

&lt;p&gt;Hugoはリンク構造も結構柔軟に変えられるっぽい。&lt;/p&gt;

&lt;p&gt;なのでこんな風に記事内で毎回指定してしまえば綺麗に話が済む。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
tags: [&amp;quot;hugo&amp;quot;, &amp;quot;golang&amp;quot;]
date: 2015-01-07T23:56:32+09:00
slug: &amp;quot;how-to-use-multibyte-title-in-hugo&amp;quot;
title: &amp;quot;Hugoでマルチバイトのタイトルをスマートに使う方法&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.yaml&lt;/code&gt;はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permalinks:
  post: /blog/:year/:month/:day/:slug/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なのでOctopressから移行した人はこの方法も検討するといいかもしれないですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt;した時に生成されるテンプレートは&lt;code&gt;archetypes&lt;/code&gt;ディレクトリに配置出来るから、そこでやっておくとよし。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログをOctopressからHugoに移行した</title>
      <link>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;でのブログもずいぶん慣れてきたところで&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に移行しました。&lt;/p&gt;

&lt;p&gt;一晩徹夜して、カスタマイズからGitHub Pagesでの公開までいけたのでいろいろまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;なぜ移行:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;なぜ移行？&lt;/h2&gt;

&lt;p&gt;ずっとテーマのカスタマイズをしたいと思ってたんだけど、Octopressのテーマの構成がいつまでたっても理解出来なかったのが一番の理由。
テーマというか、テンプレートの構成かな・・・。&lt;/p&gt;

&lt;p&gt;Google Adsenseとかも導入したんだけど、そんな些細な修正ですらちょっと辛い感じになってしまってたので、いっそ土台ごと変えることに。&lt;/p&gt;

&lt;h2 id=&#34;hugoに移行するメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;Hugoに移行するメリット&lt;/h2&gt;

&lt;p&gt;せっかくだし移行してみてよかったことをまとめてみます。&lt;/p&gt;

&lt;h3 id=&#34;速い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;速い&lt;/h3&gt;

&lt;p&gt;何をするにも動作がめちゃくちゃ速い。&lt;/p&gt;

&lt;p&gt;記事数がそんなに多くないからOctopressでも不満はなかったんだけど、今考えればとてつもない遅さだったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはほんとに一瞬で記事を生成するし、サーバの起動も一瞬なのでライブリロードがいらないくらい。使ってるけど。&lt;/p&gt;

&lt;h3 id=&#34;構造がシンプル:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;構造がシンプル&lt;/h3&gt;

&lt;p&gt;トップページ、記事一覧、記事個別のページ、って感じで綺麗に区分けがされてる。
ルールがすごく綺麗に作られてるから、テーマの理解も楽だし、カスタマイズもしやすいなと思った。&lt;/p&gt;

&lt;p&gt;あと、カテゴリとかタグみたいに、記事間を横断的に集計したい場合もすごく簡単に出来る。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/taxonomies/overview/&#34;&gt;Taxonomy Overview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;無駄な物がない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;無駄な物がない&lt;/h3&gt;

&lt;p&gt;Hugoは&lt;code&gt;new&lt;/code&gt;で作った時に基礎になるテンプレートがないくらい、標準装備が少ない。&lt;/p&gt;

&lt;p&gt;まあそれじゃテスト実行さえ出来ないからどうなんだっていう人もいると思うけど。
僕は結構0から作りたい方なので、これくらいすっきりさせてくれてたほうが嬉しかった。&lt;/p&gt;

&lt;h2 id=&#34;移行によるデメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行によるデメリット&lt;/h2&gt;

&lt;p&gt;とはいえ全てがよかったわけではなくて、途中で何度か引き返そうと思う場面もあったので、そこも書いとく。&lt;/p&gt;

&lt;h3 id=&#34;自分でやらなきゃいけないことが多い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;自分でやらなきゃいけないことが多い&lt;/h3&gt;

&lt;p&gt;やっぱりOctopressはRakeタスクでかなり囲い込みが出来てたなあと思う。&lt;/p&gt;

&lt;p&gt;OctopressをGitHub Pagesで公開する場合、masterとsourceブランチが作成されるんだけど、あれは運用面でも非常に楽だった。&lt;/p&gt;

&lt;p&gt;Hugoはデプロイは一切触れずに、本当に静的な資材の生成しかしないから、その辺は自分でやらなきゃいけない。
だから初めての人には辛いところがあるかも。&lt;/p&gt;

&lt;p&gt;あ、あとDISQUSとかもテーマによってはIDを指定するだけで使えたり、自分でタグを埋め込まなきゃ使えなかったりする。
記事のカテゴリ分けとかタグ付けについても自分で設定しなきゃいけない。公式に手順はあるけど。&lt;/p&gt;

&lt;h3 id=&#34;日本語タイトルが使いづらい:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日本語タイトルが使いづらい&lt;/h3&gt;

&lt;p&gt;Octopressの時は、記事のMarkdownファイルのファイル名は英語にして、ファイル内のtitleで日本語を設定してました。&lt;/p&gt;

&lt;p&gt;Hugoはデフォルトだとファイル内のtitleで記事個別ページのURLを生成するから、マルチバイトが入るといろいろ面倒なことになっちゃった。&lt;/p&gt;

&lt;p&gt;あと、これまでのSEOをゼロにしたくないからURLは変えたくなくて、やっぱりURLでは英語のタイトルを使いたい。
これはもうどうしょうもなくて、ファイル内に英語タイトルと日本語タイトルを設定出来るようにした。&lt;/p&gt;

&lt;p&gt;ここは手作業でやったけど、多分シェルでもうまいことやれると思う。&lt;/p&gt;

&lt;h3 id=&#34;テーマが少ない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;テーマが少ない&lt;/h3&gt;

&lt;p&gt;まあこれから増えるでしょう。&lt;/p&gt;

&lt;p&gt;ブログ自体に注力せずに記事を書くことに注力したい、って人はOctopressかHexoかそもそもHatenaとかの方がいいのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;移行において:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行において&lt;/h2&gt;

&lt;p&gt;記事の移行と、なるべく移行前と移行後でブログを書く作業が変わらないように工夫した点をまとめる。&lt;/p&gt;

&lt;h3 id=&#34;日付フォーマットの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日付フォーマットの変更&lt;/h3&gt;

&lt;p&gt;Octopressと違ってHugoでは日付のフォーマットを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date: &amp;quot;2013-10-27&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにしなきゃいけないので、先人の知恵を使って置換する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/\([0-9]\+-[0-9]\+-[0-9]\+\).*$/&amp;quot;\1&amp;quot;/&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;画像タグの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;画像タグの変更&lt;/h3&gt;

&lt;p&gt;Octopressではこう書いてたけど&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[{% img /images/2015-01-01/beanstalkDockerApp.png &#39;beanstalkDockerApp&#39; &#39;beanstalkDockerApp&#39; %}](/images/2015-01-01/beanstalkDockerApp.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoでは画像タグHTMLベタにするので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{%.*img.*\/images\/\(.*\)\/\(.*\) \(.*\) .* %}/&amp;lt;img src=\&amp;quot;\/images\/\1\/\2&amp;quot; class=\&amp;quot;image\&amp;quot; alt=\&amp;quot;\3\&amp;quot;&amp;gt;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったら&lt;code&gt;alt&lt;/code&gt;がおかしくなったので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/alt=\&amp;quot;&#39;\&#39;&#39;\(.*\)&#39;\&#39;&#39;\&amp;quot;/alt=\&amp;quot;\1\&amp;quot;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedでシングルクォート置換するのってちょっと面倒なんだね。&lt;/p&gt;

&lt;h2 id=&#34;デプロイと記事作成のシェル化:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;デプロイと記事作成のシェル化&lt;/h2&gt;

&lt;p&gt;今回もGitHub Pagesで運用するけど、ブランチ構成は前と変わらず&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;source&lt;/code&gt;でやりたいので、デプロイはシェルにまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo -t flatten

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source
git subtree push --prefix=public origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;記事のファイル名も日付付与を継続したいので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

title=`echo $1 | tr &amp;quot;A-Z&amp;quot; &amp;quot;a-z&amp;quot;`
title=`echo $title | tr &amp;quot; &amp;quot; &amp;quot;-&amp;quot;`
title=`echo $title | sed &amp;quot;s/\.//g&amp;quot;`
hugo new post/&amp;quot;`date +%Y-%m-%d`-$title.markdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで。&lt;/p&gt;

&lt;p&gt;ひと段落したけどまだまだ細々といじらなきゃだろうなあ。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34;&gt;Migrating to Hugo From Octopress&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
