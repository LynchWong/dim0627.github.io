<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Unresolved</title>
    <link>https://yet.unresolved.xyz/tags/linux/</link>
    <description>Recent content in Linux on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 26 Jan 2015 14:17:29 +0900</lastBuildDate>
    <atom:link href="https://yet.unresolved.xyz/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>「ふつうのLinuxプログラミング」を読んだ</title>
      <link>https://yet.unresolved.xyz/blog/2015/01/26/ordinary-linux-programming/</link>
      <pubDate>Mon, 26 Jan 2015 14:17:29 +0900</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2015/01/26/ordinary-linux-programming/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4797328355/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797328355&amp;linkCode=as2&amp;tag=unresolved-22&#34;&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;読もうと思ったきっかけ:4c81d64344bd445def23c23666be1353&#34;&gt;読もうと思ったきっかけ&lt;/h2&gt;

&lt;p&gt;Ruby書かないくせにるびまのインタビューの奴が好きで、著者である青木さんの記事を見てた時に知った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://magazine.rubyist.net/?0017-Hotlinks#l7&#34;&gt;Rubyist Magazine - Rubyist Hotlinks 【第 17 回】 青木峰郎さん&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kernelとかいつかは触れたいけど実際どこから入ればいいかわからない、って人、結構いると思うんだよね。&lt;/p&gt;

&lt;p&gt;僕もその一人で、この本はなんか、その入り口になるんじゃないかなって期待があった。実際評判も良かったし。&lt;/p&gt;

&lt;h2 id=&#34;前提:4c81d64344bd445def23c23666be1353&#34;&gt;前提&lt;/h2&gt;

&lt;p&gt;C言語、書けないんですよね。高校の頃に書いたっきり、1行も書いてない。&lt;/p&gt;

&lt;p&gt;他人のコードを読む場面もなかったわけじゃないけど、ほぼ初心者としてこの本を読みました。
プロトタイプ宣言やらヘッダファイルやらを理解してたくらいかな。&lt;/p&gt;

&lt;p&gt;ちなみに対象読者は、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;構造体とポインタくらいはわかる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;って書いてあるんだけど、「とにかくプログラミング！」な本ではないので、そこまで必要はなさそう。&lt;/p&gt;

&lt;p&gt;あ、唯一困ったのはLinkedListを使うところで出てきた&lt;code&gt;-&amp;gt;&lt;/code&gt;演算子。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.is.titech.ac.jp/compview/clang/chap11.html&#34;&gt;第 11 章 ポインタとリスト構造&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;この本に書いてあること:4c81d64344bd445def23c23666be1353&#34;&gt;この本に書いてあること&lt;/h2&gt;

&lt;p&gt;Linuxの構造と、その上でのC言語っていう2本軸がある。&lt;/p&gt;

&lt;p&gt;Linuxについては3つの概念をあげていて、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイルシステム&lt;/li&gt;
&lt;li&gt;プロセス&lt;/li&gt;
&lt;li&gt;ストリーム&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これをベースに、Linuxが動いてる仕組みを歴史とか思想をまじえて説明がされてる。&lt;/p&gt;

&lt;p&gt;それらをC言語で扱う上での作法とか、注意点とか、プログラムを書く上での話に繋がっていくんだけど、
APIの紹介だけじゃなくて、「これはこういう理由で使ってはいけません」って話があるのはすごく良かった。&lt;/p&gt;

&lt;p&gt;実際に何か作るときって、大抵どの界隈でも暗黙の了解とかルールがあると思っていて、
そういうのをきちんとした文献で知ることが出来るのは入門者にとってはありがたい事だと思う。&lt;/p&gt;

&lt;h2 id=&#34;この本を読んで得られたもの:4c81d64344bd445def23c23666be1353&#34;&gt;この本を読んで得られたもの&lt;/h2&gt;

&lt;p&gt;まとめは最後に書くとして、読んでる中で納得したところとか課題が解決した点を章立てにしてみる。&lt;/p&gt;

&lt;h3 id=&#34;linuxの構造について:4c81d64344bd445def23c23666be1353&#34;&gt;Linuxの構造について&lt;/h3&gt;

&lt;p&gt;本書では一貫して前述した3つの概念をベースに説明しているから、思考がブレずに読みやすい。&lt;/p&gt;

&lt;p&gt;また、Linux上でのC言語プログラミング、っていうだけじゃなくて、FHSとか、CPUとメモリについてまでも言及されてる。&lt;/p&gt;

&lt;p&gt;Linuxのディレクトリ構成みたいになんとなく理解しちゃうところが説明されてるのは嬉しい。&lt;/p&gt;

&lt;h3 id=&#34;linuxでc言語を書くためのノウハウ:4c81d64344bd445def23c23666be1353&#34;&gt;LinuxでC言語を書くためのノウハウ&lt;/h3&gt;

&lt;p&gt;言語本ではないからC言語がどうのこうのっていう話はそこまで書いてない。&lt;/p&gt;

&lt;p&gt;ただ、API仕様についてはしっかり書いてあるから、実際にプログラムを書くときにまた読み直したいと思った。&lt;/p&gt;

&lt;p&gt;あと、プログラムを書くだけじゃなくてその周辺技術(manやgdb)についても述べていて、
どういうタイミングでどういう風に使ったらいいか、っていうノウハウが得られた。&lt;/p&gt;

&lt;h3 id=&#34;プロセスとは何か:4c81d64344bd445def23c23666be1353&#34;&gt;プロセスとは何か&lt;/h3&gt;

&lt;p&gt;プロセスについてはハードウェアと合わせて1つ章が切られていて、結構細かく説明されてる。&lt;/p&gt;

&lt;p&gt;個人的にそうなんだって思ったのは、マルチタスクを実現する上でのCPUとメモリの扱いについて。
仮想CPU(初めて聞いた)と仮想メモリの概念とどうやって実現してるかについてはなるほどなと思った。&lt;/p&gt;

&lt;p&gt;物理アドレスと論理アドレスっていう物自体は知っていたけど、必要性とかそういう観点で説明されているから理解しやすい。&lt;/p&gt;

&lt;h3 id=&#34;ビルド周りの話:4c81d64344bd445def23c23666be1353&#34;&gt;ビルド周りの話&lt;/h3&gt;

&lt;p&gt;C言語のビルドについて、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プリプロセス&lt;/li&gt;
&lt;li&gt;コンパイル&lt;/li&gt;
&lt;li&gt;アセンブル&lt;/li&gt;
&lt;li&gt;リンク&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にわけて説明されてる。&lt;/p&gt;

&lt;p&gt;コンパイルとリンクについては知ってたけどそれ以外については知らなかったし、
リンクについてはもう少ししっかり理解したいと思ってたから、この章はその理解に役立った。&lt;/p&gt;

&lt;p&gt;スタティックリンクとダイナミックリンクの説明と、どちらを使うべきか、っていう話も載ってる。&lt;/p&gt;

&lt;h3 id=&#34;シグナルについて:4c81d64344bd445def23c23666be1353&#34;&gt;シグナルについて&lt;/h3&gt;

&lt;p&gt;プロセスを殺すとかは普段からやるけど、それをプログラム側で見た場合の話がされてる。&lt;/p&gt;

&lt;p&gt;シグナルを送信する側の実装とか、受ける上での実装とか、さらに注意点までまとめられてるのは良かった。
ちなみに関数ポインタの存在はここで初めて知った。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt;で何が起きているかとかの説明も、普段意識しないで使ってるから新鮮。&lt;/p&gt;

&lt;h3 id=&#34;ネットワーク系の話:4c81d64344bd445def23c23666be1353&#34;&gt;ネットワーク系の話&lt;/h3&gt;

&lt;p&gt;HTTPサーバを作る実演があるんだけど、ネットワークについてもネットワーク本に負けないくらい説明がされてる。&lt;/p&gt;

&lt;p&gt;TCPやDNSについても説明があって、プログラム目線で「なぜ必要なのか」っていう切り口で書いてあるから読みやすい。&lt;/p&gt;

&lt;p&gt;ネットワーク本もいくつか読んだし概念については理解してたけど、この本の方がわかりやすかった気がする・・・。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:4c81d64344bd445def23c23666be1353&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;そのうち勉強したいと思ってモヤモヤしてた部分を解決してくれる本でした。&lt;/p&gt;

&lt;p&gt;C言語のAPIについては結構がっつり書かれてて、正直読みながら理解するのは無駄だなと思って読み飛ばす部分もあった。&lt;/p&gt;

&lt;p&gt;ただ、実際にプログラムを書くときにはコマンドライン引数だとか標準入出力をしっかり扱わなきゃいけないわけで、
この本にはその点がしっかりまとめられてるので、今後も手元に置いてたまに読み直すと思う。&lt;/p&gt;

&lt;p&gt;あと、書籍案内が豊富。&lt;/p&gt;

&lt;p&gt;分野に分けておすすめの本を紹介されてるので、これは今後読んでいく予定。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4797328355/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797328355&amp;linkCode=as2&amp;tag=unresolved-22&#34;&gt;ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant &#43; CentOS &#43; PostgreSQLを最速で構築</title>
      <link>https://yet.unresolved.xyz/blog/2015/01/22/install-postgresql-on-centos/</link>
      <pubDate>Thu, 22 Jan 2015 15:37:14 +0900</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2015/01/22/install-postgresql-on-centos/</guid>
      <description>

&lt;p&gt;herokuにのっけるアプリを作るとき、ローカルではSQLite使ってたんだけどもう色々つらい。&lt;/p&gt;

&lt;p&gt;なんか整数で定義したカラムに文字列入るし。なんかオートインクリメントの設定の仕方がPostgreSQLと違うし。&lt;/p&gt;

&lt;p&gt;なのでもう、さっとPostgreSQLだけ入った仮想環境を作ってホスト側から繋げるようにしたい。&lt;/p&gt;

&lt;h2 id=&#34;vagrantfileの設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;Vagrantfileの設定&lt;/h2&gt;

&lt;p&gt;もう面倒なのはいやなのでCentOSとIPの設定だけやります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &amp;quot;chef/centos-6.5&amp;quot;
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresqlの導入:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;PostgreSQLの導入&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo yum install postgresql
[vagrant@localhost ~]$ sudo yum install postgresql-server
[vagrant@localhost ~]$ sudo yum install postgresql-contrib
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postgresqlの使い方がわからない:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;PostgreSQLの使い方がわからない&lt;/h2&gt;

&lt;p&gt;もうほんとPostgreSQLの使い方がわかんない、MySQLばっか触ってたからわかんない。&lt;/p&gt;

&lt;p&gt;そもそもサービス名はなんなんだろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ service postgresql
Usage: /etc/init.d/postgresql {start|stop|status|restart|condrestart|try-restart|reload|force-reload|initdb}
[vagrant@localhost ~]$ service postgresql status
postmaster is stopped
[vagrant@localhost ~]$ sudo service postgresql start

/var/lib/pgsql/data is missing. Use &amp;quot;service postgresql initdb&amp;quot; to initialize the cluster first.
                                                           [FAILED]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;postgresql&lt;/code&gt;か、でもなんか起動しないですね。&lt;/p&gt;

&lt;p&gt;なんか&lt;code&gt;initdb&lt;/code&gt;とやらで初期化をしなきゃいけないらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo -u postgres /usr/bin/initdb -D /var/lib/pgsql/data
could not change directory to &amp;quot;/home/vagrant&amp;quot;
The files belonging to this database system will be owned by user &amp;quot;postgres&amp;quot;.
This user must also own the server process.

The database cluster will be initialized with locale en_US.UTF-8.
The default database encoding has accordingly been set to UTF8.
The default text search configuration will be set to &amp;quot;english&amp;quot;.

fixing permissions on existing directory /var/lib/pgsql/data ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /var/lib/pgsql/data/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects&#39; descriptions ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling &amp;quot;trust&amp;quot; authentication for local connections
You can change this by editing pg_hba.conf or using the -A option the
next time you run initdb.

Success. You can now start the database server using:

    /usr/bin/postgres -D /var/lib/pgsql/data
or
    /usr/bin/pg_ctl -D /var/lib/pgsql/data -l logfile start
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ sudo service postgresql start
Starting postgresql service:                               [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ゲスト内で繋がるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant@localhost ~]$ psql -U postgres
psql (8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけますね。&lt;/p&gt;

&lt;p&gt;ホスト側からいけるかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql: could not connect to server: Connection refused
	Is the server running on host &amp;quot;192.168.33.10&amp;quot; and accepting
	TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけないね。&lt;/p&gt;

&lt;h2 id=&#34;接続の設定:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;接続の設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/postgresql.conf&lt;/code&gt;のコメントアウトを外したり&lt;code&gt;*&lt;/code&gt;にしたりこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen_addresses = &#39;*&#39;          # what IP address(es) to listen on;
                                        # comma-separated list of addresses;
                                        # defaults to &#39;localhost&#39;, &#39;*&#39; = all
                                        # (change requires restart)
port = 5432                             # (change requires restart)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/var/lib/pgsql/data/pg_hba.conf&lt;/code&gt;にこれを追加する感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host    all         all         0.0.0.0/0             trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけるかな？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Develop/clj_rss$ psql -h 192.168.33.10 -U postgres
psql (9.3.5, server 8.4.20)
Type &amp;quot;help&amp;quot; for help.

postgres=# \q
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いけますね。&lt;/p&gt;

&lt;p&gt;そのうちshellにまとめてprovisioning出来るようにしよう・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:0c4c654ebb9e6ebcd35111a51a896918&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://iwa4.hatenablog.com/entry/2014/05/30/190000&#34;&gt;Vagrant で Windows に Postgres on CentOS 環境を構築 - 弘法にも筆の誤り&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.dbonline.jp/postgresql/connect/index2.html&#34;&gt;PostgreSQLへの接続 - PostgreSQLへの接続と切断 - PostgreSQLの使い方&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UbuntuにAurigaを構築してみる</title>
      <link>https://yet.unresolved.xyz/blog/2014/10/19/build-auriga-server-on-ubuntu/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2014/10/19/build-auriga-server-on-ubuntu/</guid>
      <description>

&lt;p&gt;今更だがAurigaの構築をやってみる。
どこもWindows環境での構築方法しか載ってないような印象なんだけどそんなことないのかな。&lt;/p&gt;

&lt;h2 id=&#34;ソースのダウンロード:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;ソースのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://auriga.moe.hm/Auriga/&#34;&gt;Auriga Project&lt;/a&gt;からソースを落とす。&lt;/p&gt;

&lt;p&gt;言うまでもないけどバージョン番号は最新とかで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget -O auriga.zip http://auriga.moe.hm/Auriga/snapshotmanager.php?num=1221
$ unzip auriga.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイル:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;コンパイル&lt;/h2&gt;

&lt;p&gt;なんか事前の設定とか必要なんだろうけど何も考えずにコンパイルしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd Auriga-1221full
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、エラーした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;../common/grfio.c:87:20: fatal error: zlib.h: No such file or directory
   #include &amp;lt;zlib.h&amp;gt;
                    ^
compilation terminated.
make[1]: *** [../common/grfio.o] Error 1
make[1]: Leaving directory `/home/daisuketsuji/Downloads/Auriga-1221Full/src/map&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zlibがないらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install zlib1g
$ sudo apt-get install zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通った。&lt;/p&gt;

&lt;h2 id=&#34;grfファイルの準備:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;grfファイルの準備&lt;/h2&gt;

&lt;p&gt;grfファイルを用意しなきゃいけなかったらしい。
コンパイル前にすることはなかったな。Winならあるのかもね。&lt;/p&gt;

&lt;p&gt;とりあえずgrfファイルはクライアント側にあるので、公式の&lt;a href=&#34;http://ragnarokonline.gungho.jp/beginner/download.html&#34;&gt;クライアントダウンロード&lt;/a&gt;からダウンロード &amp;amp; インストール。
Ubuntuじゃインストール出来ないから、Windowsでインストールして持ってくんのだるかった・・・。
持ってきたら&lt;code&gt;conf/grf-files.txt&lt;/code&gt;に追記。&lt;/p&gt;

&lt;p&gt;Aurigaと同じフォルダに入れたのでこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grf: ./data.grf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要な行はコメントアウトで。&lt;/p&gt;

&lt;h2 id=&#34;サーバ起動:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;サーバ起動&lt;/h2&gt;

&lt;p&gt;Linuxの場合起動は&lt;code&gt;auriga-start&lt;/code&gt;を使うみたい。
解凍直後は実行権限がないので&lt;code&gt;sudo chmod 744 auriga-start&lt;/code&gt;をしとく必要あり。&lt;/p&gt;

&lt;p&gt;で、&lt;code&gt;./auriga-start start&lt;/code&gt;で起動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chrif: connection to the char server was closed. kick all chars
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてエラー。ここで一日詰まった。ログをよく見てみるとこんな感じの出力が。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;connect login server error : 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロセスを見てみるとloginサーバが生きててcharサーバが死んでるので、charサーバがloginサーバにつなげずに落ちてるんだろう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;log/&lt;/code&gt;に出力されるログを見ているとどうやらアカウントの設定が必要らしい。&lt;/p&gt;

&lt;p&gt;サーバを一度起動すると、エラーしようがなんだろうが&lt;code&gt;save/&lt;/code&gt;以下にセーブデータが作成されるので、そいつを編集する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save/account.txt&lt;/code&gt;に以下を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;0 s1 p1 - S 0 0 @
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに詰まったのは、ここに追記するフォーマットが全然わからなかったから。
tsvになってるみたいなので、タブ区切りで追加しないと読み込まれません。&lt;/p&gt;

&lt;h2 id=&#34;httpdに接続してみる:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;httpdに接続してみる&lt;/h2&gt;

&lt;p&gt;サーバが起動してる時は&lt;code&gt;http://127.0.0.1:6900/&lt;/code&gt;にアカウント登録用の画面が公開される。&lt;/p&gt;

&lt;p&gt;はずなのに表示出来ない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;parse_login : session #5 292 0x4547
parse_login: unknown packet 0x4547 disconnect session #5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結構詰まったんだけど、原因究明の鍵は&lt;code&gt;src/login/login_httpd.c:L38&lt;/code&gt;の以下行でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#ifndef NO_HTTPD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;makeの時にhttpdを無効にしちゃってたみたい。&lt;/p&gt;

&lt;p&gt;なので&lt;code&gt;Makefile&lt;/code&gt;の115行目にあるフラグをコメントアウトすればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;# disable httpd
CFLAGS += -DNO_HTTPD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、&lt;/p&gt;

&lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2014-10-19/httpd.png&#34; alt=&#34;httpd&#34; width=468 height=652 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;


&lt;p&gt;出来ました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
