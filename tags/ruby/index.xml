<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unresolved </title>
    <link>http://yet.unresolved.xyz/tags/ruby/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2015-01-04 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>ブログをOctopressからHugoに移行した</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</link>
          <pubDate>Sun, 04 Jan 2015 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;でのブログもずいぶん慣れてきたところで&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に移行しました。&lt;/p&gt;

&lt;p&gt;一晩徹夜して、カスタマイズからGitHub Pagesでの公開までいけたのでいろいろまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;なぜ移行:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;なぜ移行？&lt;/h2&gt;

&lt;p&gt;ずっとテーマのカスタマイズをしたいと思ってたんだけど、Octopressのテーマの構成がいつまでたっても理解出来なかったのが一番の理由。&lt;/p&gt;

&lt;p&gt;テーマというか、テンプレートの構成かな・・・。&lt;/p&gt;

&lt;p&gt;Google Adsenseとかも導入したんだけど、そんな些細な修正ですらちょっと辛い感じになってしまってたので、いっそ土台ごと変えることに。&lt;/p&gt;

&lt;h2 id=&#34;hugoに移行するメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;Hugoに移行するメリット&lt;/h2&gt;

&lt;p&gt;せっかくだし移行してみてよかったことをまとめてみます。&lt;/p&gt;

&lt;h3 id=&#34;とにかくスピーディ:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;とにかくスピーディ&lt;/h3&gt;

&lt;p&gt;何をするにも動作がめちゃくちゃ速い。&lt;/p&gt;

&lt;p&gt;記事数がそんなに多くないからOctopressでも不満はなかったんだけど、今考えればとてつもない遅さだったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはほんとに一瞬で記事を生成するし、サーバの起動も一瞬なのでライブリロードがいらないくらい。使ってるけど笑&lt;/p&gt;

&lt;p&gt;HugoはGolangで出来てるそうで、それが要因なのかはわからないけど、これまで触ってきた開発用サーバの中でも類を見ない速さで作業ができます。&lt;/p&gt;

&lt;h3 id=&#34;構造がシンプル:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;構造がシンプル&lt;/h3&gt;

&lt;p&gt;トップページ、記事一覧、記事個別のページ、って感じで綺麗に区分けがされてる。&lt;/p&gt;

&lt;p&gt;テーマがいくつかあるんだけど、どれも必要のないネストとかしてないし、そこからカスタマイズがしやすい。&lt;/p&gt;

&lt;p&gt;あと、カテゴリとかタグみたいに、記事間を横断的に集計したい場合もすごく簡単に出来る。&lt;/p&gt;

&lt;p&gt;すごく簡単すぎてどうなってるのかわからなくなることがあるけど笑&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/taxonomies/overview/&#34;&gt;Taxonomy Overview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;無駄な物がない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;無駄な物がない&lt;/h3&gt;

&lt;p&gt;Hugoは&lt;code&gt;new&lt;/code&gt;で作った時に基礎になるテンプレートがないくらい、標準装備が少ない。&lt;/p&gt;

&lt;p&gt;まあそれじゃテスト実行さえ出来ないからどうなんだっていう人もいると思うけど笑&lt;/p&gt;

&lt;p&gt;オレは結構0から作りたい方なので、これくらいすっきりさせてくれてたほうが嬉しかった。&lt;/p&gt;

&lt;h2 id=&#34;移行によるデメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行によるデメリット&lt;/h2&gt;

&lt;p&gt;とはいえ全てがよかったわけではなくて、途中で何度か引き返そうと思う場面もあったので、そこも書いとく。&lt;/p&gt;

&lt;h3 id=&#34;自分でやらなきゃいけないことが多い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;自分でやらなきゃいけないことが多い&lt;/h3&gt;

&lt;p&gt;やっぱりOctopressはRakeタスクでかなり囲い込みが出来てたなあと思う。&lt;/p&gt;

&lt;p&gt;OctopressをGitHub Pagesで公開する場合、masterとsourceブランチが作成されるんだけど、あれは運用面でも非常に楽だったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはデプロイは一切触れずに、本当に静的な資材の生成しかしないから、その辺は自分でやらなきゃいけない。&lt;/p&gt;

&lt;p&gt;だから初めての人には辛いところがあるかも。&lt;/p&gt;

&lt;p&gt;あ、あとDISQUSとかもテーマによってはIDを指定するだけで使えたり、自分でタグを埋め込まなきゃ使えなかったりする。&lt;/p&gt;

&lt;p&gt;記事のカテゴリ分けとかタグ付けについても自分で設定しなきゃいけない。公式に手順はあるけど。&lt;/p&gt;

&lt;p&gt;もちろんSNSのリンクも自分で配置。&lt;/p&gt;

&lt;h3 id=&#34;日本語タイトルが使いづらい:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日本語タイトルが使いづらい&lt;/h3&gt;

&lt;p&gt;Octopressの時は、記事のMarkdownファイルのファイル名は英語にして、ファイル内のtitleで日本語を設定してました。&lt;/p&gt;

&lt;p&gt;Hugoはファイル内のtitleで記事個別ページのURLを生成するから、マルチバイトが入るといろいろ面倒なことになっちゃった。&lt;/p&gt;

&lt;p&gt;あと、これまでのSEOをゼロにしたくないからURLは変えたくなくて、やっぱりURLでは英語のタイトルを使いたい。&lt;/p&gt;

&lt;p&gt;これはもうどうしょうもなくて、ファイル内に英語タイトルと日本語タイトルを設定出来るようにした。&lt;/p&gt;

&lt;p&gt;シェルで一括操作出来るような内容でもないので、ここは手作業。&lt;/p&gt;

&lt;h3 id=&#34;テーマが少ない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;テーマが少ない&lt;/h3&gt;

&lt;p&gt;あるものでなんとかしたい、って人には深刻かと笑&lt;/p&gt;

&lt;p&gt;ブログ自体に注力せずに記事を書くことに注力したい、って人はOctopressかHexoかそもそもHatenaとかの方がいいのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;移行において:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行において&lt;/h2&gt;

&lt;p&gt;記事の移行と、なるべく移行前と移行後でブログを書く作業が変わらないように工夫した点をまとめる。&lt;/p&gt;

&lt;h3 id=&#34;日付フォーマットの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日付フォーマットの変更&lt;/h3&gt;

&lt;p&gt;Octopressと違ってHugoでは日付のフォーマットを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date: &amp;quot;2013-10-27&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにしなきゃいけないので、先人の知恵を使って置換する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/\([0-9]\+-[0-9]\+-[0-9]\+\).*$/&amp;quot;\1&amp;quot;/&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;画像タグの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;画像タグの変更&lt;/h3&gt;

&lt;p&gt;Octopressではこう書いてたけど&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[{% img /images/2015-01-01/beanstalkDockerApp.png &#39;beanstalkDockerApp&#39; &#39;beanstalkDockerApp&#39; %}](/images/2015-01-01/beanstalkDockerApp.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoでは画像タグHTMLベタにするので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{%.*img.*\/images\/\(.*\)\/\(.*\) \(.*\) .* %}/&amp;lt;img src=\&amp;quot;\/images\/\1\/\2&amp;quot; class=\&amp;quot;image\&amp;quot; alt=\&amp;quot;\3\&amp;quot;&amp;gt;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったら&lt;code&gt;alt&lt;/code&gt;がおかしくなったので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/alt=\&amp;quot;&#39;\&#39;&#39;\(.*\)&#39;\&#39;&#39;\&amp;quot;/alt=\&amp;quot;\1\&amp;quot;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedでシングルクォート置換するのってちょっと面倒なんだね・・・。&lt;/p&gt;

&lt;h2 id=&#34;デプロイと記事作成のシェル化:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;デプロイと記事作成のシェル化&lt;/h2&gt;

&lt;p&gt;今回もGitHub Pagesで運用するけど、ブランチ構成は前と変わらず&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;source&lt;/code&gt;でやりたいので、デプロイはシェルにまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo -t flatten

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source
git subtree push --prefix=public origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;記事のファイル名も日付付与を継続したいので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

title=`echo $1 | tr &amp;quot;A-Z&amp;quot; &amp;quot;a-z&amp;quot;`
title=`echo $title | tr &amp;quot; &amp;quot; &amp;quot;-&amp;quot;`
title=`echo $title | sed &amp;quot;s/\.//g&amp;quot;`
hugo new post/&amp;quot;`date +%Y-%m-%d`-$title.markdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで。&lt;/p&gt;

&lt;p&gt;ひと段落したけどまだまだ細々といじらなきゃだろうなー。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34;&gt;Migrating to Hugo From Octopress&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Octopressのサイドバーを下部に移動する</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/22/move-sidebar-at-under-the-article/</link>
          <pubDate>Wed, 22 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/22/move-sidebar-at-under-the-article/</guid>
          <description>&lt;p&gt;デフォルトのテーマだとサイドバーの表示/非表示の切り替えが出来て、非表示にするとサイドバーは記事の下に落っこちるんだけど、&lt;/p&gt;

&lt;p&gt;常時この状態にした方がかっこいいんでないか？ということで移動させてみることに。&lt;/p&gt;

&lt;p&gt;サイドバーの非表示時に何が起きているかというと、bodyタグにclassが追加されてます。&lt;/p&gt;

&lt;p&gt;具体的な処理は&lt;code&gt;/javascripts/octopress.js&lt;/code&gt;に書いてあるよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;.toggle-sidebar&#39;).bind(&#39;click&#39;, function(e) {
  e.preventDefault();
  if ($(&#39;body&#39;).hasClass(&#39;collapse-sidebar&#39;)) {
    $(&#39;body&#39;).removeClass(&#39;collapse-sidebar&#39;);
  } else {
    $(&#39;body&#39;).addClass(&#39;collapse-sidebar&#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bodyタグが&lt;code&gt;collapse-sidebar&lt;/code&gt;クラスに属していれば、サイドバーは勝手に下に落っこちる訳だ。&lt;/p&gt;

&lt;p&gt;bodyを描画するテンプレートは&lt;code&gt;_layouts/default.html&lt;/code&gt;で、こんな記載がある。&lt;/p&gt;

&lt;p&gt;長ったらしいので少し見やすく改行してあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body
{% if page.body_id %}
    id=&amp;quot;{{ page.body_id }}&amp;quot;
{% endif %}

{% if page.sidebar == false %}
    class=&amp;quot;no-sidebar&amp;quot;
{% endif %}

{% if page.sidebar == &#39;collapse&#39; or site.sidebar == &#39;collapse&#39; %}
    class=&amp;quot;collapse-sidebar sidebar-footer&amp;quot;
{% endif %}
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sidebarが&lt;code&gt;collapse&lt;/code&gt;の場合にclassが追加されるようになってるね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sidebar-footer&lt;/code&gt;クラスもレイアウトに必要なものらしい。&lt;/p&gt;

&lt;p&gt;というわけでテンプレートを直に変えるのではなくて、&lt;code&gt;_config.yml&lt;/code&gt;に以下を追加すれば対応出来そうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;sidebar: &amp;quot;collapse&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;トグルボタンのスペースが空いてしまうので、&lt;code&gt;custom/_style.css&lt;/code&gt;に以下も追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.collapse-sidebar #content {
    margin-right: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大体思い通りになったかな。&lt;/p&gt;

&lt;p&gt;別の部分の問題だろうけど、トップページと記事ページで、少しレイアウトが崩れるのが気になる・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Octopressのテーマを作ってみる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</link>
          <pubDate>Sun, 21 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</guid>
          <description>

&lt;p&gt;元のやつもすっごいかっこよくてよかったんだけど、さすがに他の人とかぶっちゃうのはやだよね。&lt;/p&gt;

&lt;p&gt;でもオレはデザイナーじゃないから、あんまりがっつりやるのもやだよね。&lt;/p&gt;

&lt;p&gt;てことで元のclassicテーマをパクって作ろう。&lt;/p&gt;

&lt;p&gt;Octopressから移行してしまったので、スクリーンショットだけ載せとく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34; class=&#34;image&#34; alt=&#34;flatten&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーマの変え方:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの変え方&lt;/h2&gt;

&lt;p&gt;そもそも変え方すら知らない。&lt;/p&gt;

&lt;p&gt;てことで調べた。&lt;/p&gt;

&lt;p&gt;どうやらここにテーマ単位のディレクトリが配置されるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes
classic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;rake install[theme name]&lt;/code&gt;でインストール。&lt;/p&gt;

&lt;h2 id=&#34;テーマの構成:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの構成&lt;/h2&gt;

&lt;p&gt;作るにも、テーマの定義に何が必要かがわからぬ。&lt;/p&gt;

&lt;p&gt;classicの中を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic
sass   source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んん、シンプル。&lt;/p&gt;

&lt;p&gt;察するに&lt;code&gt;sass&lt;/code&gt;がスタイル系で&lt;code&gt;source&lt;/code&gt;がテンプレート系なのかな？&lt;/p&gt;

&lt;p&gt;別にページレイアウトを変えたいとか、そんなたいそうなことは考えてないので、sass内をいじるだけでよさそう。&lt;/p&gt;

&lt;p&gt;sass内はどうなってるのかな？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic/sass
_base.scss     _partials.scss base           custom         partials       plugins        screen.scss

octopress git:(source)$ ls .themes/classic/sass/custom
_colors.scss _fonts.scss  _layout.scss _styles.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;.themes/classic/sass/custom/_styles.scss&lt;/code&gt;がオーバーライド用のファイルなわけだな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// This File is imported last, and will override other styles in the cascade
// Add styles here to make changes without digging in too much
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本当はsassで書きたいけど今その技術は持ち合わせてないし、ちょっと今やるのも面倒なので普通にCSSを書こう・・・。&lt;/p&gt;

&lt;p&gt;ということで出来ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/flatten&#34;&gt;flatten&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gravatarの件が入っちゃってるから、これは後で分離しなきゃなあ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>_config.ymlに書いたdescriptionが設定されない</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/21/description-is-not-set/</link>
          <pubDate>Sun, 21 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/21/description-is-not-set/</guid>
          <description>&lt;p&gt;認識が間違ってるのか、_config.ymlに書いたdescriptionがサイトに反映されない・・・。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source/_includes/head.html&lt;/code&gt;のコードを見てみるとこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% raw %}
  {% capture description %}{% if page.description %}{{ page.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ description | strip_html | condense_spaces | truncate:150 }}&amp;quot;&amp;gt;
  {% if page.keywords %}&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;{{ page.keywords }}&amp;quot;&amp;gt;{% endif %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;page.descriptionしか見てない？&lt;/p&gt;

&lt;p&gt;同じことで悩んでる人いないのかな・・・と思ったら居た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sweetme.at/2013/08/06/how-to-set-your-octopress-description-and-keyword-meta-tags/&#34;&gt;Make the Magic Happen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やっぱり同じ認識のようだ。&lt;/p&gt;

&lt;p&gt;elseifってこう書くんだね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% raw %}
  {% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ description | strip_html | condense_spaces | truncate:150 }}&amp;quot;&amp;gt;
  {% if page.keywords %}&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;{{ page.keywords }}&amp;quot;&amp;gt;{% endif %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worked!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OctopressのサイドバーにGravatarを表示させる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/20/make-gravatar-sidebar/</link>
          <pubDate>Sat, 20 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/20/make-gravatar-sidebar/</guid>
          <description>

&lt;h2 id=&#34;octopressのサイドバーってどうなってんの:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;Octopressのサイドバーってどうなってんの？&lt;/h2&gt;

&lt;p&gt;そもそもOctopressの構成がまだよくわかってないのでそこから勉強しよう。&lt;/p&gt;

&lt;p&gt;どうやらデフォルトで準備されてるサイドバーはここに格納されているらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/asides/
delicious.html    github.html       googleplus.html   pinboard.html     recent_posts.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、自分で作りたい場合はここに格納するっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/custom/asides
about.html   twitter.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って&lt;code&gt;_config.yml&lt;/code&gt;に書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# list each of the sidebar modules you want to include, in the order you want them to appear.
# To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;
default_asides: [custom/asides/about.html, asides/recent_posts.html, custom/asides/twitter.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gravatarの情報って持って来れるの:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;Gravatarの情報って持って来れるの？&lt;/h2&gt;

&lt;p&gt;ちょっとだけ調べてみたらGravatarの画像だけ持ってくるpluginは用意されてるっぽい。&lt;/p&gt;

&lt;p&gt;でもどうせなら自己紹介のところとかも欲しいよね。&lt;/p&gt;

&lt;p&gt;で、Gravatarに&lt;a href=&#34;https://ja.gravatar.com/site/implement/&#34;&gt;開発者向け資料&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;しっかり読んでないけど、&lt;a href=&#34;https://ja.gravatar.com/site/implement/profiles/json/&#34;&gt;JSONで返せるっぽい&lt;/a&gt;からこれを使えばいいかな。&lt;/p&gt;

&lt;p&gt;ハッシュを指定する必要があるみたいなので、公式から取得しとく。&lt;/p&gt;

&lt;h2 id=&#34;作るぞ:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;作るぞ&lt;/h2&gt;

&lt;p&gt;なんか最初から&lt;code&gt;source/_include/custom/asides&lt;/code&gt;に&lt;code&gt;about.html&lt;/code&gt;ってのがあるし、これにプロフィールを書こうかな。&lt;/p&gt;

&lt;p&gt;まず取得したハッシュを&lt;code&gt;_config.yml&lt;/code&gt;に定義しちゃおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gravatar
gravatar_hash: 1e092e9f2cda827deb8623be2e846936
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;about.html&lt;/code&gt;からハッシュを参照してJSONを取得しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section id=&amp;quot;about&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;img id=&amp;quot;photo&amp;quot;&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;displayname&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;aboutme&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;currentlocation&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;urls&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;script&amp;gt;
    $(function() {
        var url = &amp;quot;https://ja.gravatar.com/{% raw %}{{ site.gravatar_hash }}{% endraw %}.json?callback=?&amp;quot;;
        $.getJSON(url)
            .done(function(data) {
                var entry = data.entry[0];
                $(&amp;quot;#photo&amp;quot;).attr(&amp;quot;src&amp;quot;, entry.photos[0].value);
                $(&amp;quot;#displayname&amp;quot;).html(entry.displayName);
                $(&amp;quot;#aboutme&amp;quot;).html(entry.aboutMe);
                // $(&amp;quot;#currentlocation&amp;quot;).html(entry.currentLocation);
                entry.urls.forEach(function(el){
                    $(&amp;quot;#urls&amp;quot;).append($(&amp;quot;&amp;lt;a href=&#39;&amp;quot; + el.value + &amp;quot;&#39;&amp;gt;&amp;quot; + el.title + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;));
                });

                $(&amp;quot;#about&amp;quot;).show();
            });
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはCSSにちょちょいとスタイルをつけるだけ。&lt;/p&gt;

&lt;p&gt;独自のスタイルは&lt;code&gt;.themes/classic/sass/custom/_styles.scss&lt;/code&gt;に書けばいいぽい。&lt;/p&gt;

&lt;p&gt;SASSとかも頃合い見て勉強しなきゃいけないかな・・・。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img#photo {
    display: block;
    margin: auto;
}

div#displayname {
    text-align: center;
    font-weight: bold;
}

div#aboutme {
}

div#currentlocation {
    text-align: center;
}

div#urls {
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず表示出来たからここまででいいや。&lt;/p&gt;

&lt;p&gt;ついでに自分用のtheme作っちゃったから、ある程度整備出来たらgithubにあげよっかな。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar/&#34;&gt;Gravatarのプロフィールを表示するOctopressのサイドバー&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
