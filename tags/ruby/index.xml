<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Unresolved</title>
    <link>https://yet.unresolved.xyz/tags/ruby/</link>
    <description>Recent content in Ruby on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Jan 2016 16:15:58 +0900</lastBuildDate>
    <atom:link href="https://yet.unresolved.xyz/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Asset Pipelineのコンパイル対象を追加する</title>
      <link>https://yet.unresolved.xyz/blog/2016/01/20/add-compile-target-of-asset-pipeline-at-rails/</link>
      <pubDate>Wed, 20 Jan 2016 16:15:58 +0900</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2016/01/20/add-compile-target-of-asset-pipeline-at-rails/</guid>
      <description>&lt;p&gt;デフォルトだと&lt;code&gt;application.css&lt;/code&gt;とかじゃないですか。
でも例えば管理画面を作ったりとかでごっそりデザインの違うページを作るときに少し困ったんです。&lt;/p&gt;

&lt;p&gt;まあ普通はそういう時、モジュールごと完全に分けるべきなのか・・・。疎結合ね・・・。&lt;/p&gt;

&lt;p&gt;解決方法はエラーに出てました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActionView::Template::Error (Asset was not declared to be precompiled in production.
Add `Rails.application.config.assets.precompile += %w( application_target.css )` to `config/initializers/assets.rb` and restart your server):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config/initializers/assets.rb&lt;/code&gt;に追記すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.assets.precompile += %w( application_target.css )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rails覚えらんないよー&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログをOctopressからHugoに移行した</title>
      <link>https://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</link>
      <pubDate>Sun, 04 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;でのブログもずいぶん慣れてきたところで&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に移行しました。&lt;/p&gt;

&lt;p&gt;一晩徹夜して、カスタマイズからGitHub Pagesでの公開までいけたのでいろいろまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;なぜ移行:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;なぜ移行？&lt;/h2&gt;

&lt;p&gt;ずっとテーマのカスタマイズをしたいと思ってたんだけど、Octopressのテーマの構成がいつまでたっても理解出来なかったのが一番の理由。
テーマというか、テンプレートの構成かな・・・。&lt;/p&gt;

&lt;p&gt;Google Adsenseとかも導入したんだけど、そんな些細な修正ですらちょっと辛い感じになってしまってたので、いっそ土台ごと変えることに。&lt;/p&gt;

&lt;h2 id=&#34;hugoに移行するメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;Hugoに移行するメリット&lt;/h2&gt;

&lt;p&gt;せっかくだし移行してみてよかったことをまとめてみます。&lt;/p&gt;

&lt;h3 id=&#34;速い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;速い&lt;/h3&gt;

&lt;p&gt;何をするにも動作がめちゃくちゃ速い。&lt;/p&gt;

&lt;p&gt;記事数がそんなに多くないからOctopressでも不満はなかったんだけど、今考えればとてつもない遅さだったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはほんとに一瞬で記事を生成するし、サーバの起動も一瞬なのでライブリロードがいらないくらい。使ってるけど。&lt;/p&gt;

&lt;h3 id=&#34;構造がシンプル:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;構造がシンプル&lt;/h3&gt;

&lt;p&gt;トップページ、記事一覧、記事個別のページ、って感じで綺麗に区分けがされてる。
ルールがすごく綺麗に作られてるから、テーマの理解も楽だし、カスタマイズもしやすいなと思った。&lt;/p&gt;

&lt;p&gt;あと、カテゴリとかタグみたいに、記事間を横断的に集計したい場合もすごく簡単に出来る。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/taxonomies/overview/&#34;&gt;Taxonomy Overview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;無駄な物がない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;無駄な物がない&lt;/h3&gt;

&lt;p&gt;Hugoは&lt;code&gt;new&lt;/code&gt;で作った時に基礎になるテンプレートがないくらい、標準装備が少ない。&lt;/p&gt;

&lt;p&gt;まあそれじゃテスト実行さえ出来ないからどうなんだっていう人もいると思うけど。
僕は結構0から作りたい方なので、これくらいすっきりさせてくれてたほうが嬉しかった。&lt;/p&gt;

&lt;h2 id=&#34;移行によるデメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行によるデメリット&lt;/h2&gt;

&lt;p&gt;とはいえ全てがよかったわけではなくて、途中で何度か引き返そうと思う場面もあったので、そこも書いとく。&lt;/p&gt;

&lt;h3 id=&#34;自分でやらなきゃいけないことが多い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;自分でやらなきゃいけないことが多い&lt;/h3&gt;

&lt;p&gt;やっぱりOctopressはRakeタスクでかなり囲い込みが出来てたなあと思う。&lt;/p&gt;

&lt;p&gt;OctopressをGitHub Pagesで公開する場合、masterとsourceブランチが作成されるんだけど、あれは運用面でも非常に楽だった。&lt;/p&gt;

&lt;p&gt;Hugoはデプロイは一切触れずに、本当に静的な資材の生成しかしないから、その辺は自分でやらなきゃいけない。
だから初めての人には辛いところがあるかも。&lt;/p&gt;

&lt;p&gt;あ、あとDISQUSとかもテーマによってはIDを指定するだけで使えたり、自分でタグを埋め込まなきゃ使えなかったりする。
記事のカテゴリ分けとかタグ付けについても自分で設定しなきゃいけない。公式に手順はあるけど。&lt;/p&gt;

&lt;h3 id=&#34;日本語タイトルが使いづらい:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日本語タイトルが使いづらい&lt;/h3&gt;

&lt;p&gt;Octopressの時は、記事のMarkdownファイルのファイル名は英語にして、ファイル内のtitleで日本語を設定してました。&lt;/p&gt;

&lt;p&gt;Hugoはデフォルトだとファイル内のtitleで記事個別ページのURLを生成するから、マルチバイトが入るといろいろ面倒なことになっちゃった。&lt;/p&gt;

&lt;p&gt;あと、これまでのSEOをゼロにしたくないからURLは変えたくなくて、やっぱりURLでは英語のタイトルを使いたい。
これはもうどうしょうもなくて、ファイル内に英語タイトルと日本語タイトルを設定出来るようにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/&#34;&gt;Hugoでマルチバイトのタイトルをうまいこと使う - Unresolved&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここは手作業でやったけど、多分シェルでもうまいことやれると思う。&lt;/p&gt;

&lt;h3 id=&#34;テーマが少ない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;テーマが少ない&lt;/h3&gt;

&lt;p&gt;まあこれから増えるでしょう。&lt;/p&gt;

&lt;p&gt;ブログ自体に注力せずに記事を書くことに注力したい、って人はOctopressかHexoかそもそもHatenaとかの方がいいのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;移行において:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行において&lt;/h2&gt;

&lt;p&gt;記事の移行と、なるべく移行前と移行後でブログを書く作業が変わらないように工夫した点をまとめる。&lt;/p&gt;

&lt;h3 id=&#34;日付フォーマットの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日付フォーマットの変更&lt;/h3&gt;

&lt;p&gt;Octopressと違ってHugoでは日付のフォーマットを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date: &amp;quot;2013-10-27&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにしなきゃいけないので、先人の知恵を使って置換する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/\([0-9]\+-[0-9]\+-[0-9]\+\).*$/&amp;quot;\1&amp;quot;/&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;画像タグの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;画像タグの変更&lt;/h3&gt;

&lt;p&gt;Octopressではこう書いてたけど&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[{% img /images/2015-01-01/beanstalkDockerApp.png &#39;beanstalkDockerApp&#39; &#39;beanstalkDockerApp&#39; %}](/images/2015-01-01/beanstalkDockerApp.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoでは画像タグHTMLベタにするので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{%.*img.*\/images\/\(.*\)\/\(.*\) \(.*\) .* %}/&amp;lt;img src=\&amp;quot;\/images\/\1\/\2&amp;quot; class=\&amp;quot;image\&amp;quot; alt=\&amp;quot;\3\&amp;quot;&amp;gt;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったら&lt;code&gt;alt&lt;/code&gt;がおかしくなったので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/alt=\&amp;quot;&#39;\&#39;&#39;\(.*\)&#39;\&#39;&#39;\&amp;quot;/alt=\&amp;quot;\1\&amp;quot;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedでシングルクォート置換するのってちょっと面倒なんだね。&lt;/p&gt;

&lt;h2 id=&#34;デプロイと記事作成のシェル化:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;デプロイと記事作成のシェル化&lt;/h2&gt;

&lt;p&gt;今回もGitHub Pagesで運用するけど、ブランチ構成は前と変わらず&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;source&lt;/code&gt;でやりたいので、デプロイはシェルにまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo -t flatten

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source
git subtree push --prefix=public origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;記事のファイル名も日付付与を継続したいので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

title=`echo $1 | tr &amp;quot;A-Z&amp;quot; &amp;quot;a-z&amp;quot;`
title=`echo $title | tr &amp;quot; &amp;quot; &amp;quot;-&amp;quot;`
title=`echo $title | sed &amp;quot;s/\.//g&amp;quot;`
hugo new post/&amp;quot;`date +%Y-%m-%d`-$title.markdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで。
ひと段落したけどまだまだ細々といじらなきゃだろうなあ。&lt;/p&gt;

&lt;h3 id=&#34;追記:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;追記&lt;/h3&gt;

&lt;p&gt;サブツリーの運用がだるくなったので泥臭い感じに変えました。
というかなんか回を重ねるごとに遅くなった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source&lt;/code&gt;ブランチは生成元のソースを置いて、&lt;code&gt;public&lt;/code&gt;ディレクトリを&lt;code&gt;.gitignore&lt;/code&gt;に追加。
&lt;code&gt;master&lt;/code&gt;ブランチは生成後のHTMLを置くだけ。&lt;/p&gt;

&lt;p&gt;シェルはこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
rm -rf public/*
hugo -t $1

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;rebuilding site `date`, theme $1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source:source

# Push master sources.
cd public
git add -A
git commit -m &amp;quot;$msg&amp;quot;
git push origin master:master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最近ダサくても手軽に済むならそれでいいじゃんって考えになってきてて良くない。と思う。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34;&gt;Migrating to Hugo From Octopress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Octopressのテーマを作ってみる</title>
      <link>https://yet.unresolved.xyz/blog/2014/09/21/making-new-theme-flatten/</link>
      <pubDate>Sun, 21 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2014/09/21/making-new-theme-flatten/</guid>
      <description>

&lt;p&gt;元のやつもすっごいかっこよくてよかったんだけど、さすがに他の人とかぶっちゃうのはやだよね。
でも僕はデザイナーじゃないから、あんまりがっつりやるのもやだよね。
てことで元のclassicテーマをパクって作ろう。&lt;/p&gt;

&lt;p&gt;Octopressから移行してしまったので、スクリーンショットだけ載せとく。&lt;/p&gt;

&lt;amp-img src=&#34;https://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34; alt=&#34;flatten&#34; width=1000 height=695 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;


&lt;h2 id=&#34;テーマの変え方:04d1c6053c5be0425bfb88e610b78a00&#34;&gt;テーマの変え方&lt;/h2&gt;

&lt;p&gt;そもそも変え方もよく知らないんだけど、どうやらここにテーマ単位のディレクトリが配置されるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes
classic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;rake install[theme name]&lt;/code&gt;でインストール。&lt;/p&gt;

&lt;h2 id=&#34;テーマの構成:04d1c6053c5be0425bfb88e610b78a00&#34;&gt;テーマの構成&lt;/h2&gt;

&lt;p&gt;作るにも、テーマの定義に何が必要かがわからない。
classicの中を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic
sass   source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;察するに&lt;code&gt;sass&lt;/code&gt;がスタイル系で&lt;code&gt;source&lt;/code&gt;がテンプレート系なのかな。
別にページレイアウトを変えたいとか、そんなたいそうなことは考えてないので、sass内をいじるだけでよさそう。&lt;/p&gt;

&lt;p&gt;ということで出来ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/flatten&#34;&gt;flatten&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gravatarの件が入っちゃってるから、これは後で分離しなきゃなあ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OctopressのサイドバーにGravatarを表示させる</title>
      <link>https://yet.unresolved.xyz/blog/2014/09/20/making-gravatar-sidebar/</link>
      <pubDate>Sat, 20 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yet.unresolved.xyz/blog/2014/09/20/making-gravatar-sidebar/</guid>
      <description>

&lt;p&gt;そもそもOctopressの構成がまだよくわかってないのでそこから勉強しよう。&lt;/p&gt;

&lt;p&gt;どうやらデフォルトで準備されてるサイドバーはここに格納されているらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/asides/
delicious.html    github.html       googleplus.html   pinboard.html     recent_posts.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、自分で作りたい場合はここに格納するっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/custom/asides
about.html   twitter.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って&lt;code&gt;_config.yml&lt;/code&gt;に書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# list each of the sidebar modules you want to include, in the order you want them to appear.
# To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;
default_asides: [custom/asides/about.html, asides/recent_posts.html, custom/asides/twitter.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gravatarの情報を取得する:61eb03e5faeba6147c5a5cd44e5e95a1&#34;&gt;Gravatarの情報を取得する&lt;/h2&gt;

&lt;p&gt;ちょっとだけ調べてみたらGravatarの画像だけ持ってくるpluginは用意されてるっぽい。
でもどうせなら自己紹介のところとかも欲しいよね。&lt;/p&gt;

&lt;p&gt;Gravatarに&lt;a href=&#34;https://ja.gravatar.com/site/implement/&#34;&gt;開発者向け資料&lt;/a&gt;がありました。
しっかり読んでないけど、&lt;a href=&#34;https://ja.gravatar.com/site/implement/profiles/json/&#34;&gt;JSONで返せるっぽい&lt;/a&gt;からこれを使えばいいかな。&lt;/p&gt;

&lt;p&gt;ハッシュを指定する必要があるみたいなので、公式から取得しとく。
なんか最初から&lt;code&gt;source/_include/custom/asides&lt;/code&gt;に&lt;code&gt;about.html&lt;/code&gt;ってのがあるし、これにプロフィールを書こうかな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section id=&amp;quot;about&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;img id=&amp;quot;photo&amp;quot;&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;displayname&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;aboutme&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;currentlocation&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;urls&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;script&amp;gt;
    $(function() {
        var url = &amp;quot;https://ja.gravatar.com/{% raw %}{{ site.gravatar_hash }}{% endraw %}.json?callback=?&amp;quot;;
        $.getJSON(url)
            .done(function(data) {
                var entry = data.entry[0];
                $(&amp;quot;#photo&amp;quot;).attr(&amp;quot;src&amp;quot;, entry.photos[0].value);
                $(&amp;quot;#displayname&amp;quot;).html(entry.displayName);
                $(&amp;quot;#aboutme&amp;quot;).html(entry.aboutMe);
                // $(&amp;quot;#currentlocation&amp;quot;).html(entry.currentLocation);
                entry.urls.forEach(function(el){
                    $(&amp;quot;#urls&amp;quot;).append($(&amp;quot;&amp;lt;a href=&#39;&amp;quot; + el.value + &amp;quot;&#39;&amp;gt;&amp;quot; + el.title + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;));
                });

                $(&amp;quot;#about&amp;quot;).show();
            });
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせて頂きました:61eb03e5faeba6147c5a5cd44e5e95a1&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar/&#34;&gt;Gravatarのプロフィールを表示するOctopressのサイドバー&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
