<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ring on Unresolved</title>
    <link>http://yet.unresolved.xyz/tags/ring/</link>
    <description>Recent content in Ring on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Mar 2015 19:23:27 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/tags/ring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Clojure]ringのCSRFトークンを生成する</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</link>
      <pubDate>Sun, 22 Mar 2015 19:23:27 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</guid>
      <description>&lt;p&gt;ClojureのWebアプリは大抵ringでルーティングとかやると思うんだけど、&lt;/p&gt;

&lt;p&gt;デフォルトだとPOSTリクエストした時にCSRFトークンチェックが入るようになってると思う。&lt;/p&gt;

&lt;p&gt;で、そのトークンの作成の仕方を毎回調べてるのでメモっときたい。&lt;/p&gt;

&lt;p&gt;チェックの処理は&lt;code&gt;site-defaults&lt;/code&gt;の、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def app
  (wrap-defaults app-routes site-defaults))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:security&lt;/code&gt;のところで設定出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def site-defaults
  &amp;quot;A default configuration for a browser-accessible website, based on current
  best practice.&amp;quot;
  {:params    {:urlencoded true
               :multipart  true
               :nested     true
               :keywordize true}
   :cookies   true
   :session   {:flash true
               :cookie-attrs {:http-only true}}
   :security  {:anti-forgery   true
               :xss-protection {:enable? true, :mode :block}
               :frame-options  :sameorigin
               :content-type-options :nosniff}
   :static    {:resources &amp;quot;public&amp;quot;}
   :responses {:not-modified-responses true
               :absolute-redirects     true
               :content-types          true}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを&lt;code&gt;false&lt;/code&gt;にしちゃえばもちろんCSRFのチェックはされなくなるんだけど、まあ普通はするべきだよね。&lt;/p&gt;

&lt;p&gt;トークンの生成の仕方はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns sample.handler
  (:require [ring.util.anti-forgery :refer :all]))
(anti-forgery-field)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ring.util.anti-forgery&lt;/code&gt;の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns ring.util.anti-forgery
  &amp;quot;Utility functions for inserting anti-forgery tokens into HTML forms.&amp;quot;
  (:use [hiccup core form]
        ring.middleware.anti-forgery))

(defn anti-forgery-field
  &amp;quot;Create a hidden field with the session anti-forgery token as its value.
  This ensures that the form it&#39;s inside won&#39;t be stopped by the anti-forgery
  middleware.&amp;quot;
  []
  (html (hidden-field &amp;quot;__anti-forgery-token&amp;quot; *anti-forgery-token*)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
