---
comments: true
date: 2015-04-04T22:39:07+09:00
eyecatch: "design3.jpg"
slug: "anguish-in-the-css-and-html"
tags: ["css", "html", "frontend"]
title: "CSS / HTMLで味わった苦悩の数々を振り返ってみる"
---

CSSってアンチパターンとかベストプラクティスみたいなのをあんまり聞かないよね。

デザイナじゃないオレがフロントエンドに触れて苦しんだこととかノウハウとかをまとめてみようと思う。

## セクションを意識する

HTML5から`section`タグが出てきたね。

これはそのタグの話ではなくて、画面レイアウトを考えた上での大枠について。

オレがやって失敗だったなと思ったのは**ページの一部からHTMLを書き始めるやり方。**

これをやってしまうとページの一部分から完成していくから、全体で統制が取れなくなることが多かった。

具体的に言うと、だいたいのページはこんな感じのセクション分けになるはず。

``` html
<!doctype HTML>
<html>
  <head>
    metaタグ。
    CSSフレームワークの読み込み。
    オーバライド用のCSSファイルの読み込み。
    などなど。
  </head>
  <body>
    <header>
      ヘッダ。ロゴや一部のメニューを置く。
    </header>
    <div>
      グローバルメニュー。サイトによってはheaderで事足りる場合も。
    </div>
    <div>
      メインコンテンツ。この中でカラム分けをしたり、さらに細分化されたセクション分けをしたりする。
    </div>
    <footer>
      コピーライトを書いたりする。
      最近はサイトマップをここに置いたりすることが多いみたい。
    </footer>
    JavaScriptの読み込み
  </body>
</html>
```

個人的に好きに書いていい場面では`html`タグ、`head`、`body`タグは省略するんだけど、今回はその話は置いておきます。

[\<html\>,\<body\>は要らない？Googleが推奨するHTMLファイルの記法 - Qiita](http://qiita.com/wadako111/items/7100c02337f14df07205)

こういう風に、自分が作りたいサイトの全体像から、**各セクションの根底に来るであろうタグ**を最初に配置しておく。

こうしなかったせいで、あとで要素を追加したときにDOMの全体像が不自然な形になってしまうことがあった。

あと、無駄に要素を重ねたりするとHTMLの構造を理解するのが辛くなる。

## IDとクラスを使い分ける

CSSは本当にパフォーマンスコストがかかりづらいのだろうか？

もしそうだとしても、意識しない理由はどこにもないと思う。

[GitHub's CSS Performance // Speaker Deck](https://speakerdeck.com/jonrohan/githubs-css-performance)

正直な話をすれば、スタイルをあてたいならもうクラスを見境なしにつけてしまっても多分問題なくやっていける。

なのにID、クラスどっちにするかとかそういう不要な検討事項を増やすのはいやだよね。

でもサイトの規模によってはパフォーマンスは死活問題だし、何よりIDとクラスの違いで読みやすさが変わると思う。

さっきの例を使うと、オレはだいたいこういうIDを先に付けておく。

``` html
<body>
  <header id="header">
    ヘッダ。ロゴや一部のメニューを置く。
  </header>
  <div id="menu">
    グローバルメニュー。サイトによってはheaderで事足りる場合も。
  </div>
  <div id="body">
    メインコンテンツ。この中でカラム分けをしたり、さらに細分化されたセクション分けをしたりする。
  </div>
  <footer id="footer">
    コピーライトを書いたりする。
    最近はサイトマップをここに置いたりすることが多いみたい。
  </footer>
  JavaScriptの読み込み
</body>
```

この各セクションのルート要素は絶対にサイト内でユニークだから。

こうすることで、後から見たときに**この要素は固有なものなんだな**っていうのがわかる。

でも`header`タグの`#header`とか、`#body`や`#footer`の命名はイケてないように見えるよね。

ここの命名については個人的なものだから、意図する意味の単語をつけてもらえればいいと思う。

ただ、`header`タグや`footer`タグはサイト内でユニークなもの**ではない**ので、タグに直接スタイルをあてるのは避けるべき。

## 命名は1分考えてからつける

まあこれはCSSだけじゃなくプログラミング言語でも同じ事だけど、命名はしっかり考えたほうがいい。

例えばIDなら固有な名前にしたほうがいいし、クラスならある程度抽象的なものにしたほうがいい。

クラスに固有なものをつける場合は、それがIDにするべきでないかを検討すべき。

個人的にやめてほしいのは、**そのスタイルを体現した命名**をすること。

例えば、赤いボタンに`.red-button`とかそういうの。

これは後の章でも書くけど、もう少し抽象的でスタイルの内容を変えたときに命名と齟齬が出ないものにすべきだと思う。

Bootstrapでは、`.btn-danger`とかつけてるね。

じゃないとあとで色を変えたときにクラス名まで変える羽目になることがある。

## 抽象的な名前を付ける、固有な名前をつけない

例えば、`.title`ってクラスを考えるとする。

これはメインコンテンツのタイトルかもしれないし、サイドバーに置くパネルのタイトルかもしれない。

`.main-title`とか`.side-bar-title`とか付けてもいいんだけど、汎用的で固有な使い方が出来ればそれが一番だよね。

そういう時はこう書くのが今の段階での、自分の解。

``` html
<div id="body">
  <div class="row">
    <div class="col-md-4">
      <div id="sidebar">
        <h2 class="title">サイドバーのタイトル</h2>
      </div>
    </div>
    <div class="col-md-8">
      <div id="content">
        <h2 class="title">メインコンテンツのタイトル</h2>
      </div>
    </div>
  </div>
</div>
```

``` css
.title {
  color: #ddd;
}

#sidebar .title {
  font-size: 2rem;
}

#content .title {
  font-size: 2.5rem;
}
```

こうしておけば、タイトル共通の定義も出来るし、個々のタイトルに対しての定義も出来る。

でも、もしかしたらサイドバーの中でも特定のタイトルだけ、スタイルを変えたい場合があるかもね。

今の書き方だと、サイドバーのタイトルを個別に変えたりするのは出来そうにない。

そういう時は、`.title`の派生を作る。

``` html
<div id="body">
  <div class="row">
    <div class="col-md-4">
      <div id="sidebar">
        <h2 class="title">サイドバーのタイトル</h2>
        <h2 class="title title-active">サイドバーのちょっと強調したいタイトル</h2>
      </div>
    </div>
    <div class="col-md-8">
      <div id="content">
        <h2 class="title">メインコンテンツのタイトル</h2>
      </div>
    </div>
  </div>
</div>
```

``` css
.title {
  color: #ddd;
}

#sidebar .title {
  font-size: 2rem;
}

#sidebar .title-active {
  font-weight: 900;
}

#content .title {
  font-size: 2.5rem;
}
```

こうすることで、**特定のクラスを付けたり外したりするだけでスタイルを変えることが出来る。**

`.title`自体は残しておくことで、共通の定義を生かすことも出来る。

`.title`を消さずに新たなクラスを追加してるところが大事なポイント。

極力まとめておいて、特別なスタイルを当てたい場合にだけクラスを追加していくやり方がいいと思う。

`.side-bar-title`とかにしてもいいんだけど、その名前だと同じスタイルを他の場所で使いたいときに困るよね。

それに固有な名前をつけてしまうと、固有な要素の数だけクラスが溢れることになっちゃう。

この場合は、`#sidebar`に入れなくてもいいかもしれないね。

## 無駄なネストをしない

当たり前の事。

深くすれば読みづらくなるしタグの抜け漏れとかも発生する。

タグは増やすのは楽だけど減らすのは大変。

だからサイトの運営が続くにつれてネストが深くなりがちだし、当たり前のことだけど気をつけていなきゃいけない。

## タグの用途を意識する

なんか見出しを`div`で囲んで`font-size`を指定する人をよく見る気がする。

その意図を持ったタグがあるのであればそれを使おう。

見出しなら`h`タグがあるしね。

ちなみに`h1`タグは1ページに付き、1つまで！(MUSTではないらしい)

## remとかpxとか、単位は理解した上で使う

個人的に、`font-size`は`rem`、`margin`や`padding`は`px`と決めて使ってる。

単位が混在するのは統一感がなくなるし、小さな差異が発生するからある程度ルールを決めて書くのがいいのかなと思う。

単位は色々種類があるから、見た目がそれなりだからいいやではなく理解してから使うべきだと思った。

## 不用意にfloatを使わない

もちろん必要な場面はあるんだけど、`float`はあんまり気軽に使うと変なところに影響が出たりする。

`clearfix`とかも考えながら使える人ならいいけど、そうでないならまず本当に`float`が必要なのかを検討すべき。

ちなみにBootstrapを使っているなら、`.pull-left`や`.pull-right`っていうhelperクラスが用意されてる。

## 不用意にdisplayをいじらない

`display`は各タグにしっかり設定されているものだから、`display`を変更する前にタグ選びから見直したほうがいい。

もちろん、どうしても変えなきゃいけない場面はあるんだけども。

`block`と`inline`くらいは最初に勉強しておくべきだと思った。

## CSSフレームワークを信じる

BootstrapとかSkeltonとかを使っている場合の話。

いろいろ頑張った結果なんだけど、隠蔽してくれるフレームワークがあるのであれば出来る限りそれに任せたほうがいい。

例えばレスポンシブにするならフレームワークが用意してくれてるブレークポイントに従ったほうがいいし、

そもそもレスポンシブなコンポーネントを提供してくれてるならそれを使ったほうがいい。

スタイルを変えたいならオーバライドすればいいしね。

あと、helperクラスは結構使える。

Bootstrapであれば`.text-center`とか`.cleafix`とかも便利に使えると思う。
