---
date: 2015-01-26T14:17:29+09:00
slug: "ordinary-linux-programming"
tags: ["linux"]
title: "「ふつうのLinuxプログラミング」を読んだ"
---

<a href="http://www.amazon.co.jp/gp/product/4797328355/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797328355&linkCode=as2&tag=unresolved-22">ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=unresolved-22&l=as2&o=9&a=4797328355" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; display: none;width:0;" />

## 読もうと思ったきっかけ

Ruby書かないくせにるびまのインタビューの奴が好きで、著者である青木さんの記事を見てた時に知った。

[Rubyist Magazine - Rubyist Hotlinks 【第 17 回】 青木峰郎さん](http://magazine.rubyist.net/?0017-Hotlinks#l7)

Kernelとかいつかは触れたいけど実際どこから入ればいいかわからない、って人、結構いると思うんだよね。

僕もその一人で、この本はなんか、その入り口になるんじゃないかなって期待があった。実際評判も良かったし。

## 前提

C言語、書けないんですよね。高校の頃に書いたっきり、1行も書いてない。

他人のコードを読む場面もなかったわけじゃないけど、ほぼ初心者としてこの本を読みました。
プロトタイプ宣言やらヘッダファイルやらを理解してたくらいかな。

ちなみに対象読者は、

> 構造体とポインタくらいはわかる

って書いてあるんだけど、「とにかくプログラミング！」な本ではないので、そこまで必要はなさそう。

あ、唯一困ったのはLinkedListを使うところで出てきた`->`演算子。

[第 11 章 ポインタとリスト構造](http://www.is.titech.ac.jp/compview/clang/chap11.html)

## この本に書いてあること

Linuxの構造と、その上でのC言語っていう2本軸がある。

Linuxについては3つの概念をあげていて、

* ファイルシステム
* プロセス
* ストリーム

これをベースに、Linuxが動いてる仕組みを歴史とか思想をまじえて説明がされてる。

それらをC言語で扱う上での作法とか、注意点とか、プログラムを書く上での話に繋がっていくんだけど、
APIの紹介だけじゃなくて、「これはこういう理由で使ってはいけません」って話があるのはすごく良かった。

実際に何か作るときって、大抵どの界隈でも暗黙の了解とかルールがあると思っていて、
そういうのをきちんとした文献で知ることが出来るのは入門者にとってはありがたい事だと思う。

## この本を読んで得られたもの

まとめは最後に書くとして、読んでる中で納得したところとか課題が解決した点を章立てにしてみる。

### Linuxの構造について

本書では一貫して前述した3つの概念をベースに説明しているから、思考がブレずに読みやすい。

また、Linux上でのC言語プログラミング、っていうだけじゃなくて、FHSとか、CPUとメモリについてまでも言及されてる。

Linuxのディレクトリ構成みたいになんとなく理解しちゃうところが説明されてるのは嬉しい。

### LinuxでC言語を書くためのノウハウ

言語本ではないからC言語がどうのこうのっていう話はそこまで書いてない。

ただ、API仕様についてはしっかり書いてあるから、実際にプログラムを書くときにまた読み直したいと思った。

あと、プログラムを書くだけじゃなくてその周辺技術(manやgdb)についても述べていて、
どういうタイミングでどういう風に使ったらいいか、っていうノウハウが得られた。

### プロセスとは何か

プロセスについてはハードウェアと合わせて1つ章が切られていて、結構細かく説明されてる。

個人的にそうなんだって思ったのは、マルチタスクを実現する上でのCPUとメモリの扱いについて。
仮想CPU(初めて聞いた)と仮想メモリの概念とどうやって実現してるかについてはなるほどなと思った。

物理アドレスと論理アドレスっていう物自体は知っていたけど、必要性とかそういう観点で説明されているから理解しやすい。

### ビルド周りの話

C言語のビルドについて、

* プリプロセス
* コンパイル
* アセンブル
* リンク

にわけて説明されてる。

コンパイルとリンクについては知ってたけどそれ以外については知らなかったし、
リンクについてはもう少ししっかり理解したいと思ってたから、この章はその理解に役立った。

スタティックリンクとダイナミックリンクの説明と、どちらを使うべきか、っていう話も載ってる。

### シグナルについて

プロセスを殺すとかは普段からやるけど、それをプログラム側で見た場合の話がされてる。

シグナルを送信する側の実装とか、受ける上での実装とか、さらに注意点までまとめられてるのは良かった。
ちなみに関数ポインタの存在はここで初めて知った。

<kbd>Ctrl</kbd> + <kbd>C</kbd>で何が起きているかとかの説明も、普段意識しないで使ってるから新鮮。

### ネットワーク系の話

HTTPサーバを作る実演があるんだけど、ネットワークについてもネットワーク本に負けないくらい説明がされてる。

TCPやDNSについても説明があって、プログラム目線で「なぜ必要なのか」っていう切り口で書いてあるから読みやすい。

ネットワーク本もいくつか読んだし概念については理解してたけど、この本の方がわかりやすかった気がする・・・。

## 終わりに

そのうち勉強したいと思ってモヤモヤしてた部分を解決してくれる本でした。

C言語のAPIについては結構がっつり書かれてて、正直読みながら理解するのは無駄だなと思って読み飛ばす部分もあった。

ただ、実際にプログラムを書くときにはコマンドライン引数だとか標準入出力をしっかり扱わなきゃいけないわけで、
この本にはその点がしっかりまとめられてるので、今後も手元に置いてたまに読み直すと思う。

あと、書籍案内が豊富。

分野に分けておすすめの本を紹介されてるので、これは今後読んでいく予定。

<a href="http://www.amazon.co.jp/gp/product/4797328355/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797328355&linkCode=as2&tag=unresolved-22">ふつうのLinuxプログラミング Linuxの仕組みから学べるgccプログラミングの王道</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=unresolved-22&l=as2&o=9&a=4797328355" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important; display: none;width:0;" />
