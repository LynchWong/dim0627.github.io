<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technologies on Unresolved</title>
    <link>http://yet.unresolved.xyz/technology/</link>
    <description>Recent content in Technologies on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Dec 2015 10:39:55 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/technology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ACCOUNT KILLERというサービスが面白い</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/17/about-account-killer/</link>
      <pubDate>Thu, 17 Dec 2015 10:39:55 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/17/about-account-killer/</guid>
      <description>

&lt;p&gt;WordPress.comとGravatarを退会しようと思ったんだけどなんか退会画面が見つからない。&lt;/p&gt;

&lt;p&gt;いろいろ調べてみるとこの記事に行き着いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20150915/1442277074&#34;&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない！？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;まじかよ、なんてひどいサービスだ。&lt;/p&gt;

&lt;p&gt;それはまあよくて、どっちにしろWordPressがひどいのは知ってたし。&lt;/p&gt;

&lt;p&gt;この記事で紹介されてるACCOUNT KILLERというサービスが面白かった。&lt;/p&gt;

&lt;h2 id=&#34;account-killer:283d2a7a74a226c22e2344c11ac9de1b&#34;&gt;ACCOUNT KILLER？&lt;/h2&gt;

&lt;p&gt;先の記事を引用させてもらうと、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここは、Webサイト／サービスをホワイトリスト（退会容易）とブラックリスト（退会困難）に分けていて、Gravatarはブラック。ブラックもブラック、なんと退会が不可能なのです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;世の中の有名なサービスの退会難易度をまとめてくれてるらしい。先にこれ見ときゃよかったなー。&lt;/p&gt;

&lt;p&gt;退会出来ないサービスなんて登録したくないよね。さすがWordPress。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:283d2a7a74a226c22e2344c11ac9de1b&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20150915/1442277074&#34;&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Googleの構造化データの扱いが変わった気がする</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/11/error-occured-in-structured-data-testing-tool/</link>
      <pubDate>Fri, 11 Dec 2015 11:22:28 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/11/error-occured-in-structured-data-testing-tool/</guid>
      <description>

&lt;p&gt;このブログも、他の運営してるサイトも、今日になってエラーが発生するようになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/testing-tool/&#34;&gt;Structured Data Testing Tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エラーは2種類発生していて、ひとつめがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-12-11/error1.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-12-11/error1.png&#34; alt=&#34;error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もうひとつがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-12-11/error2.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-12-11/error2.png&#34; alt=&#34;error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あれ？&lt;code&gt;author&lt;/code&gt;はもともと必須だっけ？&lt;/p&gt;

&lt;h2 id=&#34;構造化データ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;構造化データ？&lt;/h2&gt;

&lt;p&gt;マイクロデータとかって呼ばれたりもする。&lt;/p&gt;

&lt;p&gt;HTMLにもう少し踏み込んだ側面的な意味を持たせるためのもの。&lt;/p&gt;

&lt;p&gt;Googleの説明が、どのように使われるかも記載されていてわかりやすい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/&#34;&gt;Promote Your Content with Structured Data Markup  |  Structured Data  |  Google Developers&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;エラーの原因:1cba147eb8c5721b87c65951056c9faa&#34;&gt;エラーの原因&lt;/h2&gt;

&lt;p&gt;今回はArticleの&lt;code&gt;image&lt;/code&gt;とか&lt;code&gt;publisher&lt;/code&gt;もろもろでエラーが発生しました。&lt;/p&gt;

&lt;p&gt;これまでは大丈夫だったのになんでだろう。&lt;/p&gt;

&lt;p&gt;この記載を見ると、どうやら構造が間違っているらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/rich-snippets/articles?hl=ja&#34;&gt;Enabling Rich Snippets for Articles  |  Structured Data  |  Google Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;imageプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;imageプロパティ&lt;/h3&gt;

&lt;p&gt;これまで僕は、画像要素を次のように記載していたのだけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta itemprop=&amp;quot;image&amp;quot; content=&amp;quot;http://example.com/images/10999.jpg&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう記載するのが正しいようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div itemprop=&amp;quot;image&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/ImageObject&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;https://google.com/thumbnail1.jpg&amp;quot;/&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;url&amp;quot; content=&amp;quot;https://google.com/thumbnail1.jpg&amp;quot;&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;width&amp;quot; content=&amp;quot;800&amp;quot;&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;height&amp;quot; content=&amp;quot;800&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ImageObject&lt;/code&gt;の子で居なきゃいけないんだね。&lt;/p&gt;

&lt;p&gt;さらに&lt;code&gt;width&lt;/code&gt;と&lt;code&gt;height&lt;/code&gt;も必須になってる。
前は要らなかったような記憶があるんだけど・・・。&lt;/p&gt;

&lt;h3 id=&#34;publisherプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;publisherプロパティ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;publisher&lt;/code&gt;はこう記載されている。&lt;/p&gt;

&lt;p&gt;これは運営元の組織を指すのかな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div itemprop=&amp;quot;publisher&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/Organization&amp;quot;&amp;gt;
  &amp;lt;div itemprop=&amp;quot;logo&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/ImageObject&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://google.com/logo.jpg&amp;quot;/&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;url&amp;quot; content=&amp;quot;https://google.com/logo.jpg&amp;quot;&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;width&amp;quot; content=&amp;quot;600&amp;quot;&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;height&amp;quot; content=&amp;quot;60&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;name&amp;quot; content=&amp;quot;Google&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nameプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;nameプロパティ&lt;/h3&gt;

&lt;p&gt;何故かこのエラーだけどうやっても消えない。&lt;/p&gt;

&lt;p&gt;謎なので分かり次第追記しよう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この記事を書き終えてから再度試してみたら消えました。&lt;/p&gt;

&lt;p&gt;Structured Data Testing Tool自体が改修中だったのだろうか。&lt;/p&gt;

&lt;p&gt;どちらにせよこの辺はこれからも随時変わっていくポイントだろうから、定期的にチェックと対応をしていかなきゃいけないですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プロダクションのWordPressを捨てHugoに移行した</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</link>
      <pubDate>Thu, 10 Dec 2015 14:49:18 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</guid>
      <description>

&lt;p&gt;あんまり仕事のことは書かないつもりだったんだけど、このブログの生成でもお世話になっている&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を結構本気で使ったのでそのことをまとめてみます。&lt;/p&gt;

&lt;h2 id=&#34;hugoをプロダクションで使った:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoをプロダクションで使った&lt;/h2&gt;

&lt;p&gt;いま僕が働いている会社では事業の一つとしてメディアを運営しています。
僕が入ったとき、それはWordPressで運用がなされていて、&lt;a href=&#34;http://www.advancedcustomfields.com/&#34;&gt;Advanced Custom Fields&lt;/a&gt;を使ったガチガチのカスタム具合でした。&lt;/p&gt;

&lt;p&gt;しかしありがちなことにプラグインの管理もなされず、構築した人は外部の人、つまり動いてはいるけどそれ以上でも以下でもなかったんですね。&lt;/p&gt;

&lt;p&gt;さらにライターさんの話を聞いてみれば「なんか入力欄がいっぱいあってライティングがめんどくさい」とのこと。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;誰も幸せになっていない状態&lt;/strong&gt;というわけですね。&lt;/p&gt;

&lt;p&gt;僕が初めてそれを見た時、まず思ったのは&lt;strong&gt;「触りたくない」&lt;/strong&gt;ということでした。&lt;/p&gt;

&lt;p&gt;WordPressはドメインとガチガチに紐づくし（プラグインでなんとかなるけど）、テーマのカスタマイズだとかのコストや、現状調査をするコストが無駄だと思ったんですね。&lt;/p&gt;

&lt;p&gt;また、Advanced Custom Fieldsを使っているということはテーマも特注でしょう。&lt;/p&gt;

&lt;p&gt;というわけでリプレースを提案しました。
快く受け入れてくれた社員の方々には本当に感謝しています。&lt;/p&gt;

&lt;h2 id=&#34;なぜhugoなのか:5f9546be55588508513a850a19b4c520&#34;&gt;なぜHugoなのか&lt;/h2&gt;

&lt;p&gt;やはりMarkdownは優秀だと思っていて、メディア程度の文章ならDBに突っ込むよりMarkdownでファイル管理したいなと思いました。&lt;/p&gt;

&lt;p&gt;というわけでライターさんには無理を言ってMarkdownを覚えてもらいました。
これも快く受け入れてくれたライターさんの度量の広さに感謝しています。&lt;/p&gt;

&lt;p&gt;正直僕はハナから静的サイトジェネレータを使う気でいて、候補に考えていたのはJekyllとHugoでした。
何故かと言うと、Jekyllはドキュメント量が期待できると思っていたし、Hugoはそもそも使い慣れてる点を評価したからです。&lt;/p&gt;

&lt;p&gt;しかしJekyllは使いませんでした。Octopressをやめた時同様、生成が遅すぎたんです。
約500超の記事生成に18秒ほどかかり、チューニングなどを検討するよりもやめたほうが早いと判断しました。&lt;/p&gt;

&lt;p&gt;というわけで案外さっくりとHugoに行き着くことになったわけです。&lt;/p&gt;

&lt;h2 id=&#34;運用体制のこと:5f9546be55588508513a850a19b4c520&#34;&gt;運用体制のこと&lt;/h2&gt;

&lt;p&gt;静的サイトジェネレータを使うということは何かしらの方法でMarkdownを取り込み、生成したHTMLをアップロードしなければなりません。&lt;/p&gt;

&lt;p&gt;とはいえ管理画面だとかを作ってMarkdownを吐き出させるのは無駄なコストにしか思えないし、
素直にMarkdownが書けてそのままHugoを動かす環境に取り込める仕組みを考える必要がありました。&lt;/p&gt;

&lt;p&gt;なるだけコードを書きたくなかったのです。&lt;/p&gt;

&lt;p&gt;僕の開発部ではBitBucketのプライベートレポジトリを活用しています。&lt;/p&gt;

&lt;p&gt;GitHubも同様で、SCMのホスティングサービスではGUIで直接ファイルをいじる機能があります。
実際これを使ったことはあまりないのですが、今回はこの機能に管理画面の代替品になってもらうことにしました。&lt;/p&gt;

&lt;p&gt;なのでライターさんはWordPressの管理画面を捨て、BitBucketを管理画面として使うことになるわけです。&lt;/p&gt;

&lt;p&gt;実際これでだいたいの運用は回っています。ですが1つだけ想定していなかったポイントがありました。&lt;/p&gt;

&lt;p&gt;それは&lt;strong&gt;画像のアップロードが出来ない&lt;/strong&gt;ことです。
記事に使いたい画像をGUIからアップすることが出来なかったのです。&lt;/p&gt;

&lt;p&gt;幸いこの問題は、デザイナさんがGitに慣れていたこともあり、SourceTreeから画像をアップしてくれることになりました。&lt;/p&gt;

&lt;p&gt;つくづく社員の方に恵まれていると思います。&lt;/p&gt;

&lt;h2 id=&#34;移行するためにやったこと:5f9546be55588508513a850a19b4c520&#34;&gt;移行するためにやったこと&lt;/h2&gt;

&lt;p&gt;では僕が大きく時間を割いたポイントをお話します。&lt;/p&gt;

&lt;p&gt;それは次の2点です。&lt;/p&gt;

&lt;h3 id=&#34;wordpressからのエクスポート:5f9546be55588508513a850a19b4c520&#34;&gt;WordPressからのエクスポート&lt;/h3&gt;

&lt;p&gt;既存記事をMarkdownとして取り出す必要がありました。
これはいろいろなツールを検討したのですが、結局最終的にはスクレイピングして力技で取得しました。&lt;/p&gt;

&lt;p&gt;Pythonで抽出を行ったのですが、使い捨てプログラムということで適当に書きすぎたこともあり、500記事の抽出に数分かかるような有様になりました。&lt;/p&gt;

&lt;p&gt;ちなみにHugo用の移行ツールも何種類かあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tools/#migration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Hugo - Tools&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;テーマの作成:5f9546be55588508513a850a19b4c520&#34;&gt;テーマの作成&lt;/h3&gt;

&lt;p&gt;Markdownが生成出来てしまえばあとはHugoのルールに乗っかるだけなので、サイトが形作られるのはあっというまでした。&lt;/p&gt;

&lt;p&gt;とはいえGolangのテンプレートの仕様に慣れがなかったため、初めは想定した動作をしてもらえずイライラする場面も多かったです。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの強み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの強み&lt;/h2&gt;

&lt;p&gt;僕が感じた強みはシンプルさでした。&lt;/p&gt;

&lt;p&gt;UNIX哲学にこんな言葉があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;全てのプログラムはフィルタとして振る舞うようにせよ。&lt;br /&gt;
Make every program a Filter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;UNIX哲学 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おそらくこれに該当するもっともな例はシェルだと思うのですが、実はHugoもまさにこれを体現しているようなもので、Markdownを一定のルールに従ってテーマというフィルタに通すだけのプログラムになっています。&lt;/p&gt;

&lt;p&gt;なのでそのルールさえ理解してしまえばテーマを作るのは容易で、約1週間程度でほぼ完成形につくり上げることが出来ました。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの弱み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの弱み&lt;/h2&gt;

&lt;p&gt;とはいえ静的サイトジェネレータだからこその弱みもあると思っています。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートエンジンが難しい:5f9546be55588508513a850a19b4c520&#34;&gt;テンプレートエンジンが難しい&lt;/h3&gt;

&lt;p&gt;テンプレートの書き方によってはパフォーマンスがガッツリ落ちる時があり、たかが500記事でも18秒ほどかかってしまうこともありました。&lt;/p&gt;

&lt;p&gt;これではHugoの強みである速さを活かしきれてないことになってしまいますね。&lt;/p&gt;

&lt;p&gt;結局チューニングをしたものの、やはり企業として運営しているサイトのため要求も多く、現在は7秒程度で生成する状況で落ち着きました。&lt;/p&gt;

&lt;p&gt;ゆくゆくはせめて3秒以内に抑えたいとは思っています。&lt;/p&gt;

&lt;p&gt;また、個人的にGolangのテンプレートと相性が悪いようで、その点は結構苦労しました。&lt;/p&gt;

&lt;h3 id=&#34;よく読まれている記事が抽出出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;よく読まれている記事が抽出出来ない&lt;/h3&gt;

&lt;p&gt;これはもうどうしょうもないので、GoogleAnalyticsにアクセスしてJSONを吐き出しておくスクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;HugoはJSONを読み込んで記事を生成するような構成にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;Hugo - Data Files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このデータファイルという機能は非常に優秀で、タグやカテゴリを英名 - 和名変換するためにも利用しています。簡易KVSですね。&lt;/p&gt;

&lt;h3 id=&#34;サムネイルの作成が出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;サムネイルの作成が出来ない&lt;/h3&gt;

&lt;p&gt;これもどうしょうもないので、スクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;Pythonで書けば数行で出来てしまうため、10分20分で実装出来たのはラッキーでした。&lt;/p&gt;

&lt;p&gt;これがないとPageSpeedInsightのスコアが大きく下がるため、見落とさずに対応できて良かったです。&lt;/p&gt;

&lt;h2 id=&#34;運用を始めてみて:5f9546be55588508513a850a19b4c520&#34;&gt;運用を始めてみて&lt;/h2&gt;

&lt;p&gt;僕の操作ミスでサービスダウンさせた場面は2度ほどありましたが、Hugoだから発生した問題は1つもありません。&lt;/p&gt;

&lt;p&gt;レスポンスタイムは大きく向上し、PageSpeedInsightもほぼ全ページが90点超えとなりました（これはHugo関係ないが）。&lt;/p&gt;

&lt;p&gt;しかしライターさんにMarkdownを覚えてもらったのはやはり少し気にかかっていて、Hugo特有のメタデータなどは出来る限りフォローに入るよう気をつけています。&lt;/p&gt;

&lt;p&gt;また、生成はcronで定時処理しており、その処理ログをSlackに流すようにしています。&lt;/p&gt;

&lt;p&gt;Slack側では「ERROR」という文言を含むメッセージが発せられた場合にアラートがあげられるようにしており、簡易的な監視ツールとして手軽に立ち上げられたのではないかと思っています。&lt;/p&gt;

&lt;p&gt;そして、この運用による恩恵もいくつかあります。&lt;/p&gt;

&lt;h3 id=&#34;プルリクエストが使えるようになった:5f9546be55588508513a850a19b4c520&#34;&gt;プルリクエストが使えるようになった&lt;/h3&gt;

&lt;p&gt;メディアということで大量の記事を抱えているわけですが、その個々の記事のクオリティを上げることも重要な作業です。&lt;/p&gt;

&lt;p&gt;この運用だとBitBucket上に記事データがあるため、プルリクエストをライターさんになげる運用ができるようになりました。&lt;/p&gt;

&lt;p&gt;ソーシャルコーディングならぬ、ソーシャルライティングですね。&lt;/p&gt;

&lt;h3 id=&#34;編集履歴が残るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;編集履歴が残るようになった&lt;/h3&gt;

&lt;p&gt;これはWordPressでも機能としてあるのかもしれませんが、Gitによる強力なバージョン管理が行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事ファイルがどのような変遷をたどってきたか、どの行を誰が書いたのかがわかるのは大きなメリットだと思います。&lt;/p&gt;

&lt;h3 id=&#34;記事の一括操作が出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;記事の一括操作が出来るようになった&lt;/h3&gt;

&lt;p&gt;記事データがテキストファイルで存在するため、一括置換が容易になりました。&lt;/p&gt;

&lt;p&gt;これまでもタグやカテゴリの設定しなおし等を行いたい場面があったようですが、そういった作業も人間の手を介さずに一瞬で行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事を柔軟に扱うという点では、WordPressでの運用より10歩も20歩も前進出来たように思います。&lt;/p&gt;

&lt;p&gt;データをテキストファイルで保持できているので、エンジニアとしてもプラシーボ的な安心があります。&lt;/p&gt;

&lt;h3 id=&#34;校正が自動化出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;校正が自動化出来るようになった&lt;/h3&gt;

&lt;p&gt;文章を扱うサービスということもあり、ライティングルールを定めています。&lt;/p&gt;

&lt;p&gt;とはいえ現状どうかというと、結構な割合で守られていません。
しかしこれは書き手のチェックに委ねられていたため、しかたのないことだと思います。&lt;/p&gt;

&lt;p&gt;今回はテキストファイルとしてデータがあるので、正規表現でチェック出来るような校正はシェル化出来ました。&lt;/p&gt;

&lt;p&gt;これは毎週金曜日の夕方に処理されるようになっており、アラートが上がった記事はSlackに通知されるようになっています。&lt;/p&gt;

&lt;p&gt;また、サイズの大きい画像などが格納された場合も同様で、この処理の際にアラートがあがるようにしてあります。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:5f9546be55588508513a850a19b4c520&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;というわけでWordPressから静的サイトジェネレータへの移行を会社でおこなった話を書きました。&lt;/p&gt;

&lt;p&gt;現在は非常に安定して運用が出来ており、なおかつ非常に早いスピードで改修が出来ています。&lt;/p&gt;

&lt;p&gt;WordPressでの運用に手こずっている方は、一度静的サイトジェネレータでの運用も検討してはいいのではないでしょうか。&lt;/p&gt;

&lt;p&gt;素晴らしきプロダクトである&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;と開発者である&lt;a href=&#34;http://spf13.com/&#34;&gt;Steve Francia氏&lt;/a&gt;に感謝。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELB越しのLaravelでHTTPSを使おうとして困った話</title>
      <link>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</link>
      <pubDate>Wed, 04 Nov 2015 12:18:07 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</guid>
      <description>

&lt;h2 id=&#34;ssl証明書はelbに設置する:56aef34fa740ed018dee02e37b63f347&#34;&gt;SSL証明書はELBに設置する&lt;/h2&gt;

&lt;p&gt;何が普通なのか知らないけど、今回立ち上げた構成では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(80)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;っていう構成にしていました（するつもりだった）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/cloud/aws/aws-beginner-elb-ssl/&#34;&gt;【初心者向け】ELBにSSL証明書をインストールする ｜ Developers.IO&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題はリリース当日に:56aef34fa740ed018dee02e37b63f347&#34;&gt;問題はリリース当日に&lt;/h2&gt;

&lt;p&gt;リリースしてみたら何やら証明書のエラーが出てる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your connection to this site is private, but someone on the network might be able to change the look of the page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このページはSSL証明書が効いてるんだけど、ネットワーク上の何かがそうじゃなくしちゃうかもね？&lt;/p&gt;

&lt;p&gt;原因は&lt;strong&gt;httpsじゃないURLに飛ばすformタグがページに存在する&lt;/strong&gt;せいでした。&lt;/p&gt;

&lt;p&gt;開発環境でもオレオレ証明書を用意したりしてHTTPSで通信するようにしておくべきでした。&lt;/p&gt;

&lt;h2 id=&#34;laravelのrouteメソッド:56aef34fa740ed018dee02e37b63f347&#34;&gt;Laravelのrouteメソッド&lt;/h2&gt;

&lt;p&gt;URLのレンダリングはLaravelの&lt;code&gt;route&lt;/code&gt;メソッドを使っています。&lt;/p&gt;

&lt;p&gt;これは結構気に入っていて、後でURLを変えたいって時にある程度コストを軽減してくれる（んじゃないか）と思っているから。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://laravel.com/docs/5.1/routing#named-routes&#34;&gt;HTTP Routing - Laravel - The PHP Framework For Web Artisans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でも今回はこのメソッドが&lt;strong&gt;HTTPのURLをレンダリングした&lt;/strong&gt;せいで問題が起こりました。&lt;/p&gt;

&lt;h2 id=&#34;laravelでhttpsのurlを取り扱う:56aef34fa740ed018dee02e37b63f347&#34;&gt;LaravelでHTTPSのURLを取り扱う&lt;/h2&gt;

&lt;p&gt;LaravelのRoutingはこんな感じなんだけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPSのみを許容することも出来るらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;https&#39;, &#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておけば&lt;code&gt;route&lt;/code&gt;メソッドでレンダリングされるURLもHTTPSになる。&lt;/p&gt;

&lt;h2 id=&#34;そして問題が起きる:56aef34fa740ed018dee02e37b63f347&#34;&gt;そして問題が起きる&lt;/h2&gt;

&lt;p&gt;先ほどの通り、LaravelでHTTPSの設定をすると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPSのみを受け付ける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLのをレンダリングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事になります。&lt;/p&gt;

&lt;p&gt;今回ELBの奥にあるLaravelが載ったインスタンスはnginxが80ポートを待ち受けています。&lt;/p&gt;

&lt;p&gt;なのでHTTPSだけを許容されると困るんですね、443で通信しなきゃいけない。&lt;/p&gt;

&lt;h2 id=&#34;解決策:56aef34fa740ed018dee02e37b63f347&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;わがままを言えば&lt;strong&gt;LaravelがHTTPを受け付けて&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLをレンダリングする&lt;/strong&gt;と嬉しい。&lt;/p&gt;

&lt;p&gt;けどその方法は見つからず（構成としてナンセンスなんだろう）、ELBとLaravelが載ったインスタンスの両方にSSL証明書を設置することにしました。&lt;/p&gt;

&lt;p&gt;というわけでこういう形。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(443)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めでたしめでたし。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo0.15でSummaryが日本語に対応するっぽい</title>
      <link>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</link>
      <pubDate>Fri, 09 Oct 2015 22:15:51 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</guid>
      <description>&lt;p&gt;会社のMacにも&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;をセットアップしてあるんだけど、テーマの編集とかの続きを家でやろうとしたら&lt;code&gt;.Summary&lt;/code&gt;が異なる挙動をしてることに気づいた。&lt;/p&gt;

&lt;p&gt;どうやらHugoのバージョンによって、日本語の解釈がうまくいったりいかなかったりするみたい。&lt;/p&gt;

&lt;p&gt;ソースを読んでたらどうやら日本語のサポートもされてるようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/823334875d396bdc15770c335c2029a01a7ef2ce/hugolib/page.go&#34;&gt;hugo/page.go at 823334875d396bdc15770c335c2029a01a7ef2ce · spf13/hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;随分追ってみたんだけど&lt;code&gt;Metadata&lt;/code&gt;が何を返すのかよくわからず、コミットを見てたらCJKうんたらが追加されたのは最近っぽいことがわかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/commit/823334875d396bdc15770c335c2029a01a7ef2ce?diff=split&#34;&gt;WordCount and Summary support CJK Language · spf13/hugo@8233348&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PRのコメントを読んでみると、configになんか書けばなんとかなりそうな雰囲気。&lt;/p&gt;

&lt;p&gt;でもなんで会社のMacは期待した挙動をしてるんだ？&lt;/p&gt;

&lt;p&gt;Goのバージョンが新しいから？&lt;/p&gt;

&lt;p&gt;今のHugoなら&lt;code&gt;config.yaml&lt;/code&gt;にこう書けば日本語もきちんと処理をするようになってた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;HasCJKLanguage: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これできちんと70文字？70word？でSummaryが生成されるようになる。&lt;/p&gt;

&lt;p&gt;静的サイトジェネレータも実行環境によって挙動が変わることがあると少し面倒だなあ。&lt;/p&gt;

&lt;p&gt;Golangは他人の書いたソースが読みやすくて良い。&lt;/p&gt;

&lt;p&gt;書くのはあんまりすきじゃないけど。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search Consoleから被リンクを辿ってたら以下の記事にたどり着いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deprode.net/log/logs/2015-11-05/&#34;&gt;2015 11 05 - log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ブログのauthor様が仰るとおり、僕のHugoの環境はStableじゃなくてDevです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15-DEV&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;僕のブログのせいで戸惑わせてしまい、大変失礼しました。&lt;/p&gt;

&lt;p&gt;このことに伴い、記事のタイトルを&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HugoのSummaryが日本語に対応した&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;から&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo0.15でSummaryが日本語に対応するっぽい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;に変更しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OWASP ZAPでBASIC認証を突破する</title>
      <link>http://yet.unresolved.xyz/blog/2015/09/30/using-basic-auth-in-owasp-zap/</link>
      <pubDate>Wed, 30 Sep 2015 16:24:53 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/09/30/using-basic-auth-in-owasp-zap/</guid>
      <description>

&lt;p&gt;調べても意外と見つからない。&lt;/p&gt;

&lt;p&gt;要はリクエストヘッダに認証情報をくっつけられればいいんだけどその方法がわからない。&lt;/p&gt;

&lt;h2 id=&#34;リクエストヘッダに情報を差し込む:6779ddb6118e231a79097670a186005c&#34;&gt;リクエストヘッダに情報を差し込む&lt;/h2&gt;

&lt;p&gt;Stand AloneのScriptを作ってこんな感じでヘッダを差し込めるらしい&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; org.parosproxy.paros.network.HttpSender.addListener(
   new org.zaproxy.zap.network.HttpSenderListener {
     getListenerOrder: function() {
       return 1;
     },

     onHttpRequestSend: function(msg, initiator) {
       msg.getRequestHeader().setHeader(
         &amp;quot;Authorization&amp;quot;, &amp;quot;Basic ZHJwaGxxxxxxBob3Rv&amp;quot;);
     },

     onHttpResponseReceive: function(msg, initiator) {
     }
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6779ddb6118e231a79097670a186005c&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pupha.net/archives/2654/&#34;&gt;OWASP ZAP で送信されるリクエストに自動で独自ヘッダを追加する方法 - Web Application Security Memo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Laravel5.1]発行されたSQLと実行計画を取得する</title>
      <link>http://yet.unresolved.xyz/blog/2015/09/30/get-explain-at-laravel/</link>
      <pubDate>Wed, 30 Sep 2015 13:44:48 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/09/30/get-explain-at-laravel/</guid>
      <description>

&lt;p&gt;インデックス設計をするときとか、ORMを通して実際に発行されたSQLとか実行計画がほしい。&lt;/p&gt;

&lt;h2 id=&#34;sqlの発行をフックする:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;SQLの発行をフックする&lt;/h2&gt;

&lt;p&gt;ここに書いてあるとおり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://laravel.com/docs/5.1/database#listening-for-query-events&#34;&gt;Database: Getting Started - Laravel - The PHP Framework For Web Artisans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DB&lt;/code&gt;の&lt;code&gt;listen&lt;/code&gt;メソッドに&lt;code&gt;$sql, $bindings, $time&lt;/code&gt;を受け取るClosureを渡せる。&lt;/p&gt;

&lt;p&gt;なので&lt;code&gt;App\Providers\AppServiceProvider&lt;/code&gt;の&lt;code&gt;boot()&lt;/code&gt;メソッドに、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {
            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかやればよい。&lt;/p&gt;

&lt;h2 id=&#34;実行計画も取る:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;実行計画も取る&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {

            if (preg_match(&amp;quot;/^select/&amp;quot;, $sql)) {
                $explain = \DB::select(&amp;quot;explain {$sql}&amp;quot;, $bindings);
                \Log::info($explain);
            }

            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう。&lt;/p&gt;

&lt;p&gt;updateとかもフックしちゃうと2回発行されたりして面倒なので、selectだけ。&lt;/p&gt;

&lt;p&gt;selectに絞らないとしても、explainの取得がさらにフックされて・・・ってなるので、&lt;/p&gt;

&lt;p&gt;何かしら絞る必要はあり。&lt;/p&gt;

&lt;h2 id=&#34;本番では取らない:f8b9f4d61afe8ca86b89085edc23a796&#34;&gt;本番では取らない&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    public function boot()
    {
        \DB::listen(function($sql, $bindings, $time) {

            if (config(&#39;app.env&#39;) !== &#39;production&#39; &amp;amp;&amp;amp; preg_match(&amp;quot;/^select/&amp;quot;, $sql)) {
                $explain = \DB::select(&amp;quot;explain {$sql}&amp;quot;, $bindings);
                \Log::info($explain);
            }

            $bindings = implode(&#39;, &#39;, $bindings);
            $method = request()-&amp;gt;method();
            $url = request()-&amp;gt;url();
            \Log::info(&amp;quot;Query [{$method}:{$url}] [{$time}s] $sql, [$bindings]&amp;quot;);
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazon LinuxをVagrantで使いたい</title>
      <link>http://yet.unresolved.xyz/blog/2015/08/26/i-want-to-use-amazon-linux-at-vagrant/</link>
      <pubDate>Wed, 26 Aug 2015 23:12:02 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/08/26/i-want-to-use-amazon-linux-at-vagrant/</guid>
      <description>

&lt;p&gt;開発はCentOS、本番はAmazonLinuxにしようとしたら意外と違うところが多くてProvisioningがだるかったので。&lt;/p&gt;

&lt;h2 id=&#34;ec2-create-instance-export-task:219da61ce6f755e0018f6c81d16e9cbc&#34;&gt;ec2-create-instance-export-task&lt;/h2&gt;

&lt;p&gt;ec2-create-instance-export-taskっていうCLIのコマンドが用意されているらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ExportingEC2Instances.html&#34;&gt;Amazon EC2 インスタンスをエクスポートする - Amazon Elastic Compute Cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このコマンドでEC2のinstance_idを指定してS3にイメージファイルをエクスポートできるとのこと。&lt;/p&gt;

&lt;p&gt;書式はこんな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ec2-create-instance-export-task instance_id –e target_environment –f disk_image_format -c container_format –b s3_bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pipで入れたからこんな感じになったよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ec2 create-instance-export-task --instance-id i-82xxx70 --target-environment vmware --export-to-s3-task DiskImageFormat=vmdk,ContainerFormat=ova,S3Bucket=images.xxxxx.jp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしたらこんなエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A client error (AuthFailure) occurred when calling the CreateInstanceExportTask operation: vm-import-export@amazon.com must have WRITE and READ_ACL permission on the S3 bucket.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しっかり説明を読むと、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;エクスポートされたインスタンスを格納する Amazon S3 バケットを作成します。Amazon S3 バケットでは、[vm-import-export@amazon.com] アカウントへの [Upload/Delete] および [View Permissions] アクセスが付与される必要があります。詳細については、Amazon Simple Storage Service コンソールユーザーガイド の Creating a Bucket および Editing Bucket Permissions を参照してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なるほどなるほど。&lt;/p&gt;

&lt;p&gt;こんな感じに。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-08-26/bucket.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-08-26/bucket.png&#34; alt=&#34;bucket&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そしたら違うエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A client error (NotExportable) occurred when calling the CreateInstanceExportTask operation: Only imported instances can be exported.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ん？&lt;/p&gt;

&lt;p&gt;前提条件を読んでなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/VMImportPrerequisites.html#vmimport-image-formats&#34;&gt;VM Import/Export の前提条件 - Amazon Elastic Compute Cloud&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Linux/Unix（64 ビット）&lt;/p&gt;

&lt;p&gt;Red Hat Enterprise Linux (RHEL) 5.1-5.11、6.1-6.6、7.0-7.1&lt;/p&gt;

&lt;p&gt;Note
Amazon EC2 で実行するときに必要なドライバが存在しないため、RHEL 6.0 はサポートされていません。
VM Import は、RHEL インスタンスのライセンスポータビリティをサポートしています。既存の RHEL ライセンスは、関連付けられた RHEL インスタンスと一緒にインポートされます。Red Hat Cloud Access の適格性の詳細については、Red Hat ウェブサイトの適格性を参照してください。
CentOS 5.1～5.11、6.1～6.6、7.0-7.1&lt;/p&gt;

&lt;p&gt;Note
Amazon EC2 で実行するときに必要なドライバが存在しないため、CentOS 6.0 はサポートされていません。
Ubuntu 12.04、12.10、13.04、13.10、14.04、14.10&lt;/p&gt;

&lt;p&gt;Debian 6.0.0-6.0.8, 7.0.0-7.2.0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;あっ・・・。&lt;/p&gt;

&lt;h2 id=&#34;これでいいや:219da61ce6f755e0018f6c81d16e9cbc&#34;&gt;これでいいや&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.geekandi.com/2014/04/13/amazon-linux-vagrant-box-images/&#34;&gt;Amazon Linux Vagrant Box Images | Geek and I&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと古いし不安だけど、どうせ個人的なやつだし・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:219da61ce6f755e0018f6c81d16e9cbc&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21920993/convert-amazon-ec2-ami-to-virtual-or-vagrant-box&#34;&gt;virtualbox - Convert Amazon EC2 AMI to Virtual or Vagrant box - Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>focusoutイベントでfocus中の要素が取得できない</title>
      <link>http://yet.unresolved.xyz/blog/2015/07/14/does-not-work-focus-selector-at-focusout-event/</link>
      <pubDate>Tue, 14 Jul 2015 00:05:16 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/07/14/does-not-work-focus-selector-at-focusout-event/</guid>
      <description>

&lt;p&gt;何を血迷ったかサジェストを自作しようとしてしまってつらい目にあった話。&lt;/p&gt;

&lt;h2 id=&#34;フォーカスアウトしたらサジェストを消したい:1be3a17c6bd3affece21cbd510505d7a&#34;&gt;フォーカスアウトしたらサジェストを消したい&lt;/h2&gt;

&lt;p&gt;入力欄もしくはサジェストからフォーカスアウトした時はサジェストを消したい。
でもフォーカスアウトした先にフォーカスしたものが入力欄もしくはサジェストだったらそれは消したくない。&lt;/p&gt;

&lt;p&gt;だからこんなコードを書きました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;search-text&amp;quot;&amp;gt;
&amp;lt;div id=&amp;quot;suggest-list&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;suggest&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;suggest&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;suggest&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
$(&amp;quot;#search-text&amp;quot;).on(&amp;quot;focusout&amp;quot;, function() {
  if ($(&amp;quot;#suggest-list&amp;quot;).find(&amp;quot;:focus&amp;quot;).length !== 0) {
    console.log(&amp;quot;Not hide!&amp;quot;);
    return;
  }
  console.log(&amp;quot;hide!&amp;quot;);
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際はこの処理を入力だけじゃなくアンカーにも適用したんだけど面倒だから省略。
しかしこれだと&lt;code&gt;if&lt;/code&gt;の中には入らずサジェストの非表示処理が通ってしまう・・・。&lt;/p&gt;

&lt;h2 id=&#34;フォーカス処理は一度ブラウザに返してあげる:1be3a17c6bd3affece21cbd510505d7a&#34;&gt;フォーカス処理は一度ブラウザに返してあげる&lt;/h2&gt;

&lt;p&gt;どうやらJavaScriptの処理が進んでる間はフォーカス処理が行われないらしい。
なので&lt;strong&gt;一度ブラウザに処理が返るような処理&lt;/strong&gt;を挟んでやる必要がある。&lt;/p&gt;

&lt;p&gt;こんなかんじに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;#search-text&amp;quot;).on(&amp;quot;focusout&amp;quot;, function() {
  setTimeout(function() {
    if ($(&amp;quot;#suggest-list&amp;quot;).find(&amp;quot;:focus&amp;quot;).length !== 0) {
      console.log(&amp;quot;Not hide!&amp;quot;);
      return;
    }
    console.log(&amp;quot;hide!&amp;quot;);
  }, 0);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;はJavaScriptの処理を通した後に、ブラウザ側からまた呼び出されるとのこと。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:1be3a17c6bd3affece21cbd510505d7a&#34;&gt;参考にさせていただきました。&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/jkr_2255/items/17693ab77beea71a871c&#34;&gt;JavaScript - setTimeout(&amp;hellip;,0)などの使いドコロ - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>例によってpaiza online hackathon5をClojureで解いてみた</title>
      <link>http://yet.unresolved.xyz/blog/2015/05/06/challenged-to-online-hackathon-of-paiza5/</link>
      <pubDate>Wed, 06 May 2015 09:54:46 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/05/06/challenged-to-online-hackathon-of-paiza5/</guid>
      <description>

&lt;p&gt;まずい更新することがない。&lt;/p&gt;

&lt;p&gt;とりあえずPOHネタでこの場をしのごう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.jp/poh/enshura?locale=ja&#34;&gt;マンガ版「俺の許嫁と幼なじみが修羅場すぎる」｜paizaオンラインハッカソン5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はパフォーマンスとかの問題はなく、ただただロジックが面倒くさいものばっかでした。&lt;/p&gt;

&lt;h2 id=&#34;problem-1:d10396b379fa39f08bc202555c3657f6&#34;&gt;Problem 1&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))

(def p1 (-&amp;gt;&amp;gt; in
             first
             (take-nth 2)
             clojure.string/join))

(println p1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そもそもこれシーケンスで取らなければ&lt;code&gt;first&lt;/code&gt;とかつけなくてよかったんじゃないかなあ。&lt;/p&gt;

&lt;p&gt;そんな方法あるかわかんないけど。&lt;/p&gt;

&lt;h2 id=&#34;problem-2:d10396b379fa39f08bc202555c3657f6&#34;&gt;Problem 2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (map
         #(Integer/parseInt %)
         (line-seq (java.io.BufferedReader. *in*))))

(defn take-padding [coll pad]
  (-&amp;gt;&amp;gt; coll
       (partition-all pad)
       (map first)))

(def p2
  (let [l (rest in)]
    (map #(apply + %)
         (for [i (range 7)]
           (take-padding (drop i l) 7)))))

(print (clojure.string/join &amp;quot;\n&amp;quot; p2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結構強引にシーケンス操作を書いたけど、もっと楽にやれる関数が用意されてる気する。&lt;/p&gt;

&lt;h2 id=&#34;problem-3-rena:d10396b379fa39f08bc202555c3657f6&#34;&gt;Problem 3 RENA&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (for [e (map #(.split % &amp;quot; &amp;quot;) (line-seq (java.io.BufferedReader. *in*)))]
          (map #(Integer/parseInt %) e)))

(defn point-to-range [coll]
  (for [v (map #(partition 2 %) coll)]
    (let [[s e] v]
      (for [x (range (- (first s) 1) (first e))
            y (range (- (second s) 1) (second e))]
        [x y]))))

(def p3r
  (let [[w dc rc] (first in)
        d (take dc (rest in))
        r (-&amp;gt;&amp;gt; (point-to-range (take-last rc in))
               (apply concat)
               distinct)]
    (for [e r]
      (nth (nth d (second e)) (first e)))))

(print (apply + p3r))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エクセル的なやつ。&lt;/p&gt;

&lt;p&gt;めんどくさかった。&lt;/p&gt;

&lt;h2 id=&#34;problem-3-minami:d10396b379fa39f08bc202555c3657f6&#34;&gt;Problem 3 MINAMI&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))

(defn h2v [coll n]
  (for [c (range n)]
    (map #(nth % c) coll)))

(defn compl [n coll]
  (concat (take (- n (count coll)) (repeat 0)) coll))

(def p3m
  (let [tc (for [e (map #(.split % &amp;quot; &amp;quot;) in)]
             (map #(Integer/parseInt %) e))
        [x y] (-&amp;gt; tc first)
        coll (rest tc)]
    (h2v (-&amp;gt;&amp;gt; (h2v coll x)
              (map (fn [c] (filter #(not= 2 %) c)))
              (map #(compl y %))) y)))

(print (clojure.string/join &amp;quot;\n&amp;quot;
                            (map #(clojure.string/join &amp;quot; &amp;quot; %) p3m)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;爆弾のやつ。&lt;/p&gt;

&lt;p&gt;めんどくさかった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tmuxでウィンドウを開いたり画面分割したときにディレクトリを維持する</title>
      <link>http://yet.unresolved.xyz/blog/2015/04/01/remain-current-directory-when-open-new-window-in-tmux/</link>
      <pubDate>Wed, 01 Apr 2015 22:42:40 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/04/01/remain-current-directory-when-open-new-window-in-tmux/</guid>
      <description>

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# v でペインを縦に分割する
bind v split-window -h -c &amp;quot;#{pane_current_path}&amp;quot;

# s でペインを横に分割する
bind s split-window -v -c &amp;quot;#{pane_current_path}&amp;quot;

# 新規ウィンドウでディレクトリを保持
bind c new-window -c &amp;quot;#{pane_current_path}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせていただきました:0adf99f262be79bb5ee2575ca8ebd7e8&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://studio3104.hatenablog.com/entry/2014/10/14/131430&#34;&gt;tmux 1.9 でペイン分割時にカレントディレクトリを維持 - Studio3104::BLOG.new&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tmux-powerlineのステータスラインが描画ごとに増える</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/30/status-line-of-tmux-powerline-overlap/</link>
      <pubDate>Mon, 30 Mar 2015 23:56:58 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/30/status-line-of-tmux-powerline-overlap/</guid>
      <description>&lt;p&gt;iTerm2での話。&lt;/p&gt;

&lt;p&gt;こいつのせい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-03-31/iterm.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-03-31/iterm.png&#34; alt=&#34;verify&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でもこれがないと、素の時に使うVimで&lt;a href=&#34;https://github.com/itchyny/lightline.vim&#34;&gt;itchyny/lightline.vim&lt;/a&gt;がズレるんだよなあ。&lt;/p&gt;

&lt;p&gt;これはなに？Vimとtmuxで統一出来るの？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/tkhr/items/8cc17c02dea1803be9c6&#34;&gt;tmux - Powerline導入例 - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VimのClojureプラグイン覚書</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/22/using-clojure-plugin-on-the-vim/</link>
      <pubDate>Sun, 22 Mar 2015 19:47:22 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/22/using-clojure-plugin-on-the-vim/</guid>
      <description>

&lt;p&gt;VimでClojure書くときのあれこれをいっつも忘れるのでまとめておこうと思う。新しいことを覚えたら随時追記していこうかな。&lt;/p&gt;

&lt;h2 id=&#34;使ってるプラグイン:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;使ってるプラグイン&lt;/h2&gt;

&lt;h3 id=&#34;tpope-vim-classpath-https-github-com-tpope-vim-classpath:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/tpope/vim-classpath&#34;&gt;tpope/vim-classpath&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;クラスパスの設定をやってくれる。何も考えず入れればよい。&lt;/p&gt;

&lt;h3 id=&#34;guns-vim-slamhound-https-github-com-guns-vim-slamhound:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/guns/vim-slamhound&#34;&gt;guns/vim-slamhound&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;require&lt;/code&gt;の整理をやってくれる。不要な奴は消してくれるし、ない奴はclasspathから読み込んで追加してくれる。&lt;/p&gt;

&lt;h3 id=&#34;kien-rainbow-parentheses-vim-https-github-com-kien-rainbow-parentheses-vim:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/kien/rainbow_parentheses.vim&#34;&gt;kien/rainbow_parentheses.vim&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;括弧をrainbowな感じにしてくれる。&lt;/p&gt;

&lt;h3 id=&#34;tpope-vim-fireplace-https-github-com-tpope-vim-fireplace:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;tpope/vim-fireplace&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.venanti.us/clojure-vim/&#34;&gt;My Clojure Toolchain: Vim&lt;/a&gt;でもキラープラグインと書かれているfireplace。&lt;/p&gt;

&lt;p&gt;VimをREPLと接続してあんなことやこんなことが出来る。
このプラグインの機能、よく使う割によく忘れるんだよなあ。&lt;/p&gt;

&lt;p&gt;もはやこの記事はこの覚書のために書いたようなもの。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;K&lt;/kbd&gt; : カーソル位置にある関数のドキュメントを表示する。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;[d&lt;/kbd&gt; : カーソル位置にある関数のソースを表示する。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;[&amp;lt;C-D&amp;gt;&lt;/kbd&gt; : カーソル位置にある関数のソースにジャンプする。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;&amp;lt;C-W&amp;gt;f&lt;/kbd&gt; : カーソル位置にある関数のソースを横分割して開く。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;&amp;lt;C-W&amp;gt;gf&lt;/kbd&gt; : カーソル位置にある関数のソースをタブ分割して開く。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;&amp;lt;C-^&amp;gt;&lt;/kbd&gt; : ジャンプする前のファイルに戻る。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;cpp&lt;/kbd&gt; : カーソル行をREPLで実行する。&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;cqq&lt;/kbd&gt; : カーソル行をVim内のREPLで編集モードで開く。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:RunTest&lt;/code&gt; : テストを実行する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:Require&lt;/code&gt; : 読み込んでる名前空間をリロードする。&lt;/p&gt;

&lt;h3 id=&#34;venantius-vim-eastwood-https-github-com-venantius-vim-eastwood:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/venantius/vim-eastwood&#34;&gt;venantius/vim-eastwood&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Clojure用のLint。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;scrooloose/syntastic&lt;/a&gt;と&lt;a href=&#34;https://github.com/jonase/eastwood&#34;&gt;jonase/eastwood&lt;/a&gt;と&lt;a href=&#34;https://github.com/tpope/vim-fireplace&#34;&gt;tpope/vim-fireplace&lt;/a&gt;が必要。&lt;/p&gt;

&lt;h3 id=&#34;venantius-vim-cljfmt-https-github-com-venantius-vim-cljfmt:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/venantius/vim-cljfmt&#34;&gt;venantius/vim-cljfmt&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Clojure用のフォーマッター。
デフォルトで保存時のフォーマットがかかるようになってるので、入れるだけでOKのはず。&lt;/p&gt;

&lt;h2 id=&#34;使ってないプラグイン:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;使ってないプラグイン&lt;/h2&gt;

&lt;h3 id=&#34;guns-vim-clojure-static-https-github-com-guns-vim-clojure-static:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/guns/vim-clojure-static&#34;&gt;guns/vim-clojure-static&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;シンタックスハイライト、インデントのためのプラグイン。&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;clojure.core&lt;/code&gt;の名前空間にある補完機能があるらしい。
なんかあってもなくてもあんまり変わらなかった（設定しきれなかった？）ので使うのをやめた。&lt;/p&gt;

&lt;h3 id=&#34;vim-scripts-paredit-vim-https-github-com-vim-scripts-paredit-vim:4fc5f75a648d7ec78080562abdaae3a6&#34;&gt;&lt;a href=&#34;https://github.com/vim-scripts/paredit.vim&#34;&gt;vim-scripts/paredit.vim&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;括弧の位置をあれこれ出来るやつ、だと思う。
ちょっと脳みそがそんなにたくさんの事を一気に覚えるのは無理だったので、一旦使うのをやめた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Clojure]ringのCSRFトークンを生成する</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</link>
      <pubDate>Sun, 22 Mar 2015 19:23:27 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/22/invalid-anti-forgery-token-on-ring/</guid>
      <description>&lt;p&gt;ClojureのWebアプリは大抵ringでルーティングとかやると思うんだけど、
デフォルトだとPOSTリクエストした時にCSRFトークンチェックが入るようになっててたまに困る。&lt;/p&gt;

&lt;p&gt;なのでトークンの生成方法をメモ。&lt;/p&gt;

&lt;p&gt;チェックの処理は&lt;code&gt;site-defaults&lt;/code&gt;の、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def app
  (wrap-defaults app-routes site-defaults))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;:security&lt;/code&gt;のところで設定出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def site-defaults
  &amp;quot;A default configuration for a browser-accessible website, based on current
  best practice.&amp;quot;
  {:params    {:urlencoded true
               :multipart  true
               :nested     true
               :keywordize true}
   :cookies   true
   :session   {:flash true
               :cookie-attrs {:http-only true}}
   :security  {:anti-forgery   true
               :xss-protection {:enable? true, :mode :block}
               :frame-options  :sameorigin
               :content-type-options :nosniff}
   :static    {:resources &amp;quot;public&amp;quot;}
   :responses {:not-modified-responses true
               :absolute-redirects     true
               :content-types          true}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを&lt;code&gt;false&lt;/code&gt;にしちゃえばもちろんCSRFのチェックはされなくなるんだけど、まあ普通はするべきですよね。&lt;/p&gt;

&lt;p&gt;トークンの生成の仕方はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns sample.handler
  (:require [ring.util.anti-forgery :refer :all]))
(anti-forgery-field)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ring.util.anti-forgery&lt;/code&gt;の中身はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns ring.util.anti-forgery
  &amp;quot;Utility functions for inserting anti-forgery tokens into HTML forms.&amp;quot;
  (:use [hiccup core form]
        ring.middleware.anti-forgery))

(defn anti-forgery-field
  &amp;quot;Create a hidden field with the session anti-forgery token as its value.
  This ensures that the form it&#39;s inside won&#39;t be stopped by the anti-forgery
  middleware.&amp;quot;
  []
  (html (hidden-field &amp;quot;__anti-forgery-token&amp;quot; *anti-forgery-token*)))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ansibleを使ってMySQLが動く環境を手っ取り早く作る</title>
      <link>http://yet.unresolved.xyz/blog/2015/03/16/create-mysql-environment-using-the-ansible/</link>
      <pubDate>Mon, 16 Mar 2015 23:15:49 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/03/16/create-mysql-environment-using-the-ansible/</guid>
      <description>

&lt;p&gt;ちょっと友人と共同で開発しているWebアプリがあって、DBの用意も手軽に共有したいのでAnsibleでやることに。
まあ僕はViewしか触ってないから別になくてもいいんだけど・・・。&lt;/p&gt;

&lt;h2 id=&#34;hostsを書く:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;hostsを書く&lt;/h2&gt;

&lt;p&gt;Ansibleが取り扱うマシンの定義をしておかなきゃいけない。
&lt;code&gt;Vagrantfile&lt;/code&gt;で作られる仮想マシンのipを固定して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.20&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ansibleに読み込ませる&lt;code&gt;hosts&lt;/code&gt;に定義しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[vagrant]
192.168.33.20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ansibleのsshがrefuseで止められる場合は、&lt;code&gt;vagrant ssh-config &amp;gt;&amp;gt; ~/.ssh/config&lt;/code&gt;とかしておけば多分大丈夫。&lt;/p&gt;

&lt;h2 id=&#34;vagrantfileでプロビジョニング出来るようにする:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;Vagrantfileでプロビジョニング出来るようにする&lt;/h2&gt;

&lt;p&gt;せっかくだし&lt;code&gt;vagrant up&lt;/code&gt;か&lt;code&gt;vagrant provision&lt;/code&gt;でプロビジョニングしてほしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;にこんな感じの記述をすれば、初回実施時にAnsibleのPlaybookを実行してくれるらしい。&lt;/p&gt;

&lt;p&gt;Ansibleはなんかコマンド覚えらんないしちょうどいいね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  config.vm.provision &amp;quot;ansible&amp;quot; do |ansible|
    ansible.playbook = &amp;quot;env/dev-playbook.yml&amp;quot;
    ansible.inventory_path = &amp;quot;env/hosts&amp;quot;
    ansible.limit = &#39;all&#39;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は&lt;code&gt;Vagrantfile&lt;/code&gt;があるディレクトリに&lt;code&gt;env&lt;/code&gt;ってディレクトリを作って、そこに設定ファイルを置くことにした。
Playbookとかもここに入れていきます。&lt;/p&gt;

&lt;h2 id=&#34;ansible-galaxyを使う:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;Ansible Galaxyを使う&lt;/h2&gt;

&lt;p&gt;AnsibleはPlaybookと呼ばれるymlファイルにプロビジョニングの定義をしていく。
でも正直、個人的に使う環境のためにガリガリ書くのはバカらしいよね。
特にMySQLなんて相当な数の人が使ってるだろうし、そのノウハウを使わせてもらいたい。&lt;/p&gt;

&lt;p&gt;Ansibleには&lt;a href=&#34;https://galaxy.ansible.com/&#34;&gt;Ansible Galaxy&lt;/a&gt;っていうWebサービスがあって、モジュール単位のよく使う定義をアップできるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://galaxy.ansible.com/&#34;&gt;Ansible Galaxy | Find, reuse, and share the best Ansible content&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AnsibleではMySQLやらhttpdやらの個々のモジュールをroleと呼んでるらしい。&lt;/p&gt;

&lt;p&gt;つまり、&lt;a href=&#34;https://galaxy.ansible.com/list#/roles&#34;&gt;Browse Roles&lt;/a&gt;からMySQLのroleを探せばよい。
今回は&lt;a href=&#34;https://galaxy.ansible.com/list#/roles/509&#34;&gt;ANXS.mysql&lt;/a&gt;という奴を使わせてもらうことにしました。&lt;/p&gt;

&lt;p&gt;理由は、評価がそれなりに高くて、MySQLの設定が見たまんまでやれそうだったから。&lt;/p&gt;

&lt;h3 id=&#34;ansible-galaxyからroleをインストールする:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;Ansible Galaxyからroleをインストールする&lt;/h3&gt;

&lt;p&gt;Ansible Galaxyからの導入は&lt;code&gt;ansible-galaxy install ANXS.mysql&lt;/code&gt;みたいにやれば出来る。&lt;/p&gt;

&lt;p&gt;でもこれじゃあ、このPCにだけroleが導入されちゃうし、どんなroleが必要だったのか後々わからなくなっちゃいますね。
だから他の人が環境を作るときに困る。&lt;/p&gt;

&lt;p&gt;そういう時のために&lt;code&gt;requirements.txt&lt;/code&gt;っていうのを作るのが主流らしい。
これはAnsible Galaxyから導入するroleを記述しておくものみたいで、今回はこんな感じの記述になった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- src: ANXS.mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;導入するときは&lt;code&gt;ansible-galaxy install -p ./env/roles -r env/requirements.yml&lt;/code&gt;みたいにやればいい。
これで環境を作る手順を統一することができました。&lt;/p&gt;

&lt;p&gt;このコマンドは覚えられなそうだから、プロジェクトで使うWikiとかに書いておいたほうがいいですね。
ちなみに、roleはAnsible Galaxyにあるものだけじゃなくて、GitHubにあるものとかも導入できるらしい。&lt;/p&gt;

&lt;h3 id=&#34;playbookを書く:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;Playbookを書く&lt;/h3&gt;

&lt;p&gt;じゃあインストールしてきたroleをもとにPlaybookを書きます。&lt;/p&gt;

&lt;p&gt;設定の仕方はだいたいAnsible Galaxyに書いてあるんだけど、書いてないのも多いから選ぶときに気をつけたほうがいいかも。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://galaxy.ansible.com/list#/roles/509&#34;&gt;ANXS.mysql&lt;/a&gt;の場合はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- hosts: vagrant
  user: vagrant
  sudo: yes
  vars_files:
    - mysql.yml
  roles:
  - { role: ANXS.mysql }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;roles&lt;/code&gt;で使うroleを指定していて、&lt;code&gt;vars_files&lt;/code&gt;がroleで使う設定を外だしするための記述。&lt;/p&gt;

&lt;p&gt;外だししたファイルがこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Basic settings
mysql_port: 3306                        # The port on which mysql listens
mysql_bind_address: &amp;quot;0.0.0.0&amp;quot;           # The address the mysql server binds on
mysql_root_password: &#39;root&#39;             # The root password

mysql_character_set_server: &#39;utf8&#39;
mysql_collation_server: &#39;utf8_general_ci&#39;

# List of databases to be created (optional)
mysql_databases:
  - name: dev
    collation: &amp;quot;utf8_general_ci&amp;quot;        # optional, defaults to &amp;quot;utf8_general_ci&amp;quot;
    encoding: &amp;quot;utf8&amp;quot;                    # optional, defaults to &amp;quot;utf8&amp;quot;

# List of users to be created (optional)
mysql_users:
  - name: dev
    pass: dev
    priv: &amp;quot;*.*:ALL&amp;quot;                     # optional, defaults to &amp;quot;*.*:ALL&amp;quot;
    host: &amp;quot;%&amp;quot;                           # optional, defaults to &amp;quot;localhost&amp;quot;

# GLOBAL Setting
monit_protection: false                 # true or false, requires ANXS.monit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ansible Galaxyに載っているものからコピってきて、不要なものを消しただけ。&lt;/p&gt;

&lt;h2 id=&#34;プロビジョニングする:3b232f4f71049640111f0fd2b2cec1ee&#34;&gt;プロビジョニングする&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;vagrant up&lt;/code&gt;か&lt;code&gt;vagrant provision&lt;/code&gt;すればやってくれます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://galaxy.ansible.com/list#/roles/509&#34;&gt;ANXS.mysql&lt;/a&gt;の場合はMySQLユーザの作成とデータベースの作成までやってくれる。
テーブルとかは別途スキーマ定義を用意するだろうし、ここまでやってくれれば十分ですね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
