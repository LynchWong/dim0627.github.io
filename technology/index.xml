<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technologies on Unresolved</title>
    <link>http://yet.unresolved.xyz/technology/</link>
    <description>Recent content in Technologies on Unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Mar 2016 14:08:26 +0900</lastBuildDate>
    <atom:link href="http://yet.unresolved.xyz/technology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>text-rendering: optimizeLegibility;を指定するとWebフォントの読み込みがおかしくなる</title>
      <link>http://yet.unresolved.xyz/blog/2016/03/01/text-rendering-optimizelegibility-and-web-fonts/</link>
      <pubDate>Tue, 01 Mar 2016 14:08:26 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/03/01/text-rendering-optimizelegibility-and-web-fonts/</guid>
      <description>

&lt;p&gt;よくやるこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  text-rendering: optimizeLegibility;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょうどブログのデザインを変えてたら、何故か毎回リロードしないとGoogle Fontsから読ませてるOpen Sansが効かなくなって困った。
はじめはキャッシュとかChromeの不調かなんかかと思ってたんだけど、AndroidのChromeでも再現するし何かがおかしい。&lt;/p&gt;

&lt;p&gt;上記のプロパティを外したら直ったので、これが原因なのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;text-rendering:2acb9387331612b63a2d67e9f2d06529&#34;&gt;text-rendering？&lt;/h2&gt;

&lt;p&gt;文字列の描画についてのプロパティ。
かなりぼんやりした曖昧な情報がネットに溢れてるので、結局なんなのよと言いたくなった人は多いと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://on-ze.com/archives/609&#34;&gt;CSSの［text-rendering: optimizeLegibility;］は指定しないほうが無難かも。 - ONZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://terkel.jp/archives/2012/09/text-rendering-optimizelegibility/&#34;&gt;text-rendering: optimizeLegibility · terkel.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pro-s.co.jp/engineerblog/design/post_5246.html&#34;&gt;text-renderingって何？！ | Webサイト制作ならプロフェッサ（東京都/品川区）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕はそういうとき、MDNを信用して参考にさせてもらってます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering&#34;&gt;text-rendering - CSS | MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Summaryにはこうある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.&lt;/p&gt;

&lt;p&gt;The browser makes trade-offs among speed, legibility, and geometric precision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;text-rendering&lt;/code&gt;はテキストを何に最適化して表示するかの情報をレンダリングエンジンに提示する。&lt;/strong&gt;
この値によって、ブラウザの処理はレンダリング速度や可読性、配置精度のいずれかのトレードオフとなる。&lt;/p&gt;

&lt;h2 id=&#34;つまり何に使うの:2acb9387331612b63a2d67e9f2d06529&#34;&gt;つまり何に使うの？&lt;/h2&gt;

&lt;p&gt;この3つのどれを求めるのよってのを伝える属性なわけですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;描画速度&lt;/li&gt;
&lt;li&gt;読みやすさ&lt;/li&gt;
&lt;li&gt;配置の正確さ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;geometric precision&lt;/code&gt;はちょっと訳せなかったけど、文字の配置精度とかそういう意味だと解釈しました。&lt;/p&gt;

&lt;p&gt;そして注釈。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The text-rendering property is an SVG property that is not defined in any CSS standard. However, Gecko and WebKit browsers let you apply this property to HTML and XML content on Windows, Mac OS X and Linux.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;text-rendering&lt;/code&gt;はSVGのための属性でCSSの標準実装じゃないんだけど、WebKitとかGeckoだと使えますよと。&lt;/p&gt;

&lt;p&gt;何も考えずに指定するのはNGな気がしますね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>「CTF for Starter in IISEC」に行ってきた</title>
      <link>http://yet.unresolved.xyz/blog/2016/02/22/ctf-for-starter/</link>
      <pubDate>Mon, 22 Feb 2016 14:36:12 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/02/22/ctf-for-starter/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://atnd.org/events/74688&#34;&gt;CTF for Starter in IISEC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13時から17時まで、情報セキュリティ大学院大学にて開催された上記イベントに参加してきました。&lt;/p&gt;

&lt;h2 id=&#34;参加の動機:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;参加の動機&lt;/h2&gt;

&lt;p&gt;参加の理由は、もともとCTFやセキュリティに興味があったから。
CTFは参加する気ないけど・・・。&lt;/p&gt;

&lt;p&gt;イベント内でも説明されてたとおり、CTFはやっぱりハードルが高いし、
勉強出来るならしてみたいって人は多いと思う。
このイベントはそういった人に向けたものとのことだったので、参加を決めました。&lt;/p&gt;

&lt;h2 id=&#34;会場:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;会場&lt;/h2&gt;

&lt;p&gt;情報セキュリティ大学院大学さんの教室ひとつを貸しきっての開催でした。
コンクリート打ちっぱなしの無機質さがおしゃれだった。&lt;/p&gt;

&lt;p&gt;流石に電源だとかの設備も良く、特に不満なくイベントを終えられました。&lt;/p&gt;

&lt;h2 id=&#34;事前準備:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;前準備として、いくつかのソフトのインストールが必要だった。
基本的にWindows上での操作になるので、Macを使ってる人はModernIEを導入した上での準備が必要。&lt;/p&gt;

&lt;p&gt;導入したソフトは以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;OWASP ZAP&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Ollydbg&lt;/li&gt;
&lt;li&gt;AutoPsy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ModernIEはVirtualBox上で動かしてたんだけど、GuestOSにCPUを1コアしか使わせてなかったせいでめちゃくちゃ重かった。
会の中盤で気づいて直してからは快適でした。&lt;/p&gt;

&lt;h2 id=&#34;開催内容:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;開催内容&lt;/h2&gt;

&lt;p&gt;ネットワーク、ウェブ、フォレンジックのジャンルごとに幾つか問題が出題されて、
説明を受けながら自分でも頑張って解いていく感じ。
とっつきづらい問題でも挑戦してみる意欲を持てる感じに作られていたので、
楽しみながら勉強することが出来たと思う。&lt;/p&gt;

&lt;p&gt;周りもちょこちょこ見てたけど、開催者の方が丁寧にフォローをしてたので、躓いたまま放置されたりって人は居なかったみたい。
好印象だった。&lt;/p&gt;

&lt;h3 id=&#34;良かったこと:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;良かったこと&lt;/h3&gt;

&lt;p&gt;何より一番ためになったのは、ツールの使い方だと思う。
&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;とか&lt;a href=&#34;http://www.sleuthkit.org/autopsy/&#34;&gt;Autopsy&lt;/a&gt;とか、
名前は知ってても発展的な使い方を覚える機会が少ないから、それが学べたのは良かった。
まだまだわかってない機能ばかりだから、そこはこれからやっていったほうが良いと思うけど。&lt;/p&gt;

&lt;p&gt;出題サーバの不調等のトラブルもあったけど、比較的すぐ修復されていたし特に気にはならなかった。&lt;/p&gt;

&lt;h2 id=&#34;今後:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;今後&lt;/h2&gt;

&lt;p&gt;やっぱり自分が身をおいているのがWebの世界なので、Webが一番興味を持つことが出来た。
だからWebは特に意識しなくても勉強をしていけると思うけど、
フォレンジックやネットワークについてはちゃんと時間を取ってやっていきたいなと思ってる。&lt;/p&gt;

&lt;p&gt;この勉強会はStarterなだけあって、何度も参加すればその分恩恵があるかというとそういうわけではないので、
今後は独学か、また別の勉強会で学んでいけたらいいかなと。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/mochigomactf&#34;&gt;mochigoma(@mochigomaCTF)&lt;/a&gt;の皆様と&lt;a href=&#34;https://www.iisec.ac.jp/&#34;&gt;情報セキュリティ大学院大学&lt;/a&gt;様、ありがとうございました。
大変ためになりました。&lt;/p&gt;

&lt;h3 id=&#34;その他参加者のブログ:293f710ae3a95ce09bad1d9ac8c56c55&#34;&gt;その他参加者のブログ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://followcolor.hatenadiary.jp/entry/2016/02/21/221917&#34;&gt;CTF for Starter in IISEC 感想 - followcolorのブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;勝手に記載。僕なんかよりもセキュリティに造詣が深い方のようなので、参考になりました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Googleカスタム検索のデザインが崩れる</title>
      <link>http://yet.unresolved.xyz/blog/2016/02/19/broken-the-design-of-cse/</link>
      <pubDate>Fri, 19 Feb 2016 12:44:17 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/02/19/broken-the-design-of-cse/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2016-02-19/cse.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2016-02-19/cse.png&#34; alt=&#34;cse&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;なぜ崩れるのか:823fb9b45a070a4729c0c404dd848b3b&#34;&gt;なぜ崩れるのか&lt;/h2&gt;

&lt;p&gt;結論から言えばCSSの&lt;code&gt;box-sizing&lt;/code&gt;の値によって崩れる。
特にBootstrapを使ってるサイトで崩れることが多いんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;なぜならBootstrapはワイルドカードでこういう設定がされているから。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;該当ソースはここでしょうか。Bootstrapの構造がよくわからない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap/blob/e38f066d8c203c3e032da0ff23cd2d6098ee2dd6/less/scaffolding.less#L12&#34;&gt;bootstrap/scaffolding.less at e38f066d8c203c3e032da0ff23cd2d6098ee2dd6 · twbs/bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border-box&lt;/code&gt;のほうが扱いやすいことが多いので、この設定に対して文句とかはないです。
こうあるべきだと思う。&lt;/p&gt;

&lt;h2 id=&#34;崩れを直す方法:823fb9b45a070a4729c0c404dd848b3b&#34;&gt;崩れを直す方法&lt;/h2&gt;

&lt;p&gt;というわけで、カスタム検索のスクリプトを特定のタグで囲んで、そのタグに対してワイルドカードで&lt;code&gt;box-sizing&lt;/code&gt;の値を指定してしまえば直る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.cse-wrapper * {
    -webkit-box-sizing: content-box;
    -moz-box-sizing: content-box;
    box-sizing: content-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ワイルドカードは使いたくないよね、でもしょうがない。
ベンダプレフィックスは必要なんだっけ？ちょっとわかんないや。&lt;/p&gt;

&lt;h2 id=&#34;この事象について:823fb9b45a070a4729c0c404dd848b3b&#34;&gt;この事象について&lt;/h2&gt;

&lt;p&gt;結構ありがちな話らしい。
探せば同様の事象について掲載している記事もあるけど、
HTMLをベタで書くという解決方法なので、根本的な解決ではないように思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webkaru.net/wordpress/google-custom-search-design/&#34;&gt;HTMLフォームを使用したGoogleカスタム検索のデザイン変更方法 - WordPressの使い方と設定 - Webkaru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.02320.net/google_custom_search_optout_js/&#34;&gt;超軽量♪Googleカスタム検索はJavaScript外すと改造し放題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.696.jp/txt/937/&#34;&gt;googleカスタム検索をHTMLに書き換える | 696graphic [BLOG]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GoogleもHTMLベタでやっていいよとは言ってるが、Googleカスタム検索の管理画面から発行できるのはコードだし、
Google自身もこう書いている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://support.google.com/customsearch/answer/1351747?hl=ja&#34;&gt;HTML フォームを使用した検索ボックスの作成 - カスタム検索 ヘルプ&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTML フォームのコードは利便性のためにのみ提供されています。Google カスタム検索ではこの問題に対するサポートは提供しておりません。すべての無料の検索エンジンに Google ブランドを表示する必要があります。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;確かに、JSでのレンダリングだと目に見えて遅延するけどね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL5.6&#43;ruby-mysql2でlibmysqlclient_16 not found</title>
      <link>http://yet.unresolved.xyz/blog/2016/02/04/libmysqlclient16-not-found/</link>
      <pubDate>Thu, 04 Feb 2016 18:00:44 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/02/04/libmysqlclient16-not-found/</guid>
      <description>&lt;p&gt;せっかくなのでMySQLを5.5から5.6にして使おうとしたらエラーした。
MySQL5.6のインストールはこの記事が非常に分かりやすかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.ybbo.net/2014/01/22/%E3%80%90%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%80%91centos6%E3%81%ABmysql5-6%E3%82%92yum%E3%81%A7%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/&#34;&gt;【シンプル】CentOS6にMySQL5.6をyumで簡単にインストールする手順 | 田舎に住みたいエンジニアの日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ところがRails側で&lt;code&gt;ruby-mysql2&lt;/code&gt;と接合させようとするとライブラリ参照でエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadError: /usr/lib64/mysql/libmysqlclient.so.18: version `libmysqlclient_16&#39; not found (required by /var/www/pj/shared/bundle/ruby/2.2.0/extensions/x86_64-linux/2.2.0-static/mysql2-0.3.18/mysql2/mysql2.so) - /var/www/pj/shared/bundle/ruby/2.2.0/extensions/x86_64-linux/2.2.0-static/mysql2-0.3.18/mysql2/mysql2.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;困ります。
どうやら&lt;code&gt;ruby-mysql2&lt;/code&gt;を入れるタイミングで問題があったり、そもそもMySQL5.6のライブラリ側にバグがあるっていう話もあった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://myfinder.hatenablog.com/entry/2013/04/22/150219&#34;&gt;MySQL5.6 だと ruby-mysql2 が入ったふりをする - まいんだーのはてなブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/pollseed/items/b7d187dbbd64b29820d4&#34;&gt;awsでcapistrano動かす作業ログ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQLを入れたり消したりしてたら直ったので原因も対策も不明。謎。もうやめてね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails&#43;RDSでMysql2::Error: Illegal mix of collations</title>
      <link>http://yet.unresolved.xyz/blog/2016/02/04/illegal-mix-of-collations/</link>
      <pubDate>Thu, 04 Feb 2016 17:52:48 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/02/04/illegal-mix-of-collations/</guid>
      <description>

&lt;p&gt;エラーの全貌はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActionView::Template::Error (Mysql2::Error: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation &#39;like&#39;: SELECT...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;DEFAULT_CHARACTER_SET_NAME&lt;/code&gt;が&lt;code&gt;latin1&lt;/code&gt;になってしまっているらしく、&lt;code&gt;like&lt;/code&gt;検索で落ちてしまった。
MySQLの設定を変えなきゃいけないと思い込んでいて、RDSを使っていたからどうしょうもないのかと思って結構焦った。&lt;/p&gt;

&lt;p&gt;でもRDSもMySQLの設定は変えられるらしい。そりゃそうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2016-02-04/params.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2016-02-04/params.png&#34; alt=&#34;params&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで直りました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ALTER DATABASE table_name COLLATE = &#39;utf8_general_ci&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせていただきました:4b3e93c1f0fc95c9a54247a6e176ec82&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/mariadb/setting-character-sets-and-collations/&#34;&gt;Setting Character Sets and Collations - MariaDB Knowledge Base&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>crontabのValidationが出来るcrontab.guruが便利</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/26/cron-validator/</link>
      <pubDate>Tue, 26 Jan 2016 14:34:43 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/26/cron-validator/</guid>
      <description>&lt;p&gt;cron、僕は好きです。ありものでなんとか出来るところが好きです。
でも記法はいつも忘れるんですよね。あと正しいのかどうなのかがチェックしづらい。
そこでこの&lt;a href=&#34;http://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;が非常に便利でした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://crontab.guru/&#34;&gt;crontab.guru - the cron schedule expression editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正しさのチェックに加えていつ実行されるのかを文章で教えてくれる。
記法についても注釈があるのでこのサイトで完結してしまう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asset Pipelineのコンパイル対象を追加する</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/20/add-compile-target-of-asset-pipeline-at-rails/</link>
      <pubDate>Wed, 20 Jan 2016 16:15:58 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/20/add-compile-target-of-asset-pipeline-at-rails/</guid>
      <description>&lt;p&gt;デフォルトだと&lt;code&gt;application.css&lt;/code&gt;とかじゃないですか。
でも例えば管理画面を作ったりとかでごっそりデザインの違うページを作るときに少し困ったんです。&lt;/p&gt;

&lt;p&gt;まあ普通はそういう時、モジュールごと完全に分けるべきなのか・・・。疎結合ね・・・。&lt;/p&gt;

&lt;p&gt;解決方法はエラーに出てました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActionView::Template::Error (Asset was not declared to be precompiled in production.
Add `Rails.application.config.assets.precompile += %w( application_target.css )` to `config/initializers/assets.rb` and restart your server):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config/initializers/assets.rb&lt;/code&gt;に追記すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.config.assets.precompile += %w( application_target.css )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rails覚えらんないよー&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>読みやすい文章のデザインとバーティカルリズム</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/18/design-of-readable-text-and-vertical-rhythm/</link>
      <pubDate>Mon, 18 Jan 2016 11:04:21 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/18/design-of-readable-text-and-vertical-rhythm/</guid>
      <description>

&lt;p&gt;これは僕の考えをつらつらと棚卸ししているだけであって、他のサイトの批判や自惚れた感情を書き出した記事ではありません。
そう読めたらすみません。&lt;/p&gt;

&lt;p&gt;最近「読みやすい文章のデザイン」に興味を持ってる。
例えば行間とか文節の余白とか文字のサイズとか。
1行の文字数は35から45くらいが良いらしい。これは色々な意見があってどれが正しいのか僕にはわからない。&lt;/p&gt;

&lt;p&gt;最近興味を持てることがめっきり減ってしまったので、こういうことでも興味を持って取り組めるのはなんか嬉しい。&lt;/p&gt;

&lt;h2 id=&#34;文章のデザイン:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;文章のデザイン&lt;/h2&gt;

&lt;p&gt;僕は前に何処かの記事で書いたとおり、会社でメディアの運営をやっている。
メディアをうまく運営するために必要なことはたくさんあると思うんだけど、僕はあまりそこのノウハウを持っていない。&lt;/p&gt;

&lt;p&gt;一つわかってるのは、メディアのコアは文章や画像であって、それを如何に見やすくするかが一つの重要なポイントであるということ。
それに取り組んでいるうちに「文章のデザイン」に興味を持った。&lt;/p&gt;

&lt;h3 id=&#34;検討すべきことを考える:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;検討すべきことを考える&lt;/h3&gt;

&lt;p&gt;文章は見出しや文節、時には画像などで構築される。&lt;/p&gt;

&lt;p&gt;まず気にすべきは見出しの上下の余白はどれくらい取るべきなのか、とか。
行間はどれくらいで、文節の後はどれくらい余白を取ればいいのかとか。
さらには1行のwidthはどれくらいあればいいとか、簡単に思えて考えれば考えるほどいろいろな要素が出てくる。&lt;/p&gt;

&lt;p&gt;僕が最近悩んだり考えたりしてることはざっくり次の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;見出しの文字サイズと上下の余白&lt;/li&gt;
&lt;li&gt;文章の行間&lt;/li&gt;
&lt;li&gt;文節の後の余白&lt;/li&gt;
&lt;li&gt;文字のサイズ&lt;/li&gt;
&lt;li&gt;フォント&lt;/li&gt;
&lt;li&gt;1行に表示すべき文字数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スマートデバイスの場合:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;スマートデバイスの場合&lt;/h3&gt;

&lt;p&gt;最近ではブラウザといってもPCだけじゃなくスマートデバイスの考慮も入れなくちゃいけない。
レスポンシブデザインはそこまで難しいものじゃないので、実装の手間はそんなに増えない。
だけど考えることが2パターンになるのは結構なコストだなと感じている。&lt;/p&gt;

&lt;p&gt;スマートデバイスだと、画面が小さいから文字が大きい方がいいのか？とか、行間とかその他の検討事項をどうすればいいのかに悩んだことがある。&lt;/p&gt;

&lt;p&gt;僕は最初、「画面が小さいから文字は大きくないと読みづらい」と思ってこのブログもそういうデザインにしていた。
でもふと「読者目線」でいろいろなサイトを見てた時、&lt;strong&gt;文字が大きいと画面に表示される情報量が少なくてスクロールが煩わしい&lt;/strong&gt;と感じることがあった。
なので最近はスマートデバイスの時は文字を小さくして出来るだけ多くの情報を1画面に表示出来るようにしている。
実際、文字が小さくて目が疲れることはあっても、読みづらいとかいうことはあまりないのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;僕のエゴ:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;僕のエゴ&lt;/h2&gt;

&lt;p&gt;僕は出来るだけ、このブログは装飾的なデザインを入れないようにしている。
文章にそれは必要ないと思っているから。&lt;/p&gt;

&lt;p&gt;基本的にどのサイトでも、見出しに色をつけたり色々なところでデザインを入れてブランディングをしたりしている。
企業として売り出していくからにはそれが必要なのはすごくわかる。
でも、これは僕のエゴだけど、「それがないと成り立たないデザイン」だけで成り立っている方が美しく感じてしまう。&lt;/p&gt;

&lt;p&gt;それもあって、この記事にはものすごく共感した覚えがある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uxmilk.jp/translation/the_year_in_design&#34;&gt;2015年のデザイントレンドを振り返る | UX MILK&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;デザインにおける一つ一つのディテールは、そのデザインが成り立たなくなるギリギリの線まで取り除いていくべきである。&lt;/li&gt;
&lt;li&gt;スタイルというのはブランドとコンテンツを支えるためにある。目的のないスタイルはただのノイズである。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;装飾としてのデザインは必要なのか:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;装飾としてのデザインは必要なのか&lt;/h3&gt;

&lt;p&gt;僕が一番長いこと悩んでいるのは「見出しの見やすさ」のこと。&lt;/p&gt;

&lt;p&gt;見出しは文字サイズを大きくしたり太字にしたり、色々な方法で装飾することが出来る。
それもh1, h2, h3と見出しのレベルによってそれぞれの装飾が出来てしまう。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;太字にする&lt;/li&gt;
&lt;li&gt;背景色をつける&lt;/li&gt;
&lt;li&gt;下線を引く&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など。これについては色々な人が色々な試行錯誤を繰り返してきてる事柄だと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://liginc.co.jp/web/design/other-design/36320&#34;&gt;美しいWebデザインをタイプ別に！見ないと損するパーツ別ギャラリーサイトまとめ | 株式会社LIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sole-color-blog.com/blog/design/294/&#34;&gt;もう迷わない！見出しデザインの基本理論とアイデア集 | それからデザイン スタッフブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;僕の今の結論は、「強調しすぎなければいい」んじゃないかと思っている。
実際そこまで装飾しなくたって、読みやすさは変わらない。
余白さえしっかりしていれば、人間は以外としっかりと見出しを捉える目をしているんじゃないかと思う。&lt;/p&gt;

&lt;h2 id=&#34;バーティカルリズム:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;バーティカルリズム&lt;/h2&gt;

&lt;p&gt;では適当に余白を付けて適当に文字サイズを決めればいいのかと言うと、僕は結構きっちりしたい人間なので少しモヤッとしてしまう。
なにか、黄金比的なものがあるんじゃないかと。&lt;/p&gt;

&lt;p&gt;そこで知ったのがバーティカルリズムのこと。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://whiskers.nukos.kitchen/2015/04/05/modular-scale.html&#34;&gt;Modular ScaleとVertical Rhythmを使ったタイポグラフィとレイアウト | Webデザイン、フロントエンド系の技術に関する備忘録 - whiskers&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vertical Rhythmは1行の高さを1つの単位として、縦のラインのリズムを作る手法です。ノートの罫線をイメージしてもらうとわかり易いと思います。要素やタイポグラフィの高さを罫線を基準にデザインすることで、デザインに感じる違和感を小さくし心地よさを感じさせることができます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人間の体に染み付いている文章の余白は、おそらくノートに自分で書いてきた&lt;strong&gt;罫線ベースの余白&lt;/strong&gt;なんだと思う。
このバーティカルリズムの考えには非常に納得したので、最近はこの考えをベースに文章のデザインをするようにしている。&lt;/p&gt;

&lt;p&gt;バーティカルリズムを用いるようにしてから、&lt;code&gt;font-size&lt;/code&gt;を指定するときは&lt;code&gt;line-height&lt;/code&gt;も一緒に指定するようになった。
&lt;code&gt;font-size&lt;/code&gt;は好きな値にしているが、&lt;code&gt;line-height&lt;/code&gt;は&lt;code&gt;1rem&lt;/code&gt;や&lt;code&gt;2rem&lt;/code&gt;など、綺麗な数字になるようにしている。そうしないと余白が崩れるので。&lt;/p&gt;

&lt;p&gt;Modular Scaleについてはまだしっかりとメリットや腹落ちする何かが見つけられていないので、実戦投入はしていない。
しかしやっぱり、こういった理論や理屈に従った考え方があると、デザインのしやすさは大きく変わるなと思った。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;そうは言っても、一年前の自分は全く違うことを考えていたわけで、今考えているこれらのことも一年後には「当たり前のこと」になっているんだと思う。
それでいいし、そうあるべきだと思うけど。&lt;/p&gt;

&lt;p&gt;最近、これまで作ったブログのテーマを上記のように新しく身につけた知識でリファクタリングをしたので、まとめたくなった次第でした。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:b8d71f99fac6a3ac275ba50d22f78f54&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://whiskers.nukos.kitchen/2015/04/05/modular-scale.html&#34;&gt;Modular ScaleとVertical Rhythmを使ったタイポグラフィとレイアウト | Webデザイン、フロントエンド系の技術に関する備忘録 - whiskers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ameblo.jp/ca-1pixel/entry-11837685575.html&#34;&gt;デザインは8の倍数でできている｜1 pixel｜サイバーエージェント公式クリエイターズブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://uxmilk.jp/translation/the_year_in_design&#34;&gt;2015年のデザイントレンドを振り返る | UX MILK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>さくらVPSでpip install lxmlがOOM Killerに殺される</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/12/pip-install-lxml-killed-by-oom-killer/</link>
      <pubDate>Tue, 12 Jan 2016 12:04:51 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/12/pip-install-lxml-killed-by-oom-killer/</guid>
      <description>

&lt;p&gt;Python2.7 + BeautifulSoup + lxmlの環境でスクレイピングをしようとしたらlxmlがインストールできなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing collected packages: lxml
  Running setup.py install for lxml
    Complete output from command /opt/local/bin/python2.7 -c &amp;quot;import setuptools, tokenize;__file__=&#39;/tmp/pip-build-9nMFdz/lxml/setup.py&#39;;exec(compile(getattr(tokenize, &#39;open&#39;, open)(__file__).read()
.replace(&#39;\r\n&#39;, &#39;\n&#39;), __file__, &#39;exec&#39;))&amp;quot; install --record /tmp/pip-8cwa10-record/install-record.txt --single-version-externally-managed --compile:
    /opt/local/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: &#39;bugtrack_url&#39;
      warnings.warn(msg)
    Building lxml version 3.4.4.
    Building without Cython.
    Using build configuration of libxslt 1.1.26
    Building against libxml2/libxslt in the following directory: /usr/lib64
    running install
    running build
    running build_py
    copying src/lxml/includes/lxml-version.h -&amp;gt; build/lib.linux-x86_64-2.7/lxml/includes
    running build_ext
    building &#39;lxml.etree&#39; extension
    gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/usr/include/libxml2 -I/tmp/pip-build-9nMFdz/lxml/src/lxml/includes -I/opt/local/include/python
2.7 -c src/lxml/lxml.etree.c -o build/temp.linux-x86_64-2.7/src/lxml/lxml.etree.o -w
    gcc: Internal error: Killed (program cc1)
    Please submit a full bug report.
    See &amp;lt;http://bugzilla.redhat.com/bugzilla&amp;gt; for instructions.
    error: command &#39;gcc&#39; failed with exit status 1

    ----------------------------------------
Command &amp;quot;/opt/local/bin/python2.7 -c &amp;quot;import setuptools, tokenize;__file__=&#39;/tmp/pip-build-9nMFdz/lxml/setup.py&#39;;exec(compile(getattr(tokenize, &#39;open&#39;, open)(__file__).read().replace(&#39;\r\n&#39;, &#39;\n&#39;),
__file__, &#39;exec&#39;))&amp;quot; install --record /tmp/pip-8cwa10-record/install-record.txt --single-version-externally-managed --compile&amp;quot; failed with error code 1 in /tmp/pip-build-9nMFdz/lxml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら&lt;code&gt;gcc: Internal error: Killed (program cc1)&lt;/code&gt;はOOM Killerにkillされたってことらしい？&lt;/p&gt;

&lt;p&gt;この記事も参考になりそうだったけど解決には至らなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://scissorhands.jpn.org/2011/11/post-260.html&#34;&gt;さくらインターネット「さくらのレンタルサーバ」にSubversionをインストールする。 - ScissorHands&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;swapファイルで対応する:bc1e3babd27cd8320e4e2f6865a6df73&#34;&gt;swapファイルで対応する&lt;/h2&gt;

&lt;p&gt;StackOverFlowでswapファイルでやるしかないよみたいな意見が散見されたので、この記事を参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.wordspeak.org/posts/resolving-build-errors-with-python-lxml.html&#34;&gt;Resolving build errors with python lxml on low memory machines | Wordspeak&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=500000
$ sudo mkswap /swapfile
$ sudo swapon /swapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でswapファイルを作成してインストールを実行したら出来ました。&lt;/p&gt;

&lt;p&gt;終わったら削除。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo swapoff /swapfile
$ sudo rm /swapfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせていただきました:bc1e3babd27cd8320e4e2f6865a6df73&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scissorhands.jpn.org/2011/11/post-260.html&#34;&gt;さくらインターネット「さくらのレンタルサーバ」にSubversionをインストールする。 - ScissorHands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wordspeak.org/posts/resolving-build-errors-with-python-lxml.html&#34;&gt;Resolving build errors with python lxml on low memory machines | Wordspeak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Python]Flaskアプリをnginx &#43; uWSGIでさくらVPSにデプロイする</title>
      <link>http://yet.unresolved.xyz/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</link>
      <pubDate>Fri, 08 Jan 2016 10:57:35 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2016/01/08/deploying-flask-app-to-sakura-vps/</guid>
      <description>

&lt;p&gt;CentOS6.5、Python2.7でやります。&lt;/p&gt;

&lt;p&gt;CentOS6.5にプリインストールされているPythonは2.6だと思うのですが、Python2.7の導入方法は書きません。
多分いろいろな環境で動いたり動かなかったりしちゃうと思うので。&lt;/p&gt;

&lt;p&gt;僕はこの記事を参考にしました。非常に簡単かつ完璧に書かれてて助かりました。こんな記事が書けるようになりたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/a_yasui/items/5f453297855791ed648d&#34;&gt;CentOS に Python2.7, Python3.3を入れたメモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;uwsgiをインストールする:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGIをインストールする&lt;/h2&gt;

&lt;p&gt;まあ当然WSGIを使います。PythonをWebアプリとして動かす際のサーバ間仕様ですね。&lt;/p&gt;

&lt;p&gt;WSGIで使えるコンテナはWikiを見る限り幾つかあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Web_Server_Gateway_Interface&#34;&gt;Web Server Gateway Interface - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;WSGIアプリケーションコンテナの例としては、uWSGI, Gunicorn, Apacheモジュール (mod_wsgi, mod_pythonなど), Microsoft IIS（isapi-wsgi, PyISAPIe, ASPゲートウェイを使用）などがある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今回はuWSGIを使います。&lt;/p&gt;

&lt;h3 id=&#34;uwsgi:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;uWSGI？&lt;/h3&gt;

&lt;p&gt;公式より引用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://uwsgi-docs.readthedocs.org/en/latest/&#34;&gt;The uWSGI project — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The uWSGI project aims at developing a full stack for building hosting services.&lt;/p&gt;

&lt;p&gt;Application servers (for various programming languages and protocols), proxies, process managers and monitors are all implemented using a common api and a common configuration style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;アプリケーションサーバですね。&lt;/p&gt;

&lt;p&gt;今回はnginxの向こうにuWSGIを置いてサービスを動作させます。&lt;/p&gt;

&lt;h3 id=&#34;インストール:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;インストール&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんて簡単！&lt;/p&gt;

&lt;h3 id=&#34;パラメータオプションでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;パラメータオプションでの起動&lt;/h3&gt;

&lt;p&gt;uWSGIはコマンドから起動設定も含めた起動が出来ます。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで8000ポートで&lt;code&gt;wsgi_app&lt;/code&gt;がhttp全公開になります。
nginxと連携させる前に、一度このタイミングでアクセス出来るかを見とくと良いですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-w&lt;/code&gt;オプションはわかりづらいのですが、&lt;code&gt;main.py&lt;/code&gt;にアプリの起動が記述されてる場合は&lt;code&gt;main&lt;/code&gt;を指定するみたいですね。&lt;/p&gt;

&lt;p&gt;パラメータは公式のこのページが参考になりそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/Options.html&#34;&gt;uWSGI Options — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっとしたロジックも書ける様子。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://uwsgi-docs.readthedocs.org/en/latest/ConfigLogic.html&#34;&gt;Configuration logic — uWSGI 2.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iniファイルでの起動:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;iniファイルでの起動&lt;/h3&gt;

&lt;p&gt;パラメータをたくさんつけるとコマンドが長くなってしまうので&lt;code&gt;ini&lt;/code&gt;に落とし込みました。
&lt;code&gt;xml&lt;/code&gt;とかその他の形式でも行けるみたいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[uwsgi]
chdir = /path/to/src
module = wsgi
socket = /path/to/app.sock
touch-reload = /path/to/reload.trigger
logto = /var/log/uwsgi.log
max-requests = 1000
chmod-socket = 666

uid = www-user
gid = www-group
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は&lt;code&gt;uwsgi --ini wsgi.ini&lt;/code&gt;みたいな感じ。
ここでも一度アクセスできるかを確認するといいですね。&lt;/p&gt;

&lt;p&gt;chdirはカレントディレクトリの指定です。
これがないとコマンドでは動くのにupstartから起動したら動かない、なんてことになったり。&lt;/p&gt;

&lt;p&gt;socketについてはこの記事が詳しいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プロダクションで使うならその他細かな設定が必要かと思います。&lt;/p&gt;

&lt;h3 id=&#34;upstartから起動させる:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;upstartから起動させる&lt;/h3&gt;

&lt;p&gt;別に手で起動しても問題ないと思うのですが、多分ナンセンスなので。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/init/app.conf&lt;/code&gt;を作って、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;description &amp;quot;uWSGI&amp;quot;
start on runlevel [2345]
stop on runlevel [06]
respawn

env UWSGI=/path/to/uwsgi
exec $UWSGI --ini /path/to/wsgi.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sudo start app&lt;/code&gt;で起動出来ます。この起動の仕方は初めて知りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kuni-nakaji/items/f3426bf69be947c594c4&#34;&gt;Linux - upstartでデーモン化してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nginxとの連携:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;nginxとの連携&lt;/h2&gt;

&lt;p&gt;インストールは省きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server {
    listen       80;
    server_name  localhost;
    charset      utf-8;

    location / {
        try_files $uri @uwsgi;
    }

    location @uwsgi {
        include uwsgi_params;
        uwsgi_pass unix:/path/to/app.sock;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;uWSGIが起動して&lt;code&gt;app.sock&lt;/code&gt;が配備されてる状態であればこれでアクセス出来るはず。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:a09f5de2bb121134bcd4cecf283ff09b&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yasunori/items/64606e63b36b396cf695#etcnginxconfdsample_nginxconf&#34;&gt;Python - ちゃんと運用するときのuWSGI設定メモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&#34;&gt;How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/morinokami/items/e0efb2ae2aa04a1b148b&#34;&gt;Flask + uWSGI + Nginx でハローワールドするまで @ さくらのVPS (CentOS 6.6) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.djangoproject.jp/en/latest/howto/deployment/wsgi/uwsgi.html&#34;&gt;uWSGI で Django を使う方法 — Django 1.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ACCOUNT KILLERというサービスが面白い</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/17/about-account-killer/</link>
      <pubDate>Thu, 17 Dec 2015 10:39:55 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/17/about-account-killer/</guid>
      <description>

&lt;p&gt;WordPress.comとGravatarを退会しようと思ったんだけどなんか退会画面が見つからない。
いろいろ調べてみるとこの記事に行き着いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20150915/1442277074&#34;&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない！？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;まじかよ、なんてひどいサービスだ。&lt;/p&gt;

&lt;p&gt;それはまあよくて、どっちにしろWordPressがひどいのは知ってたし。
この記事で紹介されてるACCOUNT KILLERというサービスが面白かった。&lt;/p&gt;

&lt;h2 id=&#34;account-killer:283d2a7a74a226c22e2344c11ac9de1b&#34;&gt;ACCOUNT KILLER？&lt;/h2&gt;

&lt;p&gt;先の記事を引用させてもらうと、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ここは、Webサイト／サービスをホワイトリスト（退会容易）とブラックリスト（退会困難）に分けていて、Gravatarはブラック。ブラックもブラック、なんと退会が不可能なのです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;世の中の有名なサービスの退会難易度をまとめてくれてるらしい。先にこれ見ときゃよかったなー。
退会出来ないサービスなんて登録したくないよね。さすがWordPress。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせていただきました:283d2a7a74a226c22e2344c11ac9de1b&#34;&gt;参考にさせていただきました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/m-hiyama/20150915/1442277074&#34;&gt;WordPress.comとGravatarのアカウントは一度登録したら何があっても絶対に削除できない - 檜山正幸のキマイラ飼育記&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Googleの構造化データの扱いが変わった気がする</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/11/error-occured-in-structured-data-testing-tool/</link>
      <pubDate>Fri, 11 Dec 2015 11:22:28 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/11/error-occured-in-structured-data-testing-tool/</guid>
      <description>

&lt;p&gt;このブログも、他の運営してるサイトも、今日になってエラーが発生するようになった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/testing-tool/&#34;&gt;Structured Data Testing Tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;エラーは2種類発生していて、ひとつめがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-12-11/error1.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-12-11/error1.png&#34; alt=&#34;error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もうひとつがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-12-11/error2.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-12-11/error2.png&#34; alt=&#34;error&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あれ？&lt;code&gt;author&lt;/code&gt;はもともと必須だっけ？&lt;/p&gt;

&lt;h2 id=&#34;構造化データ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;構造化データ？&lt;/h2&gt;

&lt;p&gt;マイクロデータとかって呼ばれたりもする。
HTMLにもう少し踏み込んだ側面的な意味を持たせるためのもの。
Googleの説明が、どのように使われるかも記載されていてわかりやすい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/&#34;&gt;Promote Your Content with Structured Data Markup  |  Structured Data  |  Google Developers&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;エラーの原因:1cba147eb8c5721b87c65951056c9faa&#34;&gt;エラーの原因&lt;/h2&gt;

&lt;p&gt;今回はArticleの&lt;code&gt;image&lt;/code&gt;とか&lt;code&gt;publisher&lt;/code&gt;もろもろでエラーが発生しました。
これまでは大丈夫だったのになんでだろう。
この記載を見ると、どうやら構造が間違っているらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/structured-data/rich-snippets/articles?hl=ja&#34;&gt;Enabling Rich Snippets for Articles  |  Structured Data  |  Google Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;imageプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;imageプロパティ&lt;/h3&gt;

&lt;p&gt;これまで僕は、画像要素を次のように記載していたのだけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta itemprop=&amp;quot;image&amp;quot; content=&amp;quot;http://example.com/images/10999.jpg&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう記載するのが正しいようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div itemprop=&amp;quot;image&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/ImageObject&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;https://google.com/thumbnail1.jpg&amp;quot;/&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;url&amp;quot; content=&amp;quot;https://google.com/thumbnail1.jpg&amp;quot;&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;width&amp;quot; content=&amp;quot;800&amp;quot;&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;height&amp;quot; content=&amp;quot;800&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ImageObject&lt;/code&gt;の子で居なきゃいけないんだね。
さらに&lt;code&gt;width&lt;/code&gt;と&lt;code&gt;height&lt;/code&gt;も必須になってる。
前は要らなかったような記憶があるんだけど・・・。&lt;/p&gt;

&lt;h3 id=&#34;publisherプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;publisherプロパティ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;publisher&lt;/code&gt;はこう記載されている。
これは運営元の組織を指すのかな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div itemprop=&amp;quot;publisher&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/Organization&amp;quot;&amp;gt;
  &amp;lt;div itemprop=&amp;quot;logo&amp;quot; itemscope itemtype=&amp;quot;https://schema.org/ImageObject&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;https://google.com/logo.jpg&amp;quot;/&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;url&amp;quot; content=&amp;quot;https://google.com/logo.jpg&amp;quot;&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;width&amp;quot; content=&amp;quot;600&amp;quot;&amp;gt;
    &amp;lt;meta itemprop=&amp;quot;height&amp;quot; content=&amp;quot;60&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;meta itemprop=&amp;quot;name&amp;quot; content=&amp;quot;Google&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nameプロパティ:1cba147eb8c5721b87c65951056c9faa&#34;&gt;nameプロパティ&lt;/h3&gt;

&lt;p&gt;何故かこのエラーだけどうやっても消えない。
謎なので分かり次第追記しよう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この記事を書き終えてから再度試してみたら消えました。
Structured Data Testing Tool自体が改修中だったのだろうか。
どちらにせよこの辺はこれからも随時変わっていくポイントだろうから、
定期的にチェックと対応をしていかなきゃいけないですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プロダクションのWordPressを捨てHugoに移行した</title>
      <link>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</link>
      <pubDate>Thu, 10 Dec 2015 14:49:18 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/12/10/using-hugo-in-production/</guid>
      <description>

&lt;p&gt;あんまり仕事のことは書かないつもりだったんだけど、このブログの生成でもお世話になっている&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を結構本気で使ったのでそのことをまとめてみます。&lt;/p&gt;

&lt;h2 id=&#34;hugoをプロダクションで使った:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoをプロダクションで使った&lt;/h2&gt;

&lt;p&gt;いま僕が働いている会社では事業の一つとしてメディアを運営しています。
僕が入ったとき、それはWordPressで運用がなされていて、&lt;a href=&#34;http://www.advancedcustomfields.com/&#34;&gt;Advanced Custom Fields&lt;/a&gt;を使ったガチガチのカスタム具合でした。&lt;/p&gt;

&lt;p&gt;しかしありがちなことにプラグインの管理もなされず、構築した人は外部の人、つまり動いてはいるけどそれ以上でも以下でもなかったんですね。&lt;/p&gt;

&lt;p&gt;さらにライターさんの話を聞いてみれば「なんか入力欄がいっぱいあってライティングがめんどくさい」とのこと。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;誰も幸せになっていない状態&lt;/strong&gt;というわけですね。&lt;/p&gt;

&lt;p&gt;僕が初めてそれを見た時、まず思ったのは&lt;strong&gt;「触りたくない」&lt;/strong&gt;ということでした。&lt;/p&gt;

&lt;p&gt;WordPressはドメインとガチガチに紐づくし（プラグインでなんとかなるけど）、テーマのカスタマイズだとかのコストや、現状調査をするコストが無駄だと思ったんですね。&lt;/p&gt;

&lt;p&gt;また、Advanced Custom Fieldsを使っているということはテーマも特注でしょう。&lt;/p&gt;

&lt;p&gt;というわけでリプレースを提案しました。
快く受け入れてくれた社員の方々には本当に感謝しています。&lt;/p&gt;

&lt;h2 id=&#34;なぜhugoなのか:5f9546be55588508513a850a19b4c520&#34;&gt;なぜHugoなのか&lt;/h2&gt;

&lt;p&gt;やはりMarkdownは優秀だと思っていて、メディア程度の文章ならDBに突っ込むよりMarkdownでファイル管理したいなと思いました。&lt;/p&gt;

&lt;p&gt;というわけでライターさんには無理を言ってMarkdownを覚えてもらいました。
これも快く受け入れてくれたライターさんの度量の広さに感謝しています。&lt;/p&gt;

&lt;p&gt;正直僕はハナから静的サイトジェネレータを使う気でいて、候補に考えていたのはJekyllとHugoでした。
何故かと言うと、Jekyllはドキュメント量が期待できると思っていたし、Hugoはそもそも使い慣れてる点を評価したからです。&lt;/p&gt;

&lt;p&gt;しかしJekyllは使いませんでした。Octopressをやめた時同様、生成が遅すぎたんです。
約500超の記事生成に18秒ほどかかり、チューニングなどを検討するよりもやめたほうが早いと判断しました。&lt;/p&gt;

&lt;p&gt;というわけで案外さっくりとHugoに行き着くことになったわけです。&lt;/p&gt;

&lt;h2 id=&#34;運用体制のこと:5f9546be55588508513a850a19b4c520&#34;&gt;運用体制のこと&lt;/h2&gt;

&lt;p&gt;静的サイトジェネレータを使うということは何かしらの方法でMarkdownを取り込み、生成したHTMLをアップロードしなければなりません。&lt;/p&gt;

&lt;p&gt;とはいえ管理画面だとかを作ってMarkdownを吐き出させるのは無駄なコストにしか思えないし、
素直にMarkdownが書けてそのままHugoを動かす環境に取り込める仕組みを考える必要がありました。&lt;/p&gt;

&lt;p&gt;なるだけコードを書きたくなかったのです。&lt;/p&gt;

&lt;p&gt;僕の開発部ではBitBucketのプライベートレポジトリを活用しています。&lt;/p&gt;

&lt;p&gt;GitHubも同様で、SCMのホスティングサービスではGUIで直接ファイルをいじる機能があります。
実際これを使ったことはあまりないのですが、今回はこの機能に管理画面の代替品になってもらうことにしました。&lt;/p&gt;

&lt;p&gt;なのでライターさんはWordPressの管理画面を捨て、BitBucketを管理画面として使うことになるわけです。&lt;/p&gt;

&lt;p&gt;実際これでだいたいの運用は回っています。ですが1つだけ想定していなかったポイントがありました。&lt;/p&gt;

&lt;p&gt;それは&lt;strong&gt;画像のアップロードが出来ない&lt;/strong&gt;ことです。
記事に使いたい画像をGUIからアップすることが出来なかったのです。&lt;/p&gt;

&lt;p&gt;幸いこの問題は、デザイナさんがGitに慣れていたこともあり、SourceTreeから画像をアップしてくれることになりました。&lt;/p&gt;

&lt;p&gt;つくづく社員の方に恵まれていると思います。&lt;/p&gt;

&lt;h2 id=&#34;移行するためにやったこと:5f9546be55588508513a850a19b4c520&#34;&gt;移行するためにやったこと&lt;/h2&gt;

&lt;p&gt;では僕が大きく時間を割いたポイントをお話します。&lt;/p&gt;

&lt;p&gt;それは次の2点です。&lt;/p&gt;

&lt;h3 id=&#34;wordpressからのエクスポート:5f9546be55588508513a850a19b4c520&#34;&gt;WordPressからのエクスポート&lt;/h3&gt;

&lt;p&gt;既存記事をMarkdownとして取り出す必要がありました。
これはいろいろなツールを検討したのですが、結局最終的にはスクレイピングして力技で取得しました。&lt;/p&gt;

&lt;p&gt;Pythonで抽出を行ったのですが、使い捨てプログラムということで適当に書きすぎたこともあり、500記事の抽出に数分かかるような有様になりました。&lt;/p&gt;

&lt;p&gt;ちなみにHugo用の移行ツールも何種類かあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tools/#migration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Hugo - Tools&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;テーマの作成:5f9546be55588508513a850a19b4c520&#34;&gt;テーマの作成&lt;/h3&gt;

&lt;p&gt;Markdownが生成出来てしまえばあとはHugoのルールに乗っかるだけなので、サイトが形作られるのはあっというまでした。&lt;/p&gt;

&lt;p&gt;とはいえGolangのテンプレートの仕様に慣れがなかったため、初めは想定した動作をしてもらえずイライラする場面も多かったです。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの強み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの強み&lt;/h2&gt;

&lt;p&gt;僕が感じた強みはシンプルさでした。&lt;/p&gt;

&lt;p&gt;UNIX哲学にこんな言葉があります。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;全てのプログラムはフィルタとして振る舞うようにせよ。&lt;br /&gt;
Make every program a Filter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6&#34;&gt;UNIX哲学 - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;おそらくこれに該当するもっともな例はシェルだと思うのですが、実はHugoもまさにこれを体現しているようなもので、Markdownを一定のルールに従ってテーマというフィルタに通すだけのプログラムになっています。&lt;/p&gt;

&lt;p&gt;なのでそのルールさえ理解してしまえばテーマを作るのは容易で、約1週間程度でほぼ完成形につくり上げることが出来ました。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使うことの弱み:5f9546be55588508513a850a19b4c520&#34;&gt;Hugoを使うことの弱み&lt;/h2&gt;

&lt;p&gt;とはいえ静的サイトジェネレータだからこその弱みもあると思っています。&lt;/p&gt;

&lt;h3 id=&#34;テンプレートエンジンが難しい:5f9546be55588508513a850a19b4c520&#34;&gt;テンプレートエンジンが難しい&lt;/h3&gt;

&lt;p&gt;テンプレートの書き方によってはパフォーマンスがガッツリ落ちる時があり、たかが500記事でも18秒ほどかかってしまうこともありました。&lt;/p&gt;

&lt;p&gt;これではHugoの強みである速さを活かしきれてないことになってしまいますね。&lt;/p&gt;

&lt;p&gt;結局チューニングをしたものの、やはり企業として運営しているサイトのため要求も多く、現在は7秒程度で生成する状況で落ち着きました。&lt;/p&gt;

&lt;p&gt;ゆくゆくはせめて3秒以内に抑えたいとは思っています。&lt;/p&gt;

&lt;p&gt;また、個人的にGolangのテンプレートと相性が悪いようで、その点は結構苦労しました。&lt;/p&gt;

&lt;h3 id=&#34;よく読まれている記事が抽出出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;よく読まれている記事が抽出出来ない&lt;/h3&gt;

&lt;p&gt;これはもうどうしょうもないので、GoogleAnalyticsにアクセスしてJSONを吐き出しておくスクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;HugoはJSONを読み込んで記事を生成するような構成にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/datafiles/&#34;&gt;Hugo - Data Files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このデータファイルという機能は非常に優秀で、タグやカテゴリを英名 - 和名変換するためにも利用しています。簡易KVSですね。&lt;/p&gt;

&lt;h3 id=&#34;サムネイルの作成が出来ない:5f9546be55588508513a850a19b4c520&#34;&gt;サムネイルの作成が出来ない&lt;/h3&gt;

&lt;p&gt;これもどうしょうもないので、スクリプトを用意しました。&lt;/p&gt;

&lt;p&gt;Pythonで書けば数行で出来てしまうため、10分20分で実装出来たのはラッキーでした。&lt;/p&gt;

&lt;p&gt;これがないとPageSpeedInsightのスコアが大きく下がるため、見落とさずに対応できて良かったです。&lt;/p&gt;

&lt;h2 id=&#34;運用を始めてみて:5f9546be55588508513a850a19b4c520&#34;&gt;運用を始めてみて&lt;/h2&gt;

&lt;p&gt;僕の操作ミスでサービスダウンさせた場面は2度ほどありましたが、Hugoだから発生した問題は1つもありません。&lt;/p&gt;

&lt;p&gt;レスポンスタイムは大きく向上し、PageSpeedInsightもほぼ全ページが90点超えとなりました（これはHugo関係ないが）。&lt;/p&gt;

&lt;p&gt;しかしライターさんにMarkdownを覚えてもらったのはやはり少し気にかかっていて、Hugo特有のメタデータなどは出来る限りフォローに入るよう気をつけています。&lt;/p&gt;

&lt;p&gt;また、生成はcronで定時処理しており、その処理ログをSlackに流すようにしています。&lt;/p&gt;

&lt;p&gt;Slack側では「ERROR」という文言を含むメッセージが発せられた場合にアラートがあげられるようにしており、簡易的な監視ツールとして手軽に立ち上げられたのではないかと思っています。&lt;/p&gt;

&lt;p&gt;そして、この運用による恩恵もいくつかあります。&lt;/p&gt;

&lt;h3 id=&#34;プルリクエストが使えるようになった:5f9546be55588508513a850a19b4c520&#34;&gt;プルリクエストが使えるようになった&lt;/h3&gt;

&lt;p&gt;メディアということで大量の記事を抱えているわけですが、その個々の記事のクオリティを上げることも重要な作業です。&lt;/p&gt;

&lt;p&gt;この運用だとBitBucket上に記事データがあるため、プルリクエストをライターさんになげる運用ができるようになりました。&lt;/p&gt;

&lt;p&gt;ソーシャルコーディングならぬ、ソーシャルライティングですね。&lt;/p&gt;

&lt;h3 id=&#34;編集履歴が残るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;編集履歴が残るようになった&lt;/h3&gt;

&lt;p&gt;これはWordPressでも機能としてあるのかもしれませんが、Gitによる強力なバージョン管理が行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事ファイルがどのような変遷をたどってきたか、どの行を誰が書いたのかがわかるのは大きなメリットだと思います。&lt;/p&gt;

&lt;h3 id=&#34;記事の一括操作が出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;記事の一括操作が出来るようになった&lt;/h3&gt;

&lt;p&gt;記事データがテキストファイルで存在するため、一括置換が容易になりました。&lt;/p&gt;

&lt;p&gt;これまでもタグやカテゴリの設定しなおし等を行いたい場面があったようですが、そういった作業も人間の手を介さずに一瞬で行えるようになりました。&lt;/p&gt;

&lt;p&gt;記事を柔軟に扱うという点では、WordPressでの運用より10歩も20歩も前進出来たように思います。&lt;/p&gt;

&lt;p&gt;データをテキストファイルで保持できているので、エンジニアとしてもプラシーボ的な安心があります。&lt;/p&gt;

&lt;h3 id=&#34;校正が自動化出来るようになった:5f9546be55588508513a850a19b4c520&#34;&gt;校正が自動化出来るようになった&lt;/h3&gt;

&lt;p&gt;文章を扱うサービスということもあり、ライティングルールを定めています。&lt;/p&gt;

&lt;p&gt;とはいえ現状どうかというと、結構な割合で守られていません。
しかしこれは書き手のチェックに委ねられていたため、しかたのないことだと思います。&lt;/p&gt;

&lt;p&gt;今回はテキストファイルとしてデータがあるので、正規表現でチェック出来るような校正はシェル化出来ました。&lt;/p&gt;

&lt;p&gt;これは毎週金曜日の夕方に処理されるようになっており、アラートが上がった記事はSlackに通知されるようになっています。&lt;/p&gt;

&lt;p&gt;また、サイズの大きい画像などが格納された場合も同様で、この処理の際にアラートがあがるようにしてあります。&lt;/p&gt;

&lt;h2 id=&#34;終わりに:5f9546be55588508513a850a19b4c520&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;というわけでWordPressから静的サイトジェネレータへの移行を会社でおこなった話を書きました。&lt;/p&gt;

&lt;p&gt;現在は非常に安定して運用が出来ており、なおかつ非常に早いスピードで改修が出来ています。&lt;/p&gt;

&lt;p&gt;WordPressでの運用に手こずっている方は、一度静的サイトジェネレータでの運用も検討してはいいのではないでしょうか。&lt;/p&gt;

&lt;p&gt;素晴らしきプロダクトである&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;と開発者である&lt;a href=&#34;http://spf13.com/&#34;&gt;Steve Francia氏&lt;/a&gt;に感謝。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELB越しのLaravelでHTTPSを使おうとして困った話</title>
      <link>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</link>
      <pubDate>Wed, 04 Nov 2015 12:18:07 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/11/04/using-https-in-laravel/</guid>
      <description>

&lt;h2 id=&#34;ssl証明書はelbに設置する:56aef34fa740ed018dee02e37b63f347&#34;&gt;SSL証明書はELBに設置する&lt;/h2&gt;

&lt;p&gt;何が普通なのか知らないけど、今回立ち上げた構成では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(80)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;っていう構成にしていました（するつもりだった）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/cloud/aws/aws-beginner-elb-ssl/&#34;&gt;【初心者向け】ELBにSSL証明書をインストールする ｜ Developers.IO&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;問題はリリース当日に:56aef34fa740ed018dee02e37b63f347&#34;&gt;問題はリリース当日に&lt;/h2&gt;

&lt;p&gt;リリースしてみたら何やら証明書のエラーが出てる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Your connection to this site is private, but someone on the network might be able to change the look of the page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このページはSSL証明書が効いてるんだけど、ネットワーク上の何かがそうじゃなくしちゃうかもね？&lt;/p&gt;

&lt;p&gt;原因は&lt;strong&gt;httpsじゃないURLに飛ばすformタグがページに存在する&lt;/strong&gt;せいでした。
開発環境でもオレオレ証明書を用意したりしてHTTPSで通信するようにしておくべきでした。&lt;/p&gt;

&lt;h2 id=&#34;laravelのrouteメソッド:56aef34fa740ed018dee02e37b63f347&#34;&gt;Laravelのrouteメソッド&lt;/h2&gt;

&lt;p&gt;URLのレンダリングはLaravelの&lt;code&gt;route&lt;/code&gt;メソッドを使っています。
この機能は結構気に入っている。後でURLを変えたいって時にある程度コストを軽減してくれる（んじゃないか）と思っているから。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://laravel.com/docs/5.1/routing#named-routes&#34;&gt;HTTP Routing - Laravel - The PHP Framework For Web Artisans&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でも今回はこのメソッドが&lt;strong&gt;HTTPのURLをレンダリングした&lt;/strong&gt;せいで問題が起こりました。&lt;/p&gt;

&lt;h2 id=&#34;laravelでhttpsのurlを取り扱う:56aef34fa740ed018dee02e37b63f347&#34;&gt;LaravelでHTTPSのURLを取り扱う&lt;/h2&gt;

&lt;p&gt;LaravelのRoutingはこんな感じなんだけど、こう記述すれば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPSのみを許容することも出来るらしい。さらには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, [&#39;https&#39;, &#39;as&#39; =&amp;gt; &#39;home&#39;, function() { return view(&#39;home.index&#39;); }]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておけば&lt;code&gt;route&lt;/code&gt;メソッドでレンダリングされるURLもHTTPSになる。&lt;/p&gt;

&lt;h2 id=&#34;そして問題が起きる:56aef34fa740ed018dee02e37b63f347&#34;&gt;そして問題が起きる&lt;/h2&gt;

&lt;p&gt;先ほどの通り、LaravelでHTTPSの設定をすると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPSのみを受け付ける&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLのをレンダリングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事になります。&lt;/p&gt;

&lt;p&gt;今回ELBの奥にあるLaravelが載ったインスタンスはnginxが80ポートを待ち受けています。
なのでHTTPSだけを許容されると困るんですね、443で通信しなきゃいけない。&lt;/p&gt;

&lt;h2 id=&#34;解決策:56aef34fa740ed018dee02e37b63f347&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;わがままを言えば&lt;strong&gt;LaravelがHTTPを受け付けて&lt;code&gt;route&lt;/code&gt;メソッドがHTTPSのURLをレンダリングする&lt;/strong&gt;と嬉しい。
けどその方法は見つからず（構成としてナンセンスなんだろう）、ELBとLaravelが載ったインスタンスの両方にSSL証明書を設置することにしました。&lt;/p&gt;

&lt;p&gt;というわけでこういう形。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CLIENT -&amp;gt; ELB(80 or 443) -&amp;gt; WEB(443)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;めでたしめでたし。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo0.15でSummaryが日本語に対応するっぽい</title>
      <link>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</link>
      <pubDate>Fri, 09 Oct 2015 22:15:51 +0900</pubDate>
      
      <guid>http://yet.unresolved.xyz/blog/2015/10/09/hugo-support-cjk-language/</guid>
      <description>&lt;p&gt;会社のMacにも&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;をセットアップしてあるんだけど、テーマの編集とかの続きを家でやろうとしたら&lt;code&gt;.Summary&lt;/code&gt;が異なる挙動をしてることに気づいた。&lt;/p&gt;

&lt;p&gt;どうやらHugoのバージョンによって、日本語の解釈がうまくいったりいかなかったりするみたい。&lt;/p&gt;

&lt;p&gt;ソースを読んでたらどうやら日本語のサポートもされてるようだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/blob/823334875d396bdc15770c335c2029a01a7ef2ce/hugolib/page.go&#34;&gt;hugo/page.go at 823334875d396bdc15770c335c2029a01a7ef2ce · spf13/hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;随分追ってみたんだけど&lt;code&gt;Metadata&lt;/code&gt;が何を返すのかよくわからず、コミットを見てたらCJKうんたらが追加されたのは最近っぽいことがわかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/commit/823334875d396bdc15770c335c2029a01a7ef2ce?diff=split&#34;&gt;WordCount and Summary support CJK Language · spf13/hugo@8233348&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PRのコメントを読んでみると、configになんか書けばなんとかなりそうな雰囲気。&lt;/p&gt;

&lt;p&gt;でもなんで会社のMacは期待した挙動をしてるんだ？&lt;/p&gt;

&lt;p&gt;Goのバージョンが新しいから？&lt;/p&gt;

&lt;p&gt;今のHugoなら&lt;code&gt;config.yaml&lt;/code&gt;にこう書けば日本語もきちんと処理をするようになってた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;HasCJKLanguage: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これできちんと70文字？70word？でSummaryが生成されるようになる。&lt;/p&gt;

&lt;p&gt;静的サイトジェネレータも実行環境によって挙動が変わることがあると少し面倒だなあ。&lt;/p&gt;

&lt;p&gt;Golangは他人の書いたソースが読みやすくて良い。&lt;/p&gt;

&lt;p&gt;書くのはあんまりすきじゃないけど。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Search Consoleから被リンクを辿ってたら以下の記事にたどり着いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://deprode.net/log/logs/2015-11-05/&#34;&gt;2015 11 05 - log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ブログのauthor様が仰るとおり、僕のHugoの環境はStableじゃなくてDevです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15-DEV&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;僕のブログのせいで戸惑わせてしまい、大変失礼しました。&lt;/p&gt;

&lt;p&gt;このことに伴い、記事のタイトルを&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HugoのSummaryが日本語に対応した&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;から&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo0.15でSummaryが日本語に対応するっぽい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;に変更しました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
