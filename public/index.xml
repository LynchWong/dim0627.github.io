<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unresolved </title>
    <link>http://yet.unresolved.xyz/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2015-01-15 21:12:52 &#43;0900 JST</updated>

    
      
        <item>
          <title>Clojureで新卒の女の子を射止めた話</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/15/challenged-to-online-hackathon-of-paiza/</link>
          <pubDate>Thu, 15 Jan 2015 21:12:52 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/15/challenged-to-online-hackathon-of-paiza/</guid>
          <description>

&lt;p&gt;何やらプログラムの問題を解くと可愛い女の子とハネムーンにいけるとかいう企画を&lt;a href=&#34;http://paiza.jp/&#34;&gt;paiza&lt;/a&gt;が開催していたらしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://paiza.jp/poh/enkoi&#34;&gt;マンガ版「エンジニアでも恋がしたい！」〜転職初日にぶつかった女の子が同僚だった件〜｜paizaオンラインハッカソン4 Lite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;会社の子からすすめられたのをずっと放置してたんだけど実際やってみたらなかなか面白かった。&lt;/p&gt;

&lt;p&gt;ちなみに実際に手に入るのはハネムーンじゃなくてねるねるねるねかラズパイだったらしい。&lt;/p&gt;

&lt;p&gt;ねるねるねるね・・・。&lt;/p&gt;

&lt;h2 id=&#34;problem-1:efdfd34ee3c2df97a027c1bccd3ee9c8&#34;&gt;Problem 1&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在庫計算プログラムを作成してください。改行区切りで N 個の商品の各在庫数 S が入力されるので、その合計を出力して下さい。
解答次第でこの後のストーリーが変わります！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;入力される値&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;入力は標準入力にて以下のフォーマットで与えられます。
N
S_1
S_2
・
・
S_N&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;すべてのテストケースにおいて、以下の条件をみたします。
1 ≦ N ≦ 100
0 ≦ S_i ≦ 100&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;期待する出力&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;全ての商品の在庫数を足した数を出力してください。最後は改行し、余計な文字、空行を含んではいけません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ふむふむ。&lt;/p&gt;

&lt;p&gt;ちなみにpaizaで使えるClojureのREPLはベータ版とのことで、変な挙動をするかも〜とのこと。&lt;/p&gt;

&lt;p&gt;入力の受け方はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;オレの回答はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))
(defn p1 [] (reduce + (map #(Integer/parseInt %) (rest in))))
(print (p1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普通に&lt;code&gt;reduce&lt;/code&gt;で回しただけ。&lt;/p&gt;

&lt;h2 id=&#34;problem-2:efdfd34ee3c2df97a027c1bccd3ee9c8&#34;&gt;Problem 2&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;改行区切りで N 個の各商品の在庫数 S が入力されるので、その合計を出力して下さい。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;入力される値&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;入力は以下のフォーマットで与えられる。
N
T_1 S_1 P_1
T_2 S_2 P_2
・
・
・
T_N S_N P_N&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;すべてのテストケースにおいて、以下の条件をみたします。
1 ≦ N ≦ 100
1 ≦ T_i ≦ 100
0 ≦ S_i ≦ 100
1 ≦ P_i ≦ 10,000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;期待する出力&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在庫数を最低限必要な在庫数を満たすために必要な金額の合計を出力してください。
最後は改行し、余計な文字、空行を含んではいけません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;問題文をよく読まずに解いて何度かミスりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))
(defn p2 []
  (let [in (map #(.split % &amp;quot; &amp;quot;) (rest in))]
    (loop [l in res 0]
              (if (empty? l) res
                (let [[t s p] (map #(Integer/parseInt %) (first l))]
                  (recur (rest l) (+ res (if (&amp;gt; t s) (* (- t s) p) 0))))))))
(print (p2))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;単純に&lt;code&gt;if&lt;/code&gt;で条件かけながら再帰させた。&lt;/p&gt;

&lt;h2 id=&#34;problem-3:efdfd34ee3c2df97a027c1bccd3ee9c8&#34;&gt;Problem 3&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;区間合計点数の最大値を出力するプログラムを作成して、ゲームを完成させてください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;入力される値&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;入力は以下のフォーマットで与えられる。
t n
m_1
m_2
m_3
&amp;hellip;
m_n&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;すべてのテストケースにおいて、以下の条件をみたします。
1 ≦ t ≦ n ≦ 300,000
0 ≦ m_i ≦ 10,000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;期待する出力&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;区間合計点数の最大値を出力せよ。
最後は改行し、余計な文字、空行を含んではならない。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これはタイムアウトで何度も苦しんだ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;partition-all&lt;/code&gt;で分割したものを&lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;reduce&lt;/code&gt;で合算して&lt;code&gt;apply&lt;/code&gt; &amp;amp; &lt;code&gt;max&lt;/code&gt;っていう何も考えなさすぎるロジックにしたのが悪いんだけど・・・。&lt;/p&gt;

&lt;p&gt;通ったのはこれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def in (line-seq (java.io.BufferedReader. *in*)))
(defn p3 []
  (let [[len c] (map #(Integer/parseInt %) (.split (first in) &amp;quot; &amp;quot;))
        smr (reductions + (map #(Integer/parseInt %) (rest in)))]
    (if (= len c) (last smr)
      (loop [l smr sfxl (drop len l) res 0]
        (if (empty? sfxl) res
          (recur (rest l) (rest sfxl) (max (- (first sfxl) (first l)) res)))))))
(print (p3))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無理だなーって&lt;a href=&#34;http://clojure.org/cheatsheet&#34;&gt;Clojure - cheatsheet&lt;/a&gt;見ながらぐだぐだしてたら&lt;code&gt;reductions&lt;/code&gt;でなんとかなりそうな事に気づいた。&lt;/p&gt;

&lt;p&gt;最初にどっと重い処理になるんじゃないかなと思って不安もあったけど、そんなことないのかな。無事通ったので良かったです。&lt;/p&gt;

&lt;p&gt;計算結果だしちゃえばあとは再帰させながら区間合計を算出 &amp;amp; 最大値を抽出でなんとか。&lt;/p&gt;

&lt;h2 id=&#34;やってみて:efdfd34ee3c2df97a027c1bccd3ee9c8&#34;&gt;やってみて&lt;/h2&gt;

&lt;p&gt;Clojureを始めてからずっと感じてる事だけど、アルゴリズムを考える力が弱いなあと思う。&lt;/p&gt;

&lt;p&gt;Webだとそれで乗り切れる部分が多かったんだろうけど、こういった問題を解いて地力をつけることも大切だなあと感じた。&lt;/p&gt;

&lt;p&gt;多分Clojureの界隈で有名な方々が組む答えはまた違うんだろうなあ。&lt;/p&gt;

&lt;p&gt;ぜひそういうのも見てみたいけど、調べてみたらあんまり解いてる人とか公開してる人がいない感じだった。&lt;/p&gt;

&lt;p&gt;ちなみにラズパイとかは期間が過ぎてるのでもらえません。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Clojureのテンプレートエンジンについて</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/14/use-template-engine-in-clojure/</link>
          <pubDate>Wed, 14 Jan 2015 01:01:39 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/14/use-template-engine-in-clojure/</guid>
          <description>

&lt;p&gt;練習のためにClojureでいくつかのWebアプリを作ってみたんだけど、どの言語でもなんだかんだ手間になるテンプレートの扱いについてまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;enlive-https-github-com-cgrand-enlive:d03bd055194b84467476c0228f17c156&#34;&gt;&lt;a href=&#34;https://github.com/cgrand/enlive&#34;&gt;Enlive&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/B007Q4T040/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B007Q4T040&amp;linkCode=as2&amp;tag=unresolved-22&#34;&gt;Clojure Programming&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=unresolved-22&amp;l=as2&amp;o=9&amp;a=B007Q4T040&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;display:inline;&#34; /&gt;を執筆されたChristophe Grand氏のライブラリ。&lt;/p&gt;

&lt;p&gt;CSSのセレクタでバインドを行うという、すごく画期的な方法でテンプレート機能を実現させてる。&lt;/p&gt;

&lt;p&gt;例えばこんな感じでテンプレートのHTMLがあれば、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;This is a title placeholder&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうやってバインドできる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(html/deftemplate main-template &amp;quot;templates/application.html&amp;quot;
  []
  [:head :title] (html/content &amp;quot;Enlive starter kit&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTLMが素でかけるから、デザイナさんとの協業がすごく捗りそう。&lt;/p&gt;

&lt;p&gt;サンプルのHTMLをそのまま使って、Clojure側でサンプルの値を置き換えたりリピートさせたりすれば済んじゃう。&lt;/p&gt;

&lt;p&gt;今回は一人で使ったからそういう場面はなかったけど、サーバを起動しなくてもデザインが見れる &amp;amp; 直せるっていうのは便利な場面があるかなあと。&lt;/p&gt;

&lt;p&gt;ただ、結構CSSを書いたりしてるほうだけど、バインドの学習コストは意外と高いなと思った。&lt;/p&gt;

&lt;p&gt;効率的に手早くバインドさせるには、Enliveを使う想定のHTML構造にする必要がありそうな印象だった。&lt;/p&gt;

&lt;p&gt;覚えてしまえばものすごく活躍しそう。&lt;/p&gt;

&lt;h2 id=&#34;hiccup-https-github-com-weavejester-hiccup:d03bd055194b84467476c0228f17c156&#34;&gt;&lt;a href=&#34;https://github.com/weavejester/hiccup&#34;&gt;Hiccup&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/weavejester/compojure&#34;&gt;Compojure&lt;/a&gt;や&lt;a href=&#34;https://github.com/weavejester/environ&#34;&gt;Environ&lt;/a&gt;、&lt;a href=&#34;https://github.com/weavejester/lein-ring&#34;&gt;Ring&lt;/a&gt;などの作者、James Reeves氏のライブラリ。&lt;/p&gt;

&lt;p&gt;HTMLを完全にClojureでラップしてるので、ClojureだけでWebアプリを完結させられる。&lt;/p&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (html [:script])
&amp;quot;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&amp;quot;
user=&amp;gt; (html [:p])
&amp;quot;&amp;lt;p /&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clojureのコンパイルが走るので、タグの不整合(閉じタグがないとか)が一切起こらないっていうのは魅力だと思う。&lt;/p&gt;

&lt;p&gt;欠点を挙げるとすれば、改行なしでHTMLが出力されるからブラウザからソースを見るのが厳しい。ていうか無理。&lt;/p&gt;

&lt;p&gt;設定でなんとか出来るんだろうか？&lt;/p&gt;

&lt;p&gt;でもChromeの開発者ツールとか使えばフォーマットして表示してくれるし、全然クリティカルな問題じゃない。&lt;/p&gt;

&lt;p&gt;もう1点は、例えば広告のスクリプトみたいにコピペで貼り付けたい文字列とかの出力がちょっとめんどう。&lt;/p&gt;

&lt;p&gt;Hiccupの世界にただのタグを入れるのは見栄えも悪いし、オレはこんな感じで外だしすることで対応した。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def partial-ad-big (str &amp;quot;&amp;lt;script async src=&amp;quot;&amp;quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;ins class=&amp;quot;&amp;quot;adsbygoogle&amp;quot;&amp;quot;
     style=&amp;quot;&amp;quot;display:inline-block;width:728px;height:90px&amp;quot;&amp;quot;
     data-ad-client=&amp;quot;&amp;quot;ca-pub-421xxxxxxxxxx76&amp;quot;&amp;quot;
     data-ad-slot=&amp;quot;&amp;quot;111xxxxxxxx42&amp;quot;&amp;quot;&amp;gt;&amp;lt;/ins&amp;gt;
&amp;lt;script&amp;gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&amp;lt;/script&amp;gt;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;個人的にはHiccupのほうがさくっと理解できてさくっと書けたかな。&lt;/p&gt;

&lt;p&gt;ループ処理もClojureがかければそのまま書けちゃうし。&lt;/p&gt;

&lt;p&gt;ClojureとHTMLの親和性はすごく高いと思っていて、Hiccupはそれを最大限に活用することが出来てるなあという感じ。&lt;/p&gt;

&lt;p&gt;ある言語を他の言語でラップするのって再学習が必要だし非効率で嫌いだったんだけど、HiccupはHTMLの冗長さが減るし、学習する価値のあるライブラリだと思った。&lt;/p&gt;

&lt;p&gt;ゆくゆくはどっちもしっかり使えるようになりたい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Python on GAEで3rdパーティライブラリを使う</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/12/use-the-third-party-library-in-python-on-gae/</link>
          <pubDate>Mon, 12 Jan 2015 00:19:33 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/12/use-the-third-party-library-in-python-on-gae/</guid>
          <description>

&lt;p&gt;ひさびさに&lt;a href=&#34;https://cloud.google.com/appengine/&#34;&gt;Google App Engine&lt;/a&gt;を使おうとしたらGoogle Cloud Platformだかなんだかでいろいろと変わってて戸惑った。&lt;/p&gt;

&lt;p&gt;何かっていうと3rd Partyのライブラリを使うときにどうやるんだっけなっていうこと。&lt;/p&gt;

&lt;p&gt;昔は&lt;code&gt;requirements.txt&lt;/code&gt;でうまいことやってくれなかったけ？違う？&lt;/p&gt;

&lt;p&gt;普通にBeautifulSoupとか使った気するんだけど、どうやってたんだろうか・・・。&lt;/p&gt;

&lt;h2 id=&#34;標準で使えるライブラリ:02454e4cc49b95e0abcafafbdc302335&#34;&gt;標準で使えるライブラリ&lt;/h2&gt;

&lt;p&gt;Google App Engine側に導入されてるライブラリがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/appengine/docs/python/tools/libraries27&#34;&gt;Third-party Libraries in Python 2.7 - Python — Google Cloud Platform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本的なやつとかWAFで使うやつしか入ってないみたい。&lt;/p&gt;

&lt;h2 id=&#34;載ってないやつは使えない:02454e4cc49b95e0abcafafbdc302335&#34;&gt;載ってないやつは使えない？&lt;/h2&gt;

&lt;p&gt;そんなことはない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14850853/how-to-include-third-party-python-libraries-in-google-app-engine&#34;&gt;How to include third party Python libraries in Google App Engine? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;でもずいぶん原始的な方法で、libディレクトリを作ってそこに入れなよって見解らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;default git:(master)$ tree -L 2
.
|-- CONTRIB.md
|-- LICENSE
|-- README.md
|-- app.yaml
|-- cron.yaml
|-- favicon.ico
|-- lib
|   |-- feedparser.egg-info
|   |-- feedparser.py
|   |-- feedparser.pyc
|   |-- feedparsertest.py
|   |-- sgmllib3.py
|   `-- tests
|-- main.py
|-- main.pyc
`-- temp.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パスも追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
sys.path.insert(0, &#39;lib&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は手動でzip落として入れちゃったけど、&lt;code&gt;pip install -t lib&lt;/code&gt;で入れてくのが楽かな。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hugoでマルチバイトのタイトルをスマートに使う方法</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/</link>
          <pubDate>Wed, 07 Jan 2015 23:56:32 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/07/how-to-use-multibyte-title-in-hugo/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;でちょっと困ったこと。&lt;/p&gt;

&lt;p&gt;オレは&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;から移行してきたからなおさらなんだけど、記事のタイトルがURLにされてしまう。&lt;/p&gt;

&lt;p&gt;あ、オレは&lt;code&gt;config.yaml&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permalinks:
  post: /blog/:year/:month/:day/:title/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を設定してるからなんだけど。&lt;/p&gt;

&lt;p&gt;そうすると日本語とかのマルチバイト文字を使うとパーセントエンコードが走って結構悲惨なことになる。&lt;/p&gt;

&lt;p&gt;というかオレの環境だとリンクがきちんと飛べなかった・・・。&lt;/p&gt;

&lt;p&gt;Octopressは記事のファイル名がURLになってたから、ファイル名さえ英語なら問題なかったんだよね。&lt;/p&gt;

&lt;p&gt;なので今回やった対処法をメモっとく。&lt;/p&gt;

&lt;h2 id=&#34;urlの構成と対応策:305b326c361986ca7e3bc18a2fbce87d&#34;&gt;URLの構成と対応策&lt;/h2&gt;

&lt;p&gt;実は移行の時にちょっと手を加えたりしてたんだけど、あんまり綺麗な方法じゃなかったので納得が行ってなかった。&lt;/p&gt;

&lt;p&gt;そんな時に公式を読んでたら、&lt;a href=&#34;http://gohugo.io/content/organization/&#34;&gt;Content Organization&lt;/a&gt;の項にこんな図が。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-01-07/permalink.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-01-07/permalink.png&#34; class=&#34;image&#34; alt=&#34;permalink&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どうやらオレが困ってたURLのタイトル部は&lt;code&gt;slug&lt;/code&gt;と呼ばれる部分らしい。&lt;/p&gt;

&lt;p&gt;ならこんな風に記事内で毎回指定してしまえば綺麗に話が済むのではないか？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
tags: [&amp;quot;hugo&amp;quot;, &amp;quot;golang&amp;quot;]
comments: true
date: 2015-01-07T23:56:32+09:00
eyecatch: &amp;quot;hugo.png&amp;quot;
slug: &amp;quot;how-to-use-multibyte-title-in-hugo&amp;quot;
title: &amp;quot;Hugoでマルチバイトのタイトルをスマートに使う方法&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったらうまくいった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.yaml&lt;/code&gt;はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;permalinks:
  post: /blog/:year/:month/:day/:slug/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なのでOctopressから移行した人はこの方法も検討するといいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt;した時に生成されるテンプレートは&lt;code&gt;archetypes&lt;/code&gt;ディレクトリに配置出来るから、そこでやっておくとよし。&lt;/p&gt;

&lt;p&gt;しかし移行時に書き足すのが面倒なんだよなあ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ブログをOctopressからHugoに移行した</title>
          <link>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</link>
          <pubDate>Sun, 04 Jan 2015 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/01/04/migrate-blog-to-hugo-from-octopress/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;でのブログもずいぶん慣れてきたところで&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;に移行しました。&lt;/p&gt;

&lt;p&gt;一晩徹夜して、カスタマイズからGitHub Pagesでの公開までいけたのでいろいろまとめてみる。&lt;/p&gt;

&lt;h2 id=&#34;なぜ移行:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;なぜ移行？&lt;/h2&gt;

&lt;p&gt;ずっとテーマのカスタマイズをしたいと思ってたんだけど、Octopressのテーマの構成がいつまでたっても理解出来なかったのが一番の理由。&lt;/p&gt;

&lt;p&gt;テーマというか、テンプレートの構成かな・・・。&lt;/p&gt;

&lt;p&gt;Google Adsenseとかも導入したんだけど、そんな些細な修正ですらちょっと辛い感じになってしまってたので、いっそ土台ごと変えることに。&lt;/p&gt;

&lt;h2 id=&#34;hugoに移行するメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;Hugoに移行するメリット&lt;/h2&gt;

&lt;p&gt;せっかくだし移行してみてよかったことをまとめてみます。&lt;/p&gt;

&lt;h3 id=&#34;とにかくスピーディ:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;とにかくスピーディ&lt;/h3&gt;

&lt;p&gt;何をするにも動作がめちゃくちゃ速い。&lt;/p&gt;

&lt;p&gt;記事数がそんなに多くないからOctopressでも不満はなかったんだけど、今考えればとてつもない遅さだったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはほんとに一瞬で記事を生成するし、サーバの起動も一瞬なのでライブリロードがいらないくらい。使ってるけど笑&lt;/p&gt;

&lt;p&gt;HugoはGolangで出来てるそうで、それが要因なのかはわからないけど、これまで触ってきた開発用サーバの中でも類を見ない速さで作業ができます。&lt;/p&gt;

&lt;h3 id=&#34;構造がシンプル:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;構造がシンプル&lt;/h3&gt;

&lt;p&gt;トップページ、記事一覧、記事個別のページ、って感じで綺麗に区分けがされてる。&lt;/p&gt;

&lt;p&gt;テーマがいくつかあるんだけど、どれも必要のないネストとかしてないし、そこからカスタマイズがしやすい。&lt;/p&gt;

&lt;p&gt;あと、カテゴリとかタグみたいに、記事間を横断的に集計したい場合もすごく簡単に出来る。&lt;/p&gt;

&lt;p&gt;すごく簡単すぎてどうなってるのかわからなくなることがあるけど笑&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/taxonomies/overview/&#34;&gt;Taxonomy Overview&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;無駄な物がない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;無駄な物がない&lt;/h3&gt;

&lt;p&gt;Hugoは&lt;code&gt;new&lt;/code&gt;で作った時に基礎になるテンプレートがないくらい、標準装備が少ない。&lt;/p&gt;

&lt;p&gt;まあそれじゃテスト実行さえ出来ないからどうなんだっていう人もいると思うけど笑&lt;/p&gt;

&lt;p&gt;オレは結構0から作りたい方なので、これくらいすっきりさせてくれてたほうが嬉しかった。&lt;/p&gt;

&lt;h2 id=&#34;移行によるデメリット:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行によるデメリット&lt;/h2&gt;

&lt;p&gt;とはいえ全てがよかったわけではなくて、途中で何度か引き返そうと思う場面もあったので、そこも書いとく。&lt;/p&gt;

&lt;h3 id=&#34;自分でやらなきゃいけないことが多い:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;自分でやらなきゃいけないことが多い&lt;/h3&gt;

&lt;p&gt;やっぱりOctopressはRakeタスクでかなり囲い込みが出来てたなあと思う。&lt;/p&gt;

&lt;p&gt;OctopressをGitHub Pagesで公開する場合、masterとsourceブランチが作成されるんだけど、あれは運用面でも非常に楽だったなあと思う。&lt;/p&gt;

&lt;p&gt;Hugoはデプロイは一切触れずに、本当に静的な資材の生成しかしないから、その辺は自分でやらなきゃいけない。&lt;/p&gt;

&lt;p&gt;だから初めての人には辛いところがあるかも。&lt;/p&gt;

&lt;p&gt;あ、あとDISQUSとかもテーマによってはIDを指定するだけで使えたり、自分でタグを埋め込まなきゃ使えなかったりする。&lt;/p&gt;

&lt;p&gt;記事のカテゴリ分けとかタグ付けについても自分で設定しなきゃいけない。公式に手順はあるけど。&lt;/p&gt;

&lt;p&gt;もちろんSNSのリンクも自分で配置。&lt;/p&gt;

&lt;h3 id=&#34;日本語タイトルが使いづらい:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日本語タイトルが使いづらい&lt;/h3&gt;

&lt;p&gt;Octopressの時は、記事のMarkdownファイルのファイル名は英語にして、ファイル内のtitleで日本語を設定してました。&lt;/p&gt;

&lt;p&gt;Hugoはファイル内のtitleで記事個別ページのURLを生成するから、マルチバイトが入るといろいろ面倒なことになっちゃった。&lt;/p&gt;

&lt;p&gt;あと、これまでのSEOをゼロにしたくないからURLは変えたくなくて、やっぱりURLでは英語のタイトルを使いたい。&lt;/p&gt;

&lt;p&gt;これはもうどうしょうもなくて、ファイル内に英語タイトルと日本語タイトルを設定出来るようにした。&lt;/p&gt;

&lt;p&gt;シェルで一括操作出来るような内容でもないので、ここは手作業。&lt;/p&gt;

&lt;h3 id=&#34;テーマが少ない:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;テーマが少ない&lt;/h3&gt;

&lt;p&gt;あるものでなんとかしたい、って人には深刻かと笑&lt;/p&gt;

&lt;p&gt;ブログ自体に注力せずに記事を書くことに注力したい、って人はOctopressかHexoかそもそもHatenaとかの方がいいのかもしれない。&lt;/p&gt;

&lt;h2 id=&#34;移行において:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;移行において&lt;/h2&gt;

&lt;p&gt;記事の移行と、なるべく移行前と移行後でブログを書く作業が変わらないように工夫した点をまとめる。&lt;/p&gt;

&lt;h3 id=&#34;日付フォーマットの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;日付フォーマットの変更&lt;/h3&gt;

&lt;p&gt;Octopressと違ってHugoでは日付のフォーマットを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date: &amp;quot;2013-10-27&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じにしなきゃいけないので、先人の知恵を使って置換する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/\([0-9]\+-[0-9]\+-[0-9]\+\).*$/&amp;quot;\1&amp;quot;/&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;画像タグの変更:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;画像タグの変更&lt;/h3&gt;

&lt;p&gt;Octopressではこう書いてたけど&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;[{% img /images/2015-01-01/beanstalkDockerApp.png &#39;beanstalkDockerApp&#39; &#39;beanstalkDockerApp&#39; %}](/images/2015-01-01/beanstalkDockerApp.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugoでは画像タグHTMLベタにするので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/{%.*img.*\/images\/\(.*\)\/\(.*\) \(.*\) .* %}/&amp;lt;img src=\&amp;quot;\/images\/\1\/\2&amp;quot; class=\&amp;quot;image\&amp;quot; alt=\&amp;quot;\3\&amp;quot;&amp;gt;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったら&lt;code&gt;alt&lt;/code&gt;がおかしくなったので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find . -type f -exec sed -i &amp;quot;&amp;quot; -e &#39;s/alt=\&amp;quot;&#39;\&#39;&#39;\(.*\)&#39;\&#39;&#39;\&amp;quot;/alt=\&amp;quot;\1\&amp;quot;/g&#39; {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedでシングルクォート置換するのってちょっと面倒なんだね・・・。&lt;/p&gt;

&lt;h2 id=&#34;デプロイと記事作成のシェル化:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;デプロイと記事作成のシェル化&lt;/h2&gt;

&lt;p&gt;今回もGitHub Pagesで運用するけど、ブランチ構成は前と変わらず&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;source&lt;/code&gt;でやりたいので、デプロイはシェルにまとめる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project. 
hugo -t flatten

# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin source
git subtree push --prefix=public origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;記事のファイル名も日付付与を継続したいので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

title=`echo $1 | tr &amp;quot;A-Z&amp;quot; &amp;quot;a-z&amp;quot;`
title=`echo $title | tr &amp;quot; &amp;quot; &amp;quot;-&amp;quot;`
title=`echo $title | sed &amp;quot;s/\.//g&amp;quot;`
hugo new post/&amp;quot;`date +%Y-%m-%d`-$title.markdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで。&lt;/p&gt;

&lt;p&gt;ひと段落したけどまだまだ細々といじらなきゃだろうなー。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:6a8fd8223fd13a59d819b0862af33f03&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/tutorials/github_pages_blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nathanleclaire.com/blog/2014/12/22/migrating-to-hugo-from-octopress/&#34;&gt;Migrating to Hugo From Octopress&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ClojureのWebアプリをDocker &#43; Beanstalkで動かす</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/31/clojure-on-docker-and-aws-beanstalk/</link>
          <pubDate>Wed, 31 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/31/clojure-on-docker-and-aws-beanstalk/</guid>
          <description>

&lt;p&gt;たぶんこういうのはドキュメント読んでもわからないので、とにかく一通りの流れを実践してみる。&lt;/p&gt;

&lt;h2 id=&#34;imageの取得:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;Imageの取得&lt;/h2&gt;

&lt;p&gt;面倒なので&lt;a href=&#34;https://hub.docker.com/account/signup/&#34;&gt;Docker Hub&lt;/a&gt;からClojureが動く環境を持ってくる。&lt;/p&gt;

&lt;p&gt;オフィシャルリポジトリとやらがあったので、それを使います。&lt;/p&gt;

&lt;p&gt;Leiningenとか一式が入ってるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/_/clojure/&#34;&gt;clojure&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ローカルでの動作確認:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;ローカルでの動作確認&lt;/h2&gt;

&lt;p&gt;とりあえず世界に挨拶が出来るくらいのWebアプリを作っちゃおう。&lt;/p&gt;

&lt;p&gt;アプリ自体は重要じゃないので、とりあえずインタラクティブシェル上でちゃちゃっと作っちゃう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  docker run -i -t clojure /bin/bash
root@e322a11f087d:/home# lein new compojure aws_webapp
Retrieving compojure/lein-template/0.4.1/lein-template-0.4.1.pom from clojars
Retrieving compojure/lein-template/0.4.1/lein-template-0.4.1.jar from clojars
root@e322a11f087d:/home# ls
aws_webapp
root@e322a11f087d:/home# cd aws_webapp/
root@e322a11f087d:/home/aws_webapp# ls
README.md  project.clj	resources  src	test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と思ったらcompojureテンプレート自体がすでにHello Worldを実装してた・・・。&lt;/p&gt;

&lt;p&gt;そのままサーバ起動しちゃうとこんな感じでブラウザの自動起動のとこでエラーしちゃうので、&lt;code&gt;lein ring server-headless&lt;/code&gt;で起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@e322a11f087d:/home/aws_webapp# lein ring server
2015-01-01 05:41:35.432:INFO:oejs.Server:jetty-7.6.8.v20121106
2015-01-01 05:41:35.486:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:3000
Started server on port 3000
Exception in thread &amp;quot;main&amp;quot; java.lang.InternalError: Can&#39;t connect to X11 window server using &#39;localhost:0.0&#39; as the value of the DISPLAY variable., compiling:(/tmp/form-init3570254627486988046.clj:1:72)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはデーモンとして起動しちゃえばローカルでの確認が出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  docker run -d -t -p 3000:3000 clojure:aws /bin/bash -c &amp;quot;cd /home/aws_webapp; lein ring server-headless&amp;quot;
e9981a71589918791d52888a0cb503bea133611395be58574047cd498c9e6f76
b2d$  docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                    NAMES
e9981a715899        clojure:aws         &amp;quot;/bin/bash -c &#39;cd /h   4 seconds ago       Up 3 seconds        0.0.0.0:3000-&amp;gt;3000/tcp   backstabbing_colden
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動しているのはboot2dockerの仮想マシン上なので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  boot2docker ip
192.168.59.103
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このIPの3000ポートに向けてアクセスすれば、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-01-01/webapp.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-01-01/webapp.png&#34; class=&#34;image&#34; alt=&#34;webapp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;見れます。&lt;/p&gt;

&lt;p&gt;ringのサーバは起動が遅いので&lt;code&gt;docker logs [names]&lt;/code&gt;で確認しながらやるとよい。&lt;/p&gt;

&lt;h2 id=&#34;elastic-beanstalkで動かす:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;Elastic Beanstalkで動かす&lt;/h2&gt;

&lt;p&gt;大事なことに気づいたんだけど、BeanstalkはDockerfileとか必要なファイル一式をまとめたzipをアップするらしい。&lt;/p&gt;

&lt;p&gt;そもそもソースもイメージに入れちゃうっていうのは考えとしておかしかったね。&lt;/p&gt;

&lt;p&gt;なのでwarを&lt;code&gt;ADD&lt;/code&gt;で置くのが理想的なのかな。&lt;/p&gt;

&lt;p&gt;今回は面倒なので、clojureでWebサーバを立ち上げられる&lt;code&gt;http-kit&lt;/code&gt;というライブラリを使ってやってみます。&lt;/p&gt;

&lt;p&gt;ちょうどBeanstalk用のDockerfileとかも用意してくれる&lt;a href=&#34;https://github.com/mrmcc3/beanstalk-docker-app&#34;&gt;mrmcc3/beanstalk-docker-app&lt;/a&gt;というテンプレートがあったので、これを使わせてもらうことに。&lt;/p&gt;

&lt;h3 id=&#34;mrmcc3-beanstalk-docker-appでwebアプリを構築する:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;mrmcc3/beanstalk-docker-appでWebアプリを構築する&lt;/h3&gt;

&lt;p&gt;何はともあれ&lt;code&gt;new&lt;/code&gt;して作り直し。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;temp$ lein new beanstalk-docker-app superapp
Generating clojure app for AWS Beanstalk and docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで作られる。&lt;/p&gt;

&lt;p&gt;jarとかは&lt;code&gt;lein uberjar&lt;/code&gt;で作らなきゃダメかも。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;.
|-- Dockerfile
|-- Dockerrun.aws.json
|-- project.clj
|-- src
|   `-- superapp
|       `-- main.clj
`-- target
    |-- classes
    |   |-- META-INF
    |   |-- clojure
    |   |-- org
    |   `-- superapp
    |-- production.jar
    |-- stale
    |   `-- extract-native.dependencies
    |-- superapp-0.1.0.jar
    `-- superapp-0.1.0.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfileはこんな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-docker&#34;&gt;# Dockerfile for clojure apps on AWS Elastic Beanstalk
# v0.0.1

FROM dockerfile/java
MAINTAINER Michael McClintock, mrmcc3@gmail.com
ADD target/production.jar /root/
EXPOSE 8080
CMD [&amp;quot;java&amp;quot;, &amp;quot;-jar&amp;quot;, &amp;quot;/root/production.jar&amp;quot;]

# SUPPORT JVM OPTS ?
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;動作確認:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;動作確認&lt;/h3&gt;

&lt;p&gt;ローカルでの動作確認はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;superapp$ java -jar target/production.jar
13:33:07.705 [main] INFO  superapp.main - starting superapp
13:33:07.710 [main] INFO  superapp.main - serving status message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-01-01/beanstalkDockerApp.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-01-01/beanstalkDockerApp.png&#34; class=&#34;image&#34; alt=&#34;beanstalkDockerApp&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;デプロイ:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;デプロイ&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;lein zip&lt;/code&gt;でBeanstalk用のzipが&lt;code&gt;target&lt;/code&gt;配下に作成されるので、それをアップロード。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Dockerrun.aws.json&lt;/code&gt;でポートの指定とかやってるんだけど、こいつもzipに入れてしまうとtimeoutしてしまった。&lt;/p&gt;

&lt;p&gt;まあそれでも動くんだけどちょっと気持ち悪いので除外。&lt;/p&gt;

&lt;p&gt;ポートの指定やらはDockerfileでやってるので問題なく動きます。&lt;/p&gt;

&lt;p&gt;デプロイはこんな感じで成功。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2015-01-01/deploy.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2015-01-01/deploy.png&#34; class=&#34;image&#34; alt=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかしデプロイは結構時間かかるなー。&lt;/p&gt;

&lt;p&gt;Javaの起動とかライブラリのダウンロードで食ってるのかな・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:e7598df47e85c79be6b3ca007edb9ce3&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wslash.com/?p=5584&#34;&gt;Dockerを勉強するための、Docker解説記事のまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://knowledge.sakura.ad.jp/tech/1811/&#34;&gt;これから始める「DockerでかんたんLAMP環境 for CentOS」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nudaygames.squarespace.com/blog/2014/12/13/clojure-websocket-server-on-elastic-beanstalk&#34;&gt;CLOJURE WEBSOCKET SERVER ON ELASTIC BEANSTALK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://inokara.hateblo.jp/entry/2013/12/29/215322&#34;&gt;Dockerfile の書き方「私的」なベストプラクティス（3）〜サービスの起動について〜&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>boot2dockerでCannot connect to the Docker daemon</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/30/could-not-run-docker-in-mac/</link>
          <pubDate>Tue, 30 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/30/could-not-run-docker-in-mac/</guid>
          <description>

&lt;p&gt;これまでは普通に手で作ったVMのUbuntu上でDockerを触ってたんだけど、なんかあれだしboot2dockerに移行しようかと。&lt;/p&gt;

&lt;p&gt;いろいろやってみようとしたら導入から結構躓いた。&lt;/p&gt;

&lt;h2 id=&#34;boot2dockerの導入:84c49f689db64d048346ac0ea18a9c93&#34;&gt;boot2dockerの導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/installation/mac/&#34;&gt;Installing Docker on Mac OS X&lt;/a&gt;に沿って導入してみる。&lt;/p&gt;

&lt;p&gt;あ、本体はインストーラじゃなくて&lt;code&gt;brew install boot2docker&lt;/code&gt;で導入してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ boot2docker init
2014/12/29 22:59:08 Downloading boot2docker ISO image...
2014/12/29 22:59:09 Latest release is v1.4.1
2014/12/29 23:00:17 Success: downloaded https://github.com/boot2docker/boot2docker/releases/download/v1.4.1/boot2docker.iso
	to /Users/DaisukeTsuji/.boot2docker/boot2docker.iso
Generating public/private rsa key pair.
Your identification has been saved in /Users/DaisukeTsuji/.ssh/id_boot2docker.
Your public key has been saved in /Users/DaisukeTsuji/.ssh/id_boot2docker.pub.
The key fingerprint is:
36:99:81:cf:0b:bd:77:3b:30:9d:66:70:ad:90:ac:35 DaisukeTsuji@DaisukeTsujis-MacBook-Air.local
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|                 |
|       .         |
|      . .. . .   |
|       + +E . .  |
|      . So * o   |
|       o.+o *    |
|        o .=.    |
|         . ...   |
|            ..   |
+-----------------+
2014/12/29 23:00:17 Creating VM boot2docker-vm...
2014/12/29 23:00:17 Apply interim patch to VM boot2docker-vm (https://www.virtualbox.org/ticket/12748)
2014/12/29 23:00:17 Setting NIC #1 to use NAT network...
2014/12/29 23:00:17 Port forwarding [ssh] tcp://127.0.0.1:2022 --&amp;gt; :22
2014/12/29 23:00:17 Port forwarding [docker] tcp://127.0.0.1:2375 --&amp;gt; :2375
2014/12/29 23:00:18 Setting NIC #2 to use host-only network &amp;quot;vboxnet1&amp;quot;...
2014/12/29 23:00:18 Setting VM storage...
2014/12/29 23:00:28 Done. Type `boot2docker up` to start the VM.
b2d$ boot2docker status
poweroff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは&lt;code&gt;start&lt;/code&gt;すれば使えるのかなと思ったらエラー。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$  boot2docker start
2014/12/30 20:56:21 Waiting for VM to be started...
.......
2014/12/30 20:56:43 Started.
2014/12/30 20:56:43 To connect the Docker client to the Docker daemon, please set:
2014/12/30 20:56:43     export DOCKER_HOST=tcp://192.168.59.103:2375
b2d$ docker run hello-world
2014/12/30 20:51:16 Post http:///var/run/docker.sock/v1.13/containers/create: dial unix /var/run/docker.sock: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数&lt;code&gt;$DOCKER_HOST&lt;/code&gt;に&lt;code&gt;tcp://192.168.59.103:2357&lt;/code&gt;が設定されてなきゃいけなかったっぽい。&lt;/p&gt;

&lt;p&gt;これによってboot2dockerで起動したVM中のdockerと接続してるのかな。&lt;/p&gt;

&lt;p&gt;と思ったら、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ export DOCKER_HOST=tcp://192.168.59.103:2375
b2d$ docker run hello-world
2014/12/30 20:58:41 Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数を設定してみるもまたエラー。&lt;/p&gt;

&lt;p&gt;デーモンと接続できない。&lt;/p&gt;

&lt;p&gt;1時間ほど詰まりましたが最悪な原因でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;b2d$ brew update
b2d$ brew upgrade docker
b2d$ brew upgrade boot2docker
b2d$ boot2docker delete
b2d$ boot2docker init
b2d$ boot2docker up
b2d$ docker version
Client version: 1.4.1
Client API version: 1.16
Go version (client): go1.4
Git commit (client): 5bc2ff8
OS/Arch (client): darwin/amd64
Server version: 1.4.1
Server API version: 1.16
Go version (server): go1.3.3
Git commit (server): 5bc2ff8
b2d$ docker run hello-world
Unable to find image &#39;hello-world:latest&#39; locally
hello-world:latest: The image you are pulling has been verified
511136ea3c5a: Pull complete
7fa0dcdc88de: Pull complete
ef872312fe1b: Pull complete
Status: Downloaded newer image for hello-world:latest
Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
    (Assuming it was not already locally available.)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

For more examples and ideas, visit:
 http://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パッケージが古かった・・・。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:84c49f689db64d048346ac0ea18a9c93&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/boot2docker/osx-installer/issues/80&#34;&gt;Cannot connect to the Docker daemon · Issue #80 · boot2docker/osx-installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&#34;&gt;How to Use Docker on OS X: The Missing Guide | Viget&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/uchihara/items/d1b1885866949b63f7dc&#34;&gt;Dockerについて調べてみたのでめもめも - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://inokara.hateblo.jp/entry/2013/09/30/234806&#34;&gt;docker API を使ってみる - ようへいの日々精進 XP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kanekoa/items/cf3cabb23da69c609002&#34;&gt;OS X をサポートした Docker 0.8 を試す - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lobosでマイグレーションができない in Heroku</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/21/does-not-work-lobos-in-heroku/</link>
          <pubDate>Sun, 21 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/21/does-not-work-lobos-in-heroku/</guid>
          <description>

&lt;p&gt;ClojureのWebアプリがとりあえず動くところまで行ったんだけど、Herokuにのせようとしたら詰まった。&lt;/p&gt;

&lt;h2 id=&#34;何が起きたか:b3814854ab9c35505a0d42182d51f32f&#34;&gt;何が起きたか&lt;/h2&gt;

&lt;p&gt;今だにHerokuの使い方がようわからんのだけど、&lt;/p&gt;

&lt;p&gt;とりあえずローカルから向き先変えるよりもSSHの方がいっかなってことで&lt;code&gt;heroku run bash&lt;/code&gt;してやってます。&lt;/p&gt;

&lt;p&gt;ローカルからだとDBをSSLで接続させないといけないし・・・。&lt;/p&gt;

&lt;p&gt;んでマイグレーションしようとしたら、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;user&amp;gt; (migrate)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何も出ない。&lt;/p&gt;

&lt;p&gt;本当はこんな感じで、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;user=&amp;gt; (migrate)
add-sites-table
add-entries-table
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成されたり変更されたテーブルが出てくるはず。&lt;/p&gt;

&lt;h2 id=&#34;原因はなんだったのか:b3814854ab9c35505a0d42182d51f32f&#34;&gt;原因はなんだったのか&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;lobos.migrations&lt;/code&gt;が読まれてない（というかリロードされてない）っぽい。&lt;/p&gt;

&lt;p&gt;そもそも&lt;code&gt;migrate&lt;/code&gt;自体はこんな感じで&lt;code&gt;lobos.migration&lt;/code&gt;の&lt;code&gt;do-migrations&lt;/code&gt;を呼んでます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defcommand migrate [&amp;amp; names]
  (let [names (if (empty? names)
                (mig/pending-migrations db-spec sname)
                names)]
    (mig/do-migrations db-spec sname :up names)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;do-migrations&lt;/code&gt;はこんな感じで、&lt;code&gt;list-migrations-names&lt;/code&gt;の結果を絞って実行してる。&lt;/p&gt;

&lt;p&gt;たぶんマイグレーション済みのものは除外とかそんな感じなんじゃないだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn do-migrations [db-spec sname with names &amp;amp; [silent]]
  (let [filter-migs #(only % (list-migrations-names))
        migrations (-&amp;gt;&amp;gt; names
                        (map str)
                        filter-migs
                        (when-&amp;gt;&amp;gt; (= with :down) reverse)
                        (map symbol)
                        (map (partial ns-resolve *migrations-namespace*))
                        (map var-get))]
    (binding [*record* nil]
      (doseq [migration migrations]
        (let [name (-&amp;gt; migration meta :name)]
          (when-not silent
            (println name))
          (if (= with :up)
            (do
              (up migration)
              (insert-migrations db-spec sname name))
            (do
              (down migration)
              (delete-migrations db-spec sname name))))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;list-migrations-names&lt;/code&gt;の定義がこれ、&lt;code&gt;list-migrations&lt;/code&gt;を呼んでる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn list-migrations-names []
  (map #(-&amp;gt; % meta :name str) (list-migrations)))

(defn list-migrations []
  (if *reload-migrations*
    (when (.exists (migrations-file))
      (swap! migrations (constantly []))
      (use :reload *migrations-namespace*)
      @migrations)
    @migrations))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;list-migrations&lt;/code&gt;が問題のようで、いや、たぶんHeroku側の環境がよくないんだと思うけど、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;      (use :reload *migrations-namespace*)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;:reload&lt;/code&gt;が正常に動かなくてマイグレーション対象が取れてない。&lt;/p&gt;

&lt;p&gt;だから&lt;code&gt;list-migrations&lt;/code&gt;を実行した時、1回目はきちんとロードされて、&lt;/p&gt;

&lt;p&gt;2回目は&lt;code&gt;(swap! migrations (constantly []))&lt;/code&gt;で空っぽになったままリロードされてないのが悪かったみたい。&lt;/p&gt;

&lt;p&gt;だからこんな風に、2回目の実行からは空になった&lt;code&gt;migrations&lt;/code&gt;が返ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;user=&amp;gt; (use &#39;lobos.migration)
WARNING: complement already refers to: #&#39;clojure.core/complement in namespace: user, being replaced by: #&#39;lobos.migration/complement
nil
user=&amp;gt; (list-migrations)
[#&amp;lt;migrations$reify__2390 lobos.migrations$reify__2390@445aed&amp;gt; #&amp;lt;migrations$reify__2392 lobos.migrations$reify__2392@42bfb95d&amp;gt;]
user=&amp;gt; (list-migrations)
[]
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解決策:b3814854ab9c35505a0d42182d51f32f&#34;&gt;解決策&lt;/h2&gt;

&lt;p&gt;もう正直ここまでで一週間弱悩んだから、lobos使うのやめようかなとも思ったけどまあいい勉強だろうし・・・。&lt;/p&gt;

&lt;p&gt;暫定にしかならないけど、とりあえずリロードさせないようにしよう。&lt;/p&gt;

&lt;p&gt;ソースコードの通り、&lt;code&gt;*reload-migrations*&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;になっている場合にリロードが走るらしい。&lt;/p&gt;

&lt;p&gt;だからこんな感じで&lt;code&gt;false&lt;/code&gt;で上書いてしまおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;user=&amp;gt; (use &#39;lobos.migration)
WARNING: complement already refers to: #&#39;clojure.core/complement in namespace: user, being replaced by: #&#39;lobos.migration/complement
nil
user=&amp;gt; (ns lobos.migration)

IllegalStateException defonce already refers to: #&#39;lobos.utils/defonce in namespace: lobos.migration  clojure.lang.Namespace.warnOrFailOnReplace (Namespace.java:88)
user=&amp;gt; (def ^{:dynamic true} *reload-migrations* false)
#&#39;lobos.migration/*reload-migrations*
lobos.migration=&amp;gt; (use &#39;lobos.core)
WARNING: alter already refers to: #&#39;clojure.core/alter in namespace: lobos.migration, being replaced by: #&#39;lobos.core/alter
WARNING: drop already refers to: #&#39;clojure.core/drop in namespace: lobos.migration, being replaced by: #&#39;lobos.core/drop
nil
lobos.migration=&amp;gt; (migrate)
add-sites-table
add-entries-table
nil
lobos.migration=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これじゃない感がすごいけど、とりあえず通った・・・。&lt;/p&gt;

&lt;p&gt;Lobosはもう開発があんまり活発じゃないみたいだなあ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lobos.migration&lt;/code&gt;と&lt;code&gt;lobos.migrations&lt;/code&gt;の命名はちょっといけてないような・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lobosを使ってマイグレーションをする</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/11/usage-for-lobos-migration/</link>
          <pubDate>Thu, 11 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/11/usage-for-lobos-migration/</guid>
          <description>

&lt;p&gt;1年前くらいには、SQLまで隠蔽するORMとか嫌い！テーブルの自動生成やだ！とか言ってたのに、いつの間にかスキーマ操作なんてフレームワークがやるものだよね、って考えになってしまったよ・・・。&lt;/p&gt;

&lt;p&gt;というわけでClojureを使ってWeb開発をする際も使いたいので、Lobosというスキーマのマニュピレーション、マイグレーションツールを使ってみます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;本体はここ&lt;a href=&#34;https://github.com/budu/lobos&#34;&gt;budu/lobos&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;:dependencies [[lobos &amp;quot;1.0.0-beta3&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加して&lt;code&gt;lein deps&lt;/code&gt;するだけでおーけー。&lt;/p&gt;

&lt;p&gt;Leiningenのプラグインとして使える&lt;a href=&#34;https://github.com/pupeno/lein-lobos&#34;&gt;pupeno/lein-lobos&lt;/a&gt;ってのもあるようだ。&lt;/p&gt;

&lt;p&gt;こっちも使う場合は、&lt;code&gt;ploject.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;:plugins [lein-lobos &amp;quot;1.0.0-beta1&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加。&lt;/p&gt;

&lt;p&gt;全体を載っけるとこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject tpc &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]
                 [compojure &amp;quot;1.2.0&amp;quot;]
                 [ring/ring-defaults &amp;quot;0.1.2&amp;quot;]
                 [enlive &amp;quot;1.1.5&amp;quot;]
                 [korma &amp;quot;0.4.0&amp;quot;]
                 [postgresql &amp;quot;9.1-901.jdbc4&amp;quot;]
                 [lobos &amp;quot;1.0.0-beta3&amp;quot;]]
  :plugins [[lein-ring &amp;quot;0.8.13&amp;quot;]
            [lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]
            [lein-lobos &amp;quot;1.0.0-beta1&amp;quot;]]
  :ring {:handler tpc.core.handler/app}
  :profiles
  {:dev {:dependencies [[javax.servlet/servlet-api &amp;quot;2.5&amp;quot;]
                        [ring-mock &amp;quot;0.1.5&amp;quot;]
                        [org.xerial/sqlite-jdbc &amp;quot;3.6.16&amp;quot;]]}}
  :scss {:src &amp;quot;resources/scss&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         :output-extension &amp;quot;css&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テーブル定義をしてみる:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;テーブル定義をしてみる&lt;/h2&gt;

&lt;p&gt;今回はSQLiteにて実施。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src&lt;/code&gt;ディレクトリ直下に&lt;code&gt;lobos&lt;/code&gt;ってディレクトリを作成して、その中にいろいろな設定を突っ込む必要があるらしい。&lt;/p&gt;

&lt;p&gt;このディレクトリの名前は変えてもいいみたいだけど面倒になりそうだからこのままで。&lt;/p&gt;

&lt;p&gt;まずは接続情報を記載する&lt;code&gt;src/lobos/config.clj&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.config
  (:use lobos.connectivity))

(def db_dev
     {:classname &amp;quot;org.sqlite.JDBC&amp;quot;
      :subprotocol &amp;quot;sqlite&amp;quot;
      :subname &amp;quot;./dev.sqlite3&amp;quot;})

(open-global db_dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にスキーマ操作で使われている(と思われる)ヘルパー、&lt;code&gt;src/lobos/helpers.clj&lt;/code&gt;を定義。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.helpers
  (:refer-clojure :exclude [bigint boolean char double float time])
  (:use (lobos schema)))

(defn surrogate-key [table]
  (integer table :id :auto-inc :primary-key))

(defn timestamps [table]
  (-&amp;gt; table
      (timestamp :updated_on)
      (timestamp :created_on (default (now)))))

(defn refer-to [table ptable]
  (let [cname (-&amp;gt; (-&amp;gt;&amp;gt; ptable name butlast (apply str))
                  (str &amp;quot;_id&amp;quot;)
                  keyword)]
    (integer table cname [:refer ptable :id :on-delete :set-null])))

(defmacro tbl [name &amp;amp; elements]
  `(-&amp;gt; (table ~name)
       (timestamps)
       ~@(reverse elements)
       (surrogate-key)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、目的のマイグレーション定義を&lt;code&gt;src/lobos/migrations.clj&lt;/code&gt;に。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.migrations
  (:refer-clojure :exclude [alter drop
                            bigint boolean char double float time])
  (:use (lobos [migration :only [defmigration]] core schema
               config helpers)))

(defmigration add-sites-table
  (up [] (create
          (tbl :sites
            (varchar :name 255)
            (varchar :url 255)
            (varchar :rss 255)
            (varchar :image 255)
            (integer :cat)
            )))
  (down [] (drop (table :sites))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;マイグレーションの実行:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;ここが結構厄介だった。&lt;/p&gt;

&lt;p&gt;というか、出来たといえば出来たんだけど、もっと正しい方法があるような気が・・・。&lt;/p&gt;

&lt;p&gt;REPLにて以下を実行。&lt;/p&gt;

&lt;p&gt;WARNINGは多分すでに存在するシンボルを置き換えてしまってることの警告だからとりあえず無視。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tpc git:(master)$ lein repl
(use &#39;(lobos connectivity core schema))nREPL server started on port 50092 on host 127.0.0.1 - nrepl://127.0.0.1:50092
REPL-y 0.3.1
Clojure 1.6.0
    Docs: (doc function-name-here)
          (find-doc &amp;quot;part-of-name-here&amp;quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt; (use &#39;(lobos connectivity core schema))
WARNING: alter already refers to: #&#39;clojure.core/alter in namespace: user, being replaced by: #&#39;lobos.core/alter
WARNING: drop already refers to: #&#39;clojure.core/drop in namespace: user, being replaced by: #&#39;lobos.core/drop
WARNING: boolean already refers to: #&#39;clojure.core/boolean in namespace: user, being replaced by: #&#39;lobos.schema/boolean
WARNING: char already refers to: #&#39;clojure.core/char in namespace: user, being replaced by: #&#39;lobos.schema/char
WARNING: double already refers to: #&#39;clojure.core/double in namespace: user, being replaced by: #&#39;lobos.schema/double
WARNING: bigint already refers to: #&#39;clojure.core/bigint in namespace: user, being replaced by: #&#39;lobos.schema/bigint
WARNING: float already refers to: #&#39;clojure.core/float in namespace: user, being replaced by: #&#39;lobos.schema/float
WARNING: time already refers to: #&#39;clojure.core/time in namespace: user, being replaced by: #&#39;lobos.schema/time
nil
user=&amp;gt; (require &#39;lobos.migrations)
nil
user=&amp;gt; (migrate)
add-sites-table
nil
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tpc git:(master)$ sqlite3 dev.sqlite3
SQLite version 3.8.5 2014-08-15 22:37:57
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; .tables
lobos_migrations  sites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できてる！&lt;/p&gt;

&lt;p&gt;まだまだ名前空間とか&lt;code&gt;require&lt;/code&gt;あたりの理解が甘いなー・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>LeiningenでSCSSを自動コンパイルする</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/09/automatically-compile-the-scss-in-leiningen/</link>
          <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/09/automatically-compile-the-scss-in-leiningen/</guid>
          <description>

&lt;p&gt;Clojureを始めて一週間ほどになりまして。&lt;/p&gt;

&lt;p&gt;ようやくWebアプリ開発に着手しました。&lt;/p&gt;

&lt;p&gt;というわけで開発環境を整えます。&lt;/p&gt;

&lt;h2 id=&#34;lein-haml-sassの導入:aea6c6aa18698925cad2fc33bce27d8b&#34;&gt;lein-haml-sassの導入&lt;/h2&gt;

&lt;p&gt;まったく贅沢な名前してんな！&lt;/p&gt;

&lt;p&gt;いえ、&lt;a href=&#34;https://github.com/rtircher/lein-haml-sass&#34;&gt;lein-haml-sass&lt;/a&gt;は素晴らしいプラグインです。&lt;/p&gt;

&lt;p&gt;これを使うとなんとhamlのコンパイルやsass/scssのコンパイルをやってくれます。&lt;/p&gt;

&lt;p&gt;ていうか&lt;strong&gt;sassとscssの違い&lt;/strong&gt;ってなんだっけ？真面目に考えるとわかんないな。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1402/17/news102.html#02&#34;&gt;CSSコーディングで泣かないためのSassの基礎知識と10の利点 (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;へえ・・・。&lt;/p&gt;

&lt;p&gt;とりあえず導入します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject example &amp;quot;1.2.3&amp;quot;
  :plugins [[lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに設定も記述。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;resources/sass/&lt;/code&gt;にscssを、&lt;code&gt;resources/public/css/&lt;/code&gt;にcssを出力する設定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject example-project &amp;quot;1.2.3&amp;quot;
  :haml {:src &amp;quot;resources/haml&amp;quot;
         :output-directory &amp;quot;resources/public/html&amp;quot;
         }

  :sass {:src &amp;quot;resources/sass&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         }

  :scss {:src &amp;quot;resources/scss&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         }
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまではコピペだけど、オレのファイル自体はこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject tpc &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]
                 [compojure &amp;quot;1.2.0&amp;quot;]
                 [ring/ring-defaults &amp;quot;0.1.2&amp;quot;]
                 [enlive &amp;quot;1.1.5&amp;quot;]]
  :plugins [[lein-ring &amp;quot;0.8.13&amp;quot;]
            [lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]]
  :ring {:handler tpc.core.handler/app}
  :profiles
  {:dev {:dependencies [[javax.servlet/servlet-api &amp;quot;2.5&amp;quot;]
                        [ring-mock &amp;quot;0.1.5&amp;quot;]]}}
  :scss {:src &amp;quot;resources/sass&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         :output-extension &amp;quot;css&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイルする:aea6c6aa18698925cad2fc33bce27d8b&#34;&gt;コンパイルする&lt;/h2&gt;

&lt;p&gt;さっそく&lt;code&gt;lein sass once&lt;/code&gt;してみるも、何も起きない！&lt;/p&gt;

&lt;p&gt;あっ、sassとscssでタスクが違う。&lt;/p&gt;

&lt;p&gt;ていうかsassフォルダにscss置くのってなんか違う気がしてきた！あとで名前変えよう。&lt;/p&gt;

&lt;p&gt;というわけで、&lt;code&gt;lein scss once&lt;/code&gt;で無事動きました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lein scss auto&lt;/code&gt;で変更監視できるっぽい。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HackerにとってのStartup Weekend</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/02/went-to-startup-weekend-yokohama-2nd/</link>
          <pubDate>Tue, 02 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/02/went-to-startup-weekend-yokohama-2nd/</guid>
          <description>

&lt;p&gt;この2週間で、Startup Weekend YokohamaとStartup Weekend Tokyoに参加してきました。&lt;/p&gt;

&lt;p&gt;まさかの2週連続の強化合宿！&lt;/p&gt;

&lt;p&gt;様々な経験になったのは確かなので、自分のためにも、今後行く人のためにもまとめてみようと思います。&lt;/p&gt;

&lt;p&gt;色々な人が体験談を書いてるから、オレはHackerとしての目線で書こうかな。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;startup-weekend:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;Startup Weekend?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;スタートアップウィークエンド（SW）とは、あたらしいなにかをつくりだす「スタートアップ体験イベント」です。週末だけであなたは、アイディアをカタチにするための方法論を学び、スタートアップをリアルに経験することができます。&lt;/p&gt;

&lt;p&gt;SWは金曜の夜、みんながアイディアを発表するピッチから始まります。そしてハスラー・ハッカー・デザイナーでチームを組み、日曜の午後までに、ユーザーエクスペリエンスに沿った必要最小限のビジネスモデルを一気に作り上げます。ハスラーはマネジメントと顧客開発を、ハッカーは機能の開発を、デザイナーは使いやすいデザインを担当します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どこのブログにも書いてあるんだけど一応。&lt;/p&gt;

&lt;p&gt;金曜日の夜から始まって、「こんなもの作りたい」って人とそれに共感した人でチームを作って、日曜夜までの3日間で手や足を動かすイベントです。&lt;/p&gt;

&lt;h2 id=&#34;ピッチ:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;ピッチ&lt;/h2&gt;

&lt;p&gt;金曜日の夜に、アイデアがある人は1分間で発表をします。&lt;/p&gt;

&lt;p&gt;オレは、初参加となったYokohamaではしなかった。&lt;/p&gt;

&lt;p&gt;様子見したかったのと特にアイデアがなかったので。&lt;/p&gt;

&lt;p&gt;あとたぶん、Hackerは「自分で作れるし言いたくない」って人も多いんじゃないかなあ。&lt;/p&gt;

&lt;p&gt;Tokyoではピッチしたんだけど、正直言いたくないな、って気持ちも結構あった。&lt;/p&gt;

&lt;p&gt;だからピッチは正直そんな重要なことでもない。&lt;/p&gt;

&lt;p&gt;後悔するよ、って言う人もいるけど、しなかった回とした回があるオレからすれば、どっちでも良かったかな。&lt;/p&gt;

&lt;h2 id=&#34;3日間で何をするのか:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;3日間で何をするのか&lt;/h2&gt;

&lt;p&gt;ビジネスモデルを考えて、アンケートを取ったりしてニーズがあるのかを検証して、ティザーサイトやらを作って集客をしてみたり、いっそ本当に動くサービスを作ってみたり。&lt;/p&gt;

&lt;p&gt;そのチームのビジネスモデルによってまちまち。&lt;/p&gt;

&lt;p&gt;Yokohamaはアイデア自体が結構壮大なものだったので、動くサービスは作れなかった。&lt;/p&gt;

&lt;p&gt;ティザーサイトどまりだったからちょっと不完全燃焼だったかな。マークアップは楽しかったけど。&lt;/p&gt;

&lt;p&gt;Tokyoは動くものを作ったけど、ビジネスモデルが固まりきらなかったのとWebだけでは完結しない話だったから、&lt;strong&gt;作りきった&lt;/strong&gt;って感じは無かった。&lt;/p&gt;

&lt;p&gt;アイデアによってやることは違うから、自分のやりたいことが明確にあるのであれば、それが出来そうなチームに入るのは大事な選択だと思う。&lt;/p&gt;

&lt;p&gt;でも、オレはどんなメンバーとやるのか、ってことの方が大事なのかなとも思った。&lt;/p&gt;

&lt;p&gt;YokohamaもTokyoもすごくいいメンバーに恵まれました。&lt;/p&gt;

&lt;p&gt;だから目標の1つは確実に達成出来た。&lt;/p&gt;

&lt;h2 id=&#34;参加する前にやったこと:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;参加する前にやったこと&lt;/h2&gt;

&lt;p&gt;Yokohamaが初参加で、何をするのかもよくわかってなかったからとりあえずHackerらしい予習はした。&lt;/p&gt;

&lt;p&gt;どうせRailsなんだろと思ってたし、チュートリアルをざーっと読んでRailsが少し好きになった。&lt;/p&gt;

&lt;p&gt;実際には使わなかったし、やっぱりあんまり好きじゃねーなって思ったけど笑&lt;/p&gt;

&lt;p&gt;Tokyoの時は特に何かしておかなきゃってのは考えてなかったんだけど、ちょうど興味本位で調べてたFacebook認証でのログインと設計が役に立った。&lt;/p&gt;

&lt;p&gt;どんなDB設計すんだろうなーとか、そういう話。&lt;/p&gt;

&lt;p&gt;まあ、特にやっておくべきことはなかった。少しでもインフラを知っておくと強いかな。どうせティザーか本番は作るし。&lt;/p&gt;

&lt;h2 id=&#34;このイベントで何がしたかったのか:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;このイベントで何がしたかったのか&lt;/h2&gt;

&lt;p&gt;やりたかったことは2個。&lt;/p&gt;

&lt;p&gt;なんかプロダクトを作りたかった、知らない人と話したかった。&lt;/p&gt;

&lt;p&gt;これまでエセSIみたいなことをやって、転職を経てB2Cの仕事をして、この少ない経験値をなんとかしたいなって気持ちがあった。&lt;/p&gt;

&lt;p&gt;もう25歳だし、技術者としてそろそろ独学を離れるべきだと思っていたし、いろいろな価値観だとかノウハウに触れていかなきゃいけないっていう焦りもあったんだと思う。&lt;/p&gt;

&lt;h2 id=&#34;起業がしたいのか:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;起業がしたいのか&lt;/h2&gt;

&lt;p&gt;別にしたくない。&lt;/p&gt;

&lt;p&gt;どっちでもいいとかじゃなくて、したくない。忙しそうだし。&lt;/p&gt;

&lt;p&gt;でも、したいって人の価値観にも触れてみたかったし、そういう話に乗っかりたい気持ちはあった。&lt;/p&gt;

&lt;p&gt;一緒にやる仲間が欲しかったのかも。&lt;/p&gt;

&lt;p&gt;技術者ってどこでも生きていけると思っていて、それなら大きな会社にいるのもよし、なんかスリルのある会社にいるのもよしだと思う。&lt;/p&gt;

&lt;p&gt;それこそ、起業とか。&lt;/p&gt;

&lt;h2 id=&#34;hackerとして参加するメリット:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;Hackerとして参加するメリット&lt;/h2&gt;

&lt;p&gt;どうやらタダ働きになるからやだ、っていう人もいるらしい。&lt;/p&gt;

&lt;p&gt;まあ確かにそうだけど・・・ていうか逆にお金払ってるけど・・・。&lt;/p&gt;

&lt;p&gt;でもメリットは結構あるよ。&lt;/p&gt;

&lt;h3 id=&#34;知らない誰かと1つのことをやる:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;知らない誰かと1つのことをやる&lt;/h3&gt;

&lt;p&gt;誰かと一緒にものを作るっていうのは結構楽しいことだと思う。&lt;/p&gt;

&lt;p&gt;それこそ他のエンジニアとかじゃなくて、そもそも技術とかわかんない人とか、マーケティングの人とか。&lt;/p&gt;

&lt;p&gt;普段からデザイナや企画と調整して仕事してるよ、って人ももちろん居ると思う。オレもそうだし。&lt;/p&gt;

&lt;p&gt;でもStartup Weekendはもっと距離が近いし、みんなが真剣になって、それぞれの出来ることを発揮して1個のものに取り組むのって、なんか楽しい。&lt;/p&gt;

&lt;p&gt;頼って頼られての関係が出来る。&lt;/p&gt;

&lt;h3 id=&#34;エンジニアとしての立ち位置が見える:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;エンジニアとしての立ち位置が見える&lt;/h3&gt;

&lt;p&gt;3日間っていう短い期間だし、少ないメンバーだし、やらなきゃいけないことはたくさんあるんだけど、実際出来るだけの技量が無かったり。&lt;/p&gt;

&lt;p&gt;例えばFacebookのOAuth認証とか、IaaSやPaaSの利用経験とか。&lt;/p&gt;

&lt;p&gt;特にOAuthなんてエンジニアなら誰でも出来て当然だと思うけど、オレは経験が無かったから調べながらの作業になった。&lt;/p&gt;

&lt;p&gt;別に素で書ける必要は無いんだけど、これまでにやっていればGitHubから持ってきたりしてさっと作れたのになーと思った。&lt;/p&gt;

&lt;p&gt;そんな感じで&lt;strong&gt;エンジニアとして出来るべきこと&lt;/strong&gt;ってのも見えてきたりする。&lt;/p&gt;

&lt;p&gt;なんか、デザインも出来るしプログラムも書けるよ、って人が、プログラム一本でやってる人より出来たりするしね笑&lt;/p&gt;

&lt;h3 id=&#34;人脈が一気に広がる:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;人脈が一気に広がる&lt;/h3&gt;

&lt;p&gt;いろんな人に出会ったし名刺も交換したし、何より、エンジニアって足りてないんだなってものすごく感じた笑&lt;/p&gt;

&lt;p&gt;ここで知り合った人に勉強会に誘われたり、終わった後もFacebookページでやり取りしたり、たぶん今後もどっかで何かを一緒にやるんじゃないかなーって気はしてる。&lt;/p&gt;

&lt;p&gt;というか、やりたいなと思うし。&lt;/p&gt;

&lt;p&gt;そんな仲間はきっと仕事をしてるだけじゃ見つからないし、本当に良かったなと思う。&lt;/p&gt;

&lt;p&gt;もし何かをするときのために、技術者としてもっと努力しなきゃなってモチベーションにもつながった。&lt;/p&gt;

&lt;h2 id=&#34;3日間は長い:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;3日間は長い&lt;/h2&gt;

&lt;p&gt;確かに休みを全部使ってこういうのに参加するのは抵抗があるのかもしれない。&lt;/p&gt;

&lt;p&gt;オレも2週連続で参加したせいで、部屋の掃除も出来ないし買い物にも行けないしで結構ぐちゃぐちゃになった笑&lt;/p&gt;

&lt;p&gt;エンジニアって結構、&lt;strong&gt;勉強しなきゃいけないのはわかってるけど結局しない&lt;/strong&gt;って人が多いんじゃないかなと思う。&lt;/p&gt;

&lt;p&gt;特にオレはそういう焦りがすごくあったから、こういう場に行って、初めましての人となんかしたり、勉強会に誘われて平日の予定を埋めたりするようになったのはすごく良かったな。&lt;/p&gt;

&lt;h2 id=&#34;hackerはstartup-weekendを楽しめる:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;HackerはStartup Weekendを楽しめる？&lt;/h2&gt;

&lt;p&gt;個人的には、Startup Weekendを一番楽しめるのはHastlerでもなくDesignerでもなくHackerなんじゃないかと思ってる。&lt;/p&gt;

&lt;p&gt;オレもやってる最中に、来るの間違えたかなーとか、もう来たくないなーって思う場面も結構あった。&lt;/p&gt;

&lt;p&gt;でも終わってみると、すごく楽しくためになる経験だったなって思うし、何よりまた会いたい仲間が出来たことが嬉しかった。&lt;/p&gt;

&lt;p&gt;もちろんオレも本業でプログラムをやってるから、お金についての云々は別に考えてないわけじゃないけど、でもみんなに必要とされながら書くプログラムも楽しいもんだと思います。&lt;/p&gt;

&lt;p&gt;というわけで来年、Yokohama開催のは都合を合わせて参加したいと思います。&lt;/p&gt;

&lt;h2 id=&#34;技術的な話:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;技術的な話&lt;/h2&gt;

&lt;p&gt;特にこれといってないんだけど、出来たらいいよねレベルで。&lt;/p&gt;

&lt;p&gt;勘違いしないでほしいけど、これが出来なきゃ楽しめないとか、活躍出来ないとか、そういうことは一切ないです。&lt;/p&gt;

&lt;h3 id=&#34;facebookとかtwitter認証のあれこれ:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;FacebookとかTwitter認証のあれこれ&lt;/h3&gt;

&lt;p&gt;ティザーを作った場合には、何人がテスター登録してくれたかとかその辺を集める必要があるので、結局OAuthを使った認証を書くのが一番らくだよねってことになる。&lt;/p&gt;

&lt;p&gt;1度でいいし、PHPでもPythonでもRubyでもなんでもいいから、ざっとロジックを書いたことがあるといいなあと思った。&lt;/p&gt;

&lt;p&gt;どういう風なフローで処理をして、どういうデータが取れるのか、とか理解してると楽だからね。&lt;/p&gt;

&lt;h3 id=&#34;ドメインのあれこれ:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;ドメインのあれこれ&lt;/h3&gt;

&lt;p&gt;カスタムドメインを取ることがあります。&lt;/p&gt;

&lt;p&gt;正直これは無くても全然問題ないんだけど、あるとチームのテンションが結構あがる。&lt;/p&gt;

&lt;p&gt;お金は発生するけど、今の時代ドメインなんて1000円しないんだし、エンジニアならドメインの1つや2つ持っててもいい気はする。&lt;/p&gt;

&lt;p&gt;なので、HerokuやGoogle App Engine、AWSでのカスタムドメインの設定とか、CNAMEやAレコードやらの設定が未経験だとちょっと辛いかなと思った。&lt;/p&gt;

&lt;h3 id=&#34;インフラまわりのあれこれ:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;インフラまわりのあれこれ&lt;/h3&gt;

&lt;p&gt;ティザーとかサービスをどこで動かすかの選択肢は多くあったほうが良いと思う。&lt;/p&gt;

&lt;p&gt;例えば本当に静的なページならGitHub Pagesが一番手軽だし、少しでもサーバサイドロジックを書かなきゃいけないならHerokuかGAEだし、本格的に動かしたいならAWSあたりになるし。&lt;/p&gt;

&lt;p&gt;また、それに伴うIaaS、PaaSのデプロイ方法とか。手軽さとか。利用できる言語とか。&lt;/p&gt;

&lt;p&gt;チームメンバーに自分以外のHackerがいるなら、その人が使える言語に合わせなきゃいけない場合もあると思うので、その辺は柔軟にいけたほうがいいなあと思う。&lt;/p&gt;

&lt;h3 id=&#34;マークアップの技術:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;マークアップの技術&lt;/h3&gt;

&lt;p&gt;ぶっちゃけStartup WeekendにDesignerは来ません！絶対に来ません！&lt;/p&gt;

&lt;p&gt;理由は知らんけどたぶんHastlerやHackerはCreateの分野に居て、DesignerはDesignの分野っていう点で色々と違うものがあるのかなと思う。&lt;/p&gt;

&lt;p&gt;というわけでHackerがマークアップをします。しかしオレを含む9割のエンジニアはデザインが出来ません。&lt;/p&gt;

&lt;p&gt;なので良い素材サイトを探しておきましょう。&lt;/p&gt;

&lt;p&gt;サーバサイドなオレが良く使うサイトだったり、使おうと思って使わなかったサイトだったりをあげてこの記事をしめます。&lt;/p&gt;

&lt;h2 id=&#34;フロントエンドをなんとかごまかそう作戦:6703088d9c3bd70b941ac0a44f0ce152&#34;&gt;フロントエンドをなんとかごまかそう作戦&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.iconfinder.com/&#34;&gt;Iconfinder - 400,000+ free and premium icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アイコン的な画像がたくさん探せる。有料のも無料のもあり。&lt;/p&gt;

&lt;p&gt;ロゴなんてこれがあればそれなりに見栄えするものが作れる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/fonts&#34;&gt;Google Fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フリーフォント。&lt;/p&gt;

&lt;p&gt;ロゴなんてこれがあればそれなりに見栄えするものが作れる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap | The world&amp;rsquo;s most popular mobile-first and responsive front-end framework.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;言わずと知れたCSSフレームワーク。Twitter社謹製。&lt;/p&gt;

&lt;p&gt;いわゆるBootstrap臭さを出さないようにオーバーライドしまくりましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imperavi.com/kube/&#34;&gt;Kube Web Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap臭さを消せないようって人はこっち。&lt;/p&gt;

&lt;p&gt;シンプルでフラットなので、フレンドリーなデザインには向かないと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://flatinspire.com/&#34;&gt;Flat Design Gallery &amp;amp; Showcase - An inspirational resource for designers - Flat Inspire&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flat Designのショーケース。&lt;/p&gt;

&lt;p&gt;パクれってわけじゃなくて、色の16進数とかも出してくれてるしデザインが秀逸なサイトを見てるとインスピレーションが生まれる！と思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lollyt.in/&#34;&gt;lollytin beta 1.4 - A yummy HTML5 blockouterer!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いやいやHTMLとか見るだけで鳥肌立つから！って人のためのジェネレータ。&lt;/p&gt;

&lt;p&gt;Bootstrapベースで積み木みたいにHTMLが作れます。&lt;/p&gt;

&lt;p&gt;LPの枠組みくらいなら1分くらいで出来そう。後は画像とか文字を挿入して完成！30分でいけるね！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://startupstockphotos.com/&#34;&gt;STARTUP STOCK PHOTOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;起業ぽい感じのWeb素材。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pesticide.io/&#34;&gt;Pesticide - Kill Your Css Layout Bugs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ページの要素に線をつけてくれるChrome Extension。&lt;/p&gt;

&lt;p&gt;マージンやパディングの確認に使う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://caniuse.com/&#34;&gt;Can I use&amp;hellip; Support tables for HTML5, CSS3, etc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;W3Cが勧告している仕様について、ブラウザごとの実装状況を確認できる。&lt;/p&gt;

&lt;p&gt;IEがさらに嫌いになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/app-store/marketing/guidelines/&#34;&gt;App Store Marketing Guidelines - Apple Developer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アプリのモックとかに使う画像。&lt;/p&gt;

&lt;p&gt;Apple公式なので質はいい。&lt;/p&gt;

&lt;p&gt;Android版はたぶんこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/distribute/tools/promote/device-art.html&#34;&gt;Device Art Generator | Android Developers&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OctopressをW3Cのバリデーションにパスさせる</title>
          <link>http://yet.unresolved.xyz/blog/2014/11/12/pass-the-validation-of-w3c/</link>
          <pubDate>Wed, 12 Nov 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/11/12/pass-the-validation-of-w3c/</guid>
          <description>&lt;p&gt;ふと思い立って&lt;a href=&#34;http://validator.w3.org/&#34;&gt;Markup Validation Service&lt;/a&gt;をやってみたら13個もエラーが出たので対応してみるよ。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code&gt;Error Line 50, Column 32: Element hgroup not allowed as child of element header in this context. (Suppressing further errors from this subtree.)
  &amp;lt;header role=&amp;quot;banner&amp;quot;&amp;gt;&amp;lt;hgroup&amp;gt;
Content model for element header:
Flow content, but with no header, footer, or main element descendants.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hgroup&lt;/code&gt;は&lt;code&gt;header&lt;/code&gt;タグの中に入れちゃダメだよ。&lt;/p&gt;

&lt;p&gt;次のも関連してる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 50, Column 32: The hgroup element is obsolete. To mark up subheadings, consider either just putting the subheading into a p element after the h1-h6 element containing the main heading, or else putting the subheading directly within the h1-h6 element containing the main heading, but separated from the main heading by punctuation and/or within, for example, a span class=&amp;quot;subheading&amp;quot; element with differentiated styling. To group headings and subheadings, alternative titles, or taglines, consider using the header or div elements.
  &amp;lt;header role=&amp;quot;banner&amp;quot;&amp;gt;&amp;lt;hgroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hgorup&lt;/code&gt;タグは非推奨だよ。&lt;/p&gt;

&lt;p&gt;よし、消そう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 57, Column 72: Bad value subscribe-rss for attribute rel on element a: The string subscribe-rss is not a registered keyword.
…&amp;gt;&amp;lt;a href=&amp;quot;/atom.xml&amp;quot; rel=&amp;quot;subscribe-rss&amp;quot; title=&amp;quot;subscribe via RSS&amp;quot;&amp;gt;RSS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
Syntax of list of link-type keywords:
A whitespace-separated list of link types, with no duplicate keywords in the list. Each link type must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; in the HTML specification, or must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; on the Microformats wiki, or must be an absolute URL. You can register link types on the Microformats wiki yourself.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;subscribe-rss&lt;/code&gt;は&lt;code&gt;rel&lt;/code&gt;に入れていいkeywordじゃないよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Line 64, Column 81: Attribute results not allowed on element input at this point.
…  &amp;lt;input class=&amp;quot;search&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; results=&amp;quot;0&amp;quot; placeholder=&amp;quot;Search&amp;quot;/&amp;gt;
Attributes for element input:
Global attributes
accept when type is file
alt when type is image
autocomplete when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, number, range, or color
autofocus
checked when type is checkbox or radio
dirname when type is text or search
disabled
form
formaction when type is submit or image
formenctype when type is submit or image
formmethod when type is submit or image
formnovalidate when type is submit or image
formtarget when type is submit or image
height when type is image
list when type is text, search, url, tel, e-mail, datetime, date, month, week, time, datetime-local, number, range, or color
max when type is datetime, date, month, week, time, datetime-local, number, or range
maxlength when type is text, search, url, tel, e-mail, or password
min when type is datetime, date, month, week, time, datetime-local, number, or range
multiple when type is email or file
name
pattern when type is text, search, url, tel, e-mail, or password
placeholder when type is text, search, url, tel, e-mail, password, or number
readonly when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, or number
required when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, number, checkbox, radio, or file
size when type is text, search, url, tel, e-mail, or password
src when type is image
step when type is datetime, date, month, week, time, datetime-local, number, or range
type
value when type is not file or image
width when type is image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;input&lt;/code&gt;タグに&lt;code&gt;results&lt;/code&gt;っていう属性は入れちゃだめだよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 110, Column 66: Bad value full-article for attribute rel on element a: The string full-article is not a registered keyword.
… &amp;lt;a rel=&amp;quot;full-article&amp;quot; href=&amp;quot;/blog/2014/11/09/learn-docker/&amp;quot;&amp;gt;Read on &amp;amp;rarr;&amp;lt;/a&amp;gt;
Syntax of list of link-type keywords:
A whitespace-separated list of link types, with no duplicate keywords in the list. Each link type must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; in the HTML specification, or must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; on the Microformats wiki, or must be an absolute URL. You can register link types on the Microformats wiki yourself.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;full-article&lt;/code&gt;は&lt;code&gt;rel&lt;/code&gt;に入れていいkeywordじゃないよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Line 332, Column 100: An img element must have an alt attribute, except under certain conditions. For details, consult guidance on providing text alternatives for images.
…3/verify.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/images/2014-10-23/verify.png&amp;quot; title=&amp;quot;verify&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;タグは&lt;code&gt;alt&lt;/code&gt;属性をつけなきゃだめだよ。&lt;/p&gt;

&lt;p&gt;これが計7個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning Line 511, Column 6: Consider using the h1 element as a top-level heading only (all h1 elements are treated as top-level headings by many screen readers and other tools).
  &amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;はトップレベルだけで使ってよ。&lt;/p&gt;

&lt;p&gt;これが計8個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Line 513, Column 18: Element img is missing required attribute src.
  &amp;lt;img id=&amp;quot;photo&amp;quot;&amp;gt;
Attributes for element img:
Global attributes
alt
src
crossorigin
usemap
ismap
width
height
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;タグに&lt;code&gt;src&lt;/code&gt;属性がないよ。(Ajaxで書いてたせい。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 612, Column 7: Element style not allowed as child of element aside in this context. (Suppressing further errors from this subtree.)
&amp;lt;style&amp;gt;
Contexts in which element style may be used:
If the scoped attribute is absent: where metadata content is expected.
If the scoped attribute is absent: in a noscript element that is a child of a head element.
If the scoped attribute is present: where flow content is expected, but before any other flow content other than inter-element whitespace and style elements, and not as the child of an element whose content model is transparent.
Content model for element aside:
Flow content, but with no main element descendants.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;aside&lt;/code&gt;タグの中で&lt;code&gt;style&lt;/code&gt;書いちゃだめだよ。&lt;/p&gt;

&lt;p&gt;てことで、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-11-12/green.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-11-12/green.png&#34; class=&#34;image&#34; alt=&#34;green&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;オールグリーン！&lt;/p&gt;

&lt;p&gt;警告はもうだるいからいいや&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Docker事始め</title>
          <link>http://yet.unresolved.xyz/blog/2014/11/09/learn-docker/</link>
          <pubDate>Sun, 09 Nov 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/11/09/learn-docker/</guid>
          <description>

&lt;p&gt;ちょっとやりたいことがあって、&lt;a href=&#34;http://www.docker.com/&#34;&gt;Docker&lt;/a&gt;を使ってみることに。&lt;/p&gt;

&lt;p&gt;ドキュメントは&lt;a href=&#34;https://docs.docker.com/userguide/dockerizing/&#34;&gt;Dockerizing Applications: A &amp;ldquo;Hello world&amp;rdquo;&lt;/a&gt;から一通り読んだんだけど、&lt;/p&gt;

&lt;p&gt;触りながらやってもちょっと覚えるのが大変そうだからまとめてみる。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;何が出来る-何に使う:50163fe7ac593e930e96d9451ca55983&#34;&gt;何が出来る？何に使う？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;みたいに仮想環境をバンバン立ち上げることが出来るって認識は合ってそう。&lt;/p&gt;

&lt;p&gt;しかしコンテナ型だから速いとかGolangで出来てるとか、各所は難しい話ばっかで&lt;strong&gt;何が出来て何に使う&lt;/strong&gt;ってのがいまいち見えてこないんだな。&lt;/p&gt;

&lt;p&gt;特にオレみたいに、知識はないけどやってみたい人はそれじゃ理解が進まない！&lt;/p&gt;

&lt;p&gt;ちなみにオレの場合、Vagrantはアプリケーション単位に環境を作っています。&lt;/p&gt;

&lt;p&gt;開発するときは、ホストで書く-&amp;gt;ゲストで動かす、って感じに動作環境として使ってるんだけど、&lt;/p&gt;

&lt;p&gt;その点DockerはWebサーバとかDBサーバとか、そういう単位に仮想環境を作ってそれらを連携させたりするのが容易らしい。&lt;/p&gt;

&lt;p&gt;さらに、環境まるごとバージョン管理ができるんだとか。&lt;/p&gt;

&lt;p&gt;作っては捨てる環境ってだけじゃなくて、本番環境みたいに継続維持しなきゃいけない環境とかにも使えるんじゃないのかなあ、っていう印象。&lt;/p&gt;

&lt;p&gt;ただ、こんな記事がある通り、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://techracho.bpsinc.jp/hachi8833/2014_06_16/17982&#34;&gt;[翻訳] Dockerについてよくある勘違い&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本番で動かすなら結構な知識が必要だから安易にやるのはちょっとね、ってのが製作陣の考えのよう。&lt;/p&gt;

&lt;p&gt;オレは個人的な環境で使いたいだけだから、特に問題はないね。&lt;/p&gt;

&lt;h2 id=&#34;どんな感じに使う:50163fe7ac593e930e96d9451ca55983&#34;&gt;どんな感じに使う？&lt;/h2&gt;

&lt;p&gt;ドキュメント通りに理解を進めていこう。&lt;/p&gt;

&lt;p&gt;例えば、こんな感じでコンテナを起動した上でechoコマンドを実行したり、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker run ubuntu:14.04 /bin/echo &#39;Hello world&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じでインタラクティブモードでの起動が出来たりする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker run -t -i ubuntu:14.04 /bin/bash
root@af8bae53bdd3:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デーモンとして起動したり、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker run -d ubuntu:14.04 /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;
1e5535038e285177d5214659a068137486f96ee5c2e85a4ac52dc83f2ebe4147
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動してるデーモンを1つのプロセスとして確認できたりする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker ps
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
1e5535038e28  ubuntu:14.04  /bin/sh -c &#39;while tr  2 minutes ago  Up 1 minute        insane_babbage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CONTAINER_ID&lt;/code&gt;と&lt;code&gt;NAMES&lt;/code&gt;はコンテナを起動するたびに変わる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NAMES&lt;/code&gt;は自分で決めることも出来るとか？&lt;/p&gt;

&lt;p&gt;デーモンとして起動したコンテナの出力を見るにはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker logs insane_babbage
hello world
hello world
hello world
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;止める時はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker stop insane_babbage
insane_babbage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;webアプリを動かす:50163fe7ac593e930e96d9451ca55983&#34;&gt;Webアプリを動かす&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;オプションでデーモンとして常駐するみたいだけど、&lt;code&gt;-P&lt;/code&gt;でゲストとホスト間のポート転送もやってくれるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker run -d -P training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポートを指定する場合は&lt;code&gt;-p&lt;/code&gt;オプションを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker run -d -p 5000:5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tail -f&lt;/code&gt;みたいなログ監視をしたい時、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker logs -f nostalgic_morse
* Running on http://0.0.0.0:5000/
10.0.2.2 - - [23/May/2014 20:16:31] &amp;quot;GET / HTTP/1.1&amp;quot; 200 -
10.0.2.2 - - [23/May/2014 20:16:31] &amp;quot;GET /favicon.ico HTTP/1.1&amp;quot; 404 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ内のプロセス確認、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker top nostalgic_morse
PID                 USER                COMMAND
854                 root                python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろんな情報の表示、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker inspect nostalgic_morse
[{
    &amp;quot;ID&amp;quot;: &amp;quot;bc533791f3f500b280a9626688bc79e342e3ea0d528efe3a86a51ecb28ea20&amp;quot;,
    &amp;quot;Created&amp;quot;: &amp;quot;2014-05-26T05:52:40.808952951Z&amp;quot;,
    &amp;quot;Path&amp;quot;: &amp;quot;python&amp;quot;,
    &amp;quot;Args&amp;quot;: [
       &amp;quot;app.py&amp;quot;
    ],
    &amp;quot;Config&amp;quot;: {
       &amp;quot;Hostname&amp;quot;: &amp;quot;bc533791f3f5&amp;quot;,
       &amp;quot;Domainname&amp;quot;: &amp;quot;&amp;quot;,
       &amp;quot;User&amp;quot;: &amp;quot;&amp;quot;,
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一度作ったコンテナはすぐに再開出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker start nostalgic_morse
nostalgic_morse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作ったコンテナの確認はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この書き方わからなくて結構困った。&lt;/p&gt;

&lt;h2 id=&#34;独自のイメージを作る:50163fe7ac593e930e96d9451ca55983&#34;&gt;独自のイメージを作る&lt;/h2&gt;

&lt;p&gt;利用目的に沿ったコンテナを作ってみる。&lt;/p&gt;

&lt;p&gt;まずはベースになるイメージを探す。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker search sinatra
NAME                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
training/sinatra                       Sinatra training image                          0                    [OK]
marceldegraaf/sinatra                  Sinatra test app                                0
mattwarren/docker-sinatra-demo                                                         0                    [OK]
luisbebop/docker-sinatra-hello-world                                                   0                    [OK]
bmorearty/handson-sinatra              handson-ruby + Sinatra for Hands on with D...   0
subwiz/sinatra                                                                         0
bmorearty/sinatra                                                                      0
. . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;持ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker pull training/sinatra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インタラクティブモードで色々設定してもいいけど、Dockerfileに設定をまとめてしまった方がいいみたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir sinatra
$ cd sinatra
$ touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This is a comment
FROM ubuntu:14.04
MAINTAINER Kate Smith &amp;lt;ksmith@example.com&amp;gt;
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y ruby ruby-dev
RUN gem install sinatra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;反映はこう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker build -t=&amp;quot;ouruser/sinatra:v2&amp;quot; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変更をイメージとして確定するときは、こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo docker commit -m=&amp;quot;Added json gem&amp;quot; -a=&amp;quot;Kate Smith&amp;quot; 0b2616b0e5a8 ouruser/sinatra:v2
4f177bd27a9ff0f6dc2a830403925b5360bfe0b93d476f7fc3231110e7f71b1c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ちょっとまとめる:50163fe7ac593e930e96d9451ca55983&#34;&gt;ちょっとまとめる&lt;/h2&gt;

&lt;p&gt;やっぱりぽいぽい捨てたり、開発者間で同一の環境を作る、というよりかはある程度ロールを明確にした環境を作るのに向いてるのかなあ。&lt;/p&gt;

&lt;p&gt;稼働させる環境を作りながら途中でコミット出来たりするのはかなり安心できそう。&lt;/p&gt;

&lt;p&gt;ちょうど今回やりたかったことに合致しそうなので、もう少し進めてみよう。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub Pagesでカスタムドメインを使う</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/24/how-to-use-custom-domain-in-github-pages/</link>
          <pubDate>Fri, 24 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/24/how-to-use-custom-domain-in-github-pages/</guid>
          <description>

&lt;p&gt;昨日はGAEで今日はGithubかよって感じだけど、こっちは結構詰まったのでメモしたい。&lt;/p&gt;

&lt;h2 id=&#34;事の発端:bd764d28564cc0069e229d086834b342&#34;&gt;事の発端&lt;/h2&gt;

&lt;p&gt;このOctopressのblogをカスタムドメインにしてから、&lt;code&gt;rake gen_deploy&lt;/code&gt;するとGithubからこんなメールが来るようになりました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[dim0627.github.io] Page build warning&lt;/p&gt;

&lt;p&gt;The page build completed successfully, but returned the following warning:
GitHub Pages recently underwent some improvements (&lt;a href=&#34;https://github.com/blog/1715-faster-more-awesome-github-pages&#34;&gt;https://github.com/blog/1715-faster-more-awesome-github-pages&lt;/a&gt;) to make your site faster and more awesome, but we&amp;rsquo;ve noticed that unresolved.dimspace.xyz isn&amp;rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&amp;rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&amp;rsquo;s IP address can be found at &lt;a href=&#34;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages&#34;&gt;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages&lt;/a&gt;, and of course, you can always get in touch with a human at support@github.com. For the more technical minded folks who want to skip the help docs: your site&amp;rsquo;s DNS records are pointed to a deprecated IP address.&lt;/p&gt;

&lt;p&gt;For information on troubleshooting Jekyll see:
 &lt;a href=&#34;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&#34;&gt;https://help.github.com/articles/using-jekyll-with-pages#troubleshooting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions please contact us at &lt;a href=&#34;https://github.com/contact&#34;&gt;https://github.com/contact&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;英語かよ後で読もう、と思ってもデプロイするたびにメールが来るのは結構うざい。&lt;/p&gt;

&lt;p&gt;ので、しっかり読んでみると、&lt;strong&gt;デプロイは出来たんだけど、もっと速く動作させる方法があるからそっちにしない？&lt;/strong&gt;って話らしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/blog/1715-faster-more-awesome-github-pages&#34;&gt;Faster, More Awesome GitHub Pages&lt;/a&gt;を参考にすると、以下の手順を踏めばいいとのこと。&lt;/p&gt;

&lt;h3 id=&#34;username-github-ioみたいなデフォルトurlの人:bd764d28564cc0069e229d086834b342&#34;&gt;username.github.ioみたいなデフォルトURLの人&lt;/h3&gt;

&lt;p&gt;何もしないでOK&lt;/p&gt;

&lt;h3 id=&#34;www-example-comみたいなサブドメインの人:bd764d28564cc0069e229d086834b342&#34;&gt;www.example.comみたいなサブドメインの人&lt;/h3&gt;

&lt;p&gt;DNSプロバイダ側にCNAMEレコードを作って、username.github.ioに向ければOK&lt;/p&gt;

&lt;h3 id=&#34;example-comみたいにルートドメインの人:bd764d28564cc0069e229d086834b342&#34;&gt;example.comみたいにルートドメインの人&lt;/h3&gt;

&lt;p&gt;DNSプロバイダ側にAレコードを作って、207.97.227.245か204.232.175.78を向ければOK&lt;/p&gt;

&lt;p&gt;ちなみにこの3つめは少し厄介らしく、そもそもDNSプロバイダ側でALIASとやらが設定出来ないとだめなんだとか？&lt;/p&gt;

&lt;p&gt;こういう系は知識が浅くてだめだなあ。&lt;/p&gt;

&lt;h2 id=&#34;これで何が起こるの:bd764d28564cc0069e229d086834b342&#34;&gt;これで何が起こるの？&lt;/h2&gt;

&lt;p&gt;CDNからの配信になるから速いんだとか。&lt;/p&gt;

&lt;p&gt;あとDenial of service attackとかいう攻撃の対策になるらしい。&lt;/p&gt;

&lt;p&gt;あ、DOS攻撃のことか。略さずに書かれるとわからんもんだね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>クラスタ化インデックスとかカバリングインデックスについて</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/23/about-sqlserver-clusteredindex-and-nonclustered-index/</link>
          <pubDate>Thu, 23 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/23/about-sqlserver-clusteredindex-and-nonclustered-index/</guid>
          <description>

&lt;p&gt;SQL Serverを使ってて、ちょっと曖昧にしかわからんなってところがあったので少し調べてみた。&lt;/p&gt;

&lt;h2 id=&#34;クラスタ化-非クラスタ化インデックスの違い:c92488df51ae62a183920f8a12e0e585&#34;&gt;クラスタ化 / 非クラスタ化インデックスの違い&lt;/h2&gt;

&lt;p&gt;MySQLにも同じ話があったんだね。&lt;/p&gt;

&lt;p&gt;そもそもそれを知らない時点でいろいろだめなわけで。&lt;/p&gt;

&lt;p&gt;まず参考にしたのはMSDN。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/ms190457.aspx&#34;&gt;クラスター化インデックスと非クラスター化インデックスの概念&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まさにぴったりのタイトルじゃんと思ったんだけどいまいちよくわからない。&lt;/p&gt;

&lt;p&gt;いや、わかったっちゃわかったんだけど、だからどうなるとか、だからどうする、っていうところが掴めなかった。&lt;/p&gt;

&lt;h3 id=&#34;ここでわかったこと:c92488df51ae62a183920f8a12e0e585&#34;&gt;ここでわかったこと&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;クラスタ化インデックス&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1テーブルに1つしか作れない。&lt;/li&gt;
&lt;li&gt;これがあると指定されたインデックスの値によってソートされた構造体が出来る。(テーブルの構造ごとそうなる？)&lt;/li&gt;
&lt;li&gt;クラスタ化インデックスが設定されていないテーブルはヒープと呼ばれる未ソートの状態になる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;非クラスタ化インデックス&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーブルとは別に構造を持つ。&lt;/li&gt;
&lt;li&gt;実データじゃなく、実データへのポインタを持つ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に参考にさせてもらったのがこっち。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0501/18/news097.html&#34;&gt;SQL Serverのインデックス構造（前編） (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここは非常にわかりやすかった&lt;/p&gt;

&lt;p&gt;B-Treeのイメージも、SQL Server上での実装が具体的にイメージ出来たし、非クラスタ化インデックスじゃ結局ランダムI/Oが発生するんだね、ってこともわかった。&lt;/p&gt;

&lt;p&gt;ついでにB-Treeの勉強も軽くした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/fcoding/articles/delphi/05/delphi05a.html&#34;&gt;RDBMSで使われるB木を学ぼう&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ここでわかったこと-1:c92488df51ae62a183920f8a12e0e585&#34;&gt;ここでわかったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;B-Treeなのでリーフノードのレベルが全部同じになる。&lt;/li&gt;
&lt;li&gt;クラスタ化インデックスを利用したクエリの場合、リーフノードに実データがあるのでランダムI/Oが発生しない。&lt;/li&gt;
&lt;li&gt;非クラスタ化インデックスを利用したクエリの場合、リーフノードにはポインタしかないので、ランダムI/Oが発生する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにごめんなさいだけど、こっちのページはあまり理解が進まなかった・・・。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://enterprisezine.jp/iti/detail/3357&#34;&gt;SQL Serverの大きな特徴、クラスタ化インデックスを押さえよう！&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カバリングインデックス:c92488df51ae62a183920f8a12e0e585&#34;&gt;カバリングインデックス&lt;/h2&gt;

&lt;p&gt;おまえそれも知らねーのかよって言われそうだけど・・・。&lt;/p&gt;

&lt;p&gt;正直マルチカラムインデックスと混同してました。&lt;/p&gt;

&lt;p&gt;これは結構わかりやすく書いてくれている記事があった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/a666666/20100920/1284992435&#34;&gt;MySQLのインデックスを学ぶ (1)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;クエリが必要とするカラムがすべてインデックスに含まれている場合、インデックスだけを読めば良いのでとても速い、というもの。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/ff650692.aspx&#34;&gt;SQL インデックスを最適化する方法&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;カバーリング インデックスは、WHERE 句およびクエリ列選択の形態をとるすべての列を含む、非クラスタ化インデックスです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;誤った認識があればご指摘を。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Google app engineでカスタムドメインを使う</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/23/how-to-use-custom-domain-in-google-app-engine/</link>
          <pubDate>Thu, 23 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/23/how-to-use-custom-domain-in-google-app-engine/</guid>
          <description>

&lt;p&gt;簡単に終わるだろうと思ってたらそれなりに手順があったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;googleによるドメインの確認:f29605b0f60814e1a345ce000c7a37f6&#34;&gt;Googleによるドメインの確認&lt;/h2&gt;

&lt;p&gt;ドメインを持っていない人は先に取得しちゃってね。&lt;/p&gt;

&lt;p&gt;ちなみにオレはGMOさん(&lt;a href=&#34;http://www.onamae.com/&#34;&gt;お名前.com&lt;/a&gt;)で取得しました。&lt;/p&gt;

&lt;p&gt;ていうことで以下の手順にそってやっていきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/appengine/docs/domain&#34;&gt;Using a Custom Domain - Google App Engine Google Cloud Platform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作業は&lt;a href=&#34;https://console.developers.google.com/&#34;&gt;Developers Console&lt;/a&gt;から行います。&lt;/p&gt;

&lt;p&gt;はじめにGoogleが、使いたいドメインが君のものか確認したいとのことなので、verifyへ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-23/verify.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-23/verify.png&#34; class=&#34;image&#34; alt=&#34;verify&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そうするとこんな画面になるので、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-23/input_domain.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-23/input_domain.png&#34; class=&#34;image&#34; alt=&#34;input_domain&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここに表示されてるテキストを、ドメインを発行した会社さんのほうからTXTレコードとして追加すればOK。&lt;/p&gt;

&lt;p&gt;なんかこの画面、すごい頻度でChromeがエラー吐きまくったけど、クリックしなければ大丈夫だったのでなんとかしのぎました。&lt;/p&gt;

&lt;p&gt;TXTレコードの追加は、お名前.comであれば&lt;a href=&#34;http://www.onamae.com/navi/domain.html&#34;&gt;ドメインNavi&lt;/a&gt;から&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドメイン設定&lt;/li&gt;
&lt;li&gt;DNS関連機能の設定&lt;/li&gt;
&lt;li&gt;DNSレコード設定を利用する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でここに入力すればOK。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-23/input_txt.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-23/input_txt.png&#34; class=&#34;image&#34; alt=&#34;input_txt&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TYPEはTXTにしてVALUEにさっきのテキストを入力。&lt;/p&gt;

&lt;p&gt;場所にもよるけど少し待てば反映されるので、それまでGoogle側の画面で確認ボタンを何度か押してみる。&lt;/p&gt;

&lt;p&gt;反映されてたら確認が通るはず。&lt;/p&gt;

&lt;h2 id=&#34;ドメインの選択:f29605b0f60814e1a345ce000c7a37f6&#34;&gt;ドメインの選択&lt;/h2&gt;

&lt;p&gt;確認が出来たらサブドメインとしてプレフィックスを付けるのかを決める。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-23/step2.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-23/step2.png&#34; class=&#34;image&#34; alt=&#34;step2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これによって最後のステップが変わるけど、オレは確認の時点でサブドメインとして設定したので、Google側では特に付加せずやってます。&lt;/p&gt;

&lt;h2 id=&#34;aレコードとaaaaレコードの追加:f29605b0f60814e1a345ce000c7a37f6&#34;&gt;AレコードとAAAAレコードの追加&lt;/h2&gt;

&lt;p&gt;最後はまたDNSレコードの追加。&lt;/p&gt;

&lt;p&gt;ここに記載された一覧をそれぞれのType、Dataに応じてTXTレコードのときと同じように追加すればOK。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-23/step3.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-23/step3.png&#34; class=&#34;image&#34; alt=&#34;step3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとは待ってればそのうち反映されるはず。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Octopressのサイドバーを下部に移動する</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/22/move-sidebar-at-under-the-article/</link>
          <pubDate>Wed, 22 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/22/move-sidebar-at-under-the-article/</guid>
          <description>&lt;p&gt;デフォルトのテーマだとサイドバーの表示/非表示の切り替えが出来て、非表示にするとサイドバーは記事の下に落っこちるんだけど、&lt;/p&gt;

&lt;p&gt;常時この状態にした方がかっこいいんでないか？ということで移動させてみることに。&lt;/p&gt;

&lt;p&gt;サイドバーの非表示時に何が起きているかというと、bodyタグにclassが追加されてます。&lt;/p&gt;

&lt;p&gt;具体的な処理は&lt;code&gt;/javascripts/octopress.js&lt;/code&gt;に書いてあるよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;.toggle-sidebar&#39;).bind(&#39;click&#39;, function(e) {
  e.preventDefault();
  if ($(&#39;body&#39;).hasClass(&#39;collapse-sidebar&#39;)) {
    $(&#39;body&#39;).removeClass(&#39;collapse-sidebar&#39;);
  } else {
    $(&#39;body&#39;).addClass(&#39;collapse-sidebar&#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bodyタグが&lt;code&gt;collapse-sidebar&lt;/code&gt;クラスに属していれば、サイドバーは勝手に下に落っこちる訳だ。&lt;/p&gt;

&lt;p&gt;bodyを描画するテンプレートは&lt;code&gt;_layouts/default.html&lt;/code&gt;で、こんな記載がある。&lt;/p&gt;

&lt;p&gt;長ったらしいので少し見やすく改行してあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body
{% if page.body_id %}
    id=&amp;quot;{{ page.body_id }}&amp;quot;
{% endif %}

{% if page.sidebar == false %}
    class=&amp;quot;no-sidebar&amp;quot;
{% endif %}

{% if page.sidebar == &#39;collapse&#39; or site.sidebar == &#39;collapse&#39; %}
    class=&amp;quot;collapse-sidebar sidebar-footer&amp;quot;
{% endif %}
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sidebarが&lt;code&gt;collapse&lt;/code&gt;の場合にclassが追加されるようになってるね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sidebar-footer&lt;/code&gt;クラスもレイアウトに必要なものらしい。&lt;/p&gt;

&lt;p&gt;というわけでテンプレートを直に変えるのではなくて、&lt;code&gt;_config.yml&lt;/code&gt;に以下を追加すれば対応出来そうだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;sidebar: &amp;quot;collapse&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;トグルボタンのスペースが空いてしまうので、&lt;code&gt;custom/_style.css&lt;/code&gt;に以下も追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.collapse-sidebar #content {
    margin-right: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大体思い通りになったかな。&lt;/p&gt;

&lt;p&gt;別の部分の問題だろうけど、トップページと記事ページで、少しレイアウトが崩れるのが気になる・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>UbuntuにAurigaを構築してみる</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/19/build-auriga-server-on-ubuntu/</link>
          <pubDate>Sun, 19 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/19/build-auriga-server-on-ubuntu/</guid>
          <description>

&lt;p&gt;今更だがAurigaの構築をやってみる。&lt;/p&gt;

&lt;p&gt;どこもWindows環境での構築方法しか載ってないような印象なんだけどそんなことないのかな。&lt;/p&gt;

&lt;h2 id=&#34;ソースのダウンロード:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;ソースのダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://auriga.moe.hm/Auriga/&#34;&gt;Auriga Project&lt;/a&gt;からソースを落とす。&lt;/p&gt;

&lt;p&gt;言うまでもないけどバージョン番号は最新とかで。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget -O auriga.zip http://auriga.moe.hm/Auriga/snapshotmanager.php?num=1221
$ unzip auriga.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンパイル:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;コンパイル&lt;/h2&gt;

&lt;p&gt;なんか事前の設定とか必要なんだろうけど何も考えずにコンパイルしてみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd Auriga-1221full
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、エラーした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;../common/grfio.c:87:20: fatal error: zlib.h: No such file or directory
   #include &amp;lt;zlib.h&amp;gt;
                    ^
compilation terminated.
make[1]: *** [../common/grfio.o] Error 1
make[1]: Leaving directory `/home/daisuketsuji/Downloads/Auriga-1221Full/src/map&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zlibがないらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install zlib1g
$ sudo apt-get install zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通った。&lt;/p&gt;

&lt;h2 id=&#34;grfファイルの準備:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;grfファイルの準備&lt;/h2&gt;

&lt;p&gt;grfファイルを用意しなきゃいけなかったらしい。&lt;/p&gt;

&lt;p&gt;コンパイル前にすることはなかったな。Winならあるのかもね。&lt;/p&gt;

&lt;p&gt;とりあえずgrfファイルはクライアント側にあるので、公式の&lt;a href=&#34;http://ragnarokonline.gungho.jp/beginner/download.html&#34;&gt;クライアントダウンロード&lt;/a&gt;からダウンロード &amp;amp; インストール。&lt;/p&gt;

&lt;p&gt;Ubuntuじゃインストール出来ないから、Windowsでインストールして持ってくんのだるかった・・・。&lt;/p&gt;

&lt;p&gt;持ってきたら&lt;code&gt;conf/grf-files.txt&lt;/code&gt;に追記。&lt;/p&gt;

&lt;p&gt;Aurigaと同じフォルダに入れたのでこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grf: ./data.grf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要な行はコメントアウトで。&lt;/p&gt;

&lt;h2 id=&#34;サーバ起動:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;サーバ起動&lt;/h2&gt;

&lt;p&gt;Linuxの場合起動は&lt;code&gt;auriga-start&lt;/code&gt;を使うみたい。&lt;/p&gt;

&lt;p&gt;解凍直後は実行権限がないので&lt;code&gt;sudo chmod 744 auriga-start&lt;/code&gt;をしとく必要あり。&lt;/p&gt;

&lt;p&gt;で、&lt;code&gt;./auriga-start start&lt;/code&gt;で起動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chrif: connection to the char server was closed. kick all chars
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてエラー。&lt;/p&gt;

&lt;p&gt;ここで一日詰まった。&lt;/p&gt;

&lt;p&gt;ログをよく見てみるとこんな感じの出力が。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;connect login server error : 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロセスを見てみるとloginサーバが生きててcharサーバが死んでるので、charサーバがloginサーバにつなげずに落ちてるんだろう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;log/&lt;/code&gt;に出力されるログを見ているとどうやらアカウントの設定が必要らしい。&lt;/p&gt;

&lt;p&gt;サーバを一度起動すると、エラーしようがなんだろうが&lt;code&gt;save/&lt;/code&gt;以下にセーブデータが作成されるので、そいつを編集する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;save/account.txt&lt;/code&gt;に以下を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;0 s1 p1 - S 0 0 @
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに詰まったのは、ここに追記するフォーマットが全然わからなかったから笑&lt;/p&gt;

&lt;p&gt;tsvになってるみたいなので、タブ区切りで追加しないと読み込まれません。&lt;/p&gt;

&lt;h2 id=&#34;httpdに接続してみる:877a36750c93f6fdaf9ffc2de1905eb6&#34;&gt;httpdに接続してみる&lt;/h2&gt;

&lt;p&gt;サーバが起動してる時は&lt;code&gt;http://127.0.0.1:6900/&lt;/code&gt;にアカウント登録用の画面が公開される。&lt;/p&gt;

&lt;p&gt;はずなのに表示出来ない。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;parse_login : session #5 292 0x4547
parse_login: unknown packet 0x4547 disconnect session #5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結構詰まったんだけど、原因究明の鍵は&lt;code&gt;src/login/login_httpd.c:L38&lt;/code&gt;の以下行でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#ifndef NO_HTTPD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;makeの時にhttpdを無効にしちゃってたみたい。&lt;/p&gt;

&lt;p&gt;なので&lt;code&gt;Makefile&lt;/code&gt;の115行目にあるフラグをコメントアウトすればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;# disable httpd
CFLAGS += -DNO_HTTPD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というわけで、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-10-19/httpd.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-10-19/httpd.png&#34; class=&#34;image&#34; alt=&#34; httpd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;出来ました。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Ubuntuにnode.jsをインストールする</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/18/install-nodejs-on-ubuntu/</link>
          <pubDate>Sat, 18 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/18/install-nodejs-on-ubuntu/</guid>
          <description>

&lt;p&gt;そろそろ新しいことをやらねばなと思うので、node.jsに手を出してみるよ。&lt;/p&gt;

&lt;p&gt;node.jsはmake &amp;amp; make installを推奨しているとのことなので、とりあえずソースを持ってくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget http://nodejs.org/dist/v0.10.32/node-v0.10.32.tar.gz
$ tar zxvf node-v0.10.32.tar.gz
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてエラー&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flock: g++: No such file or directory

make[1]: * [/home/daisuketsuji/Develop/node/out/Release/openssl-cli] Error 69

make[1]: Leaving directory `/home/daisuketsuji/Develop/node/out&#39;

make: * [node] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;g++がない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://packages.ubuntu.com/lucid/build-essential&#34;&gt;build-essential&lt;/a&gt;を使えばいいらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt-get install -y build-essential
$ make
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;またエラー&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;installing /usr/local/bin/node
Traceback (most recent call last):
  File &amp;quot;tools/install.py&amp;quot;, line 191, in &amp;lt;module&amp;gt;
    run(sys.argv[:])
  File &amp;quot;tools/install.py&amp;quot;, line 186, in run
    if cmd == &#39;install&#39;: return files(install)
  File &amp;quot;tools/install.py&amp;quot;, line 130, in files
    action([&#39;out/Release/node&#39;], &#39;bin/node&#39;)
  File &amp;quot;tools/install.py&amp;quot;, line 79, in install
    def install(paths, dst): map(lambda path: try_copy(path, dst), paths)
  File &amp;quot;tools/install.py&amp;quot;, line 79, in &amp;lt;lambda&amp;gt;
    def install(paths, dst): map(lambda path: try_copy(path, dst), paths)
  File &amp;quot;tools/install.py&amp;quot;, line 70, in try_copy
    try_unlink(target_path) # prevent ETXTBSY errors
  File &amp;quot;tools/install.py&amp;quot;, line 33, in try_unlink
    os.unlink(path)
OSError: [Errno 13] Permission denied: &#39;/usr/local/bin/node&#39;
make: *** [install] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ああ・・・。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;行けたっぽいのでインタラクティブシェルを起動してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;daisuketsuji@daisuketsuji-VirtualBox:~/Develop/node-v0.10.32$ node
&amp;gt; console.log(&amp;quot;hello world&amp;quot;)
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worked!&lt;/p&gt;

&lt;h2 id=&#34;そもそもnode-jsって:2001f525b49213f857c10cbda61543d4&#34;&gt;そもそもnode.jsって？&lt;/h2&gt;

&lt;p&gt;色んなところでこう書いてある。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScriptを用いたNon-blocking I/O環境&lt;/p&gt;

&lt;p&gt;「イベントループモデルで、ノンブロッキングI/Oを使用している」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これらについては以下の記事を参考にさせてもらいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/badatmath/20101020/1287587240&#34;&gt;node.js とは何か - I am Bad at Math&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://satoshun00.hatenadiary.com/entry/2012/08/02/172936&#34;&gt;node.jsの仕組み（ノンブロッキングI/Oとかスレッドとか） - 元リア充エンジニアのメモ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nginxが流行ってるのは知ってたし、メモリを食わないっていうのも聞いてはいたけど、そういう背景があったんですね。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Laravelで配列をリクエストパラメータにする</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/29/laravel-array-input/</link>
          <pubDate>Mon, 29 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/29/laravel-array-input/</guid>
          <description>

&lt;p&gt;テーブルとかに入れた複数のInputを同じ名前にして配列でサーバに飛ばしたい、ってときいつも困る。&lt;/p&gt;

&lt;p&gt;Laravelでやろうとしたときにドキュメントが見つけられなかったのでそれっぽくやってみました。&lt;/p&gt;

&lt;h2 id=&#34;やりたいこと:17a94910862713ed034e7ba70d660860&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;こんな感じで同名で複数の値をサーバに渡したいときにどうしたらいいの？っていう話。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;xxx&amp;quot;&amp;gt;
    &amp;lt;table&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにこのままだとDOMの最後尾にあるものだけが展開されるぽい。&lt;/p&gt;

&lt;h2 id=&#34;方法1-name-にする:17a94910862713ed034e7ba70d660860&#34;&gt;方法1 name[]にする&lt;/h2&gt;

&lt;p&gt;まあ大体のFWがこんな感じで展開してくれるんだろうけど、Laravelでも出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;xxx&amp;quot;&amp;gt;
    &amp;lt;table&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;方法2-name-key-にする:17a94910862713ed034e7ba70d660860&#34;&gt;方法2 name[key]にする&lt;/h2&gt;

&lt;p&gt;もちろんこれでも出来た。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;xxx&amp;quot;&amp;gt;
    &amp;lt;table&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[0]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[0]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[1]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[1]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name[2]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;age[2]&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;連想配列になるので、keyはユニークであれば連番じゃなくてもよさそう。&lt;/p&gt;

&lt;p&gt;ためしてないからわからんけど・・・。&lt;/p&gt;

&lt;p&gt;しかし、tableタグにformが入れられなくて困ることが多いんだけど、みんなどうやって解決してんのかなあ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>git管理したくないファイルを除外する</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/28/learn-git-rm-command/</link>
          <pubDate>Sun, 28 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/28/learn-git-rm-command/</guid>
          <description>

&lt;p&gt;ローカル環境でちょこちょこ作ってたやつを本番環境に載せたんだけど、それなりに解決してた環境依存が少し残ってて.gitignoreファイルをちゃんと書くことに。&lt;/p&gt;

&lt;p&gt;しかし本番でcloneしてきたファイルを&lt;strong&gt;うまいことワーキングには残してインデックスから消すやりかた&lt;/strong&gt;がわからない！&lt;/p&gt;

&lt;p&gt;というわけで少しくらいまともに勉強してみる。&lt;/p&gt;

&lt;p&gt;最初につまづいてたのはこのコマンドを連発してたから。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git rm filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやらこいつはインデックスだけでなくワーキングディレクトリからも消すようだ。&lt;/p&gt;

&lt;p&gt;そこでインデックスからだけ消すものはないのかと調べてたらあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git rm --cached filename
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考にさせて頂きました:19a27096b47499bb28940f0ded663c47&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://transitive.info/article/git/command/rm/&#34;&gt;transitive.info - git rm 使い方&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitでforce pushが出来ない</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/27/could-not-force-push-on-git/</link>
          <pubDate>Sat, 27 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/27/could-not-force-push-on-git/</guid>
          <description>

&lt;p&gt;typoを直すために&lt;code&gt;rebase -i&lt;/code&gt;やらをやってたんだけど、操作してたのがmasterブランチだったのでどうしてもforce pushがしたかった。&lt;/p&gt;

&lt;p&gt;一人で使ってたリポジトリだしね。&lt;/p&gt;

&lt;p&gt;んだけど、&lt;code&gt;-f&lt;/code&gt;をつけても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;To git://example.com/project1.git
 ! [rejected]        master -&amp;gt; master (non-fast-forward)
error: failed to push some refs to &#39;git://example.com/project1.git&#39;
To prevent ... See the &#39;Note about
fast-forwards&#39; section of &#39;git push --help&#39; for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じになってしまう・・・。&lt;/p&gt;

&lt;h2 id=&#34;解決:c5ac499954fae3df373a4f81754a5ef2&#34;&gt;解決&lt;/h2&gt;

&lt;p&gt;gitリポジトリのconfigを見たらこんな項目が、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;[receive]
    denyNonFastforwards = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやらこいつを&lt;code&gt;false&lt;/code&gt;にすればよかったらしい。&lt;/p&gt;

&lt;p&gt;最初はtrueになってるもんなのかな・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>_config.ymlに書いたdescriptionが設定されない</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/21/description-is-not-set/</link>
          <pubDate>Sun, 21 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/21/description-is-not-set/</guid>
          <description>&lt;p&gt;認識が間違ってるのか、_config.ymlに書いたdescriptionがサイトに反映されない・・・。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source/_includes/head.html&lt;/code&gt;のコードを見てみるとこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% raw %}
  {% capture description %}{% if page.description %}{{ page.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ description | strip_html | condense_spaces | truncate:150 }}&amp;quot;&amp;gt;
  {% if page.keywords %}&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;{{ page.keywords }}&amp;quot;&amp;gt;{% endif %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;page.descriptionしか見てない？&lt;/p&gt;

&lt;p&gt;同じことで悩んでる人いないのかな・・・と思ったら居た。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sweetme.at/2013/08/06/how-to-set-your-octopress-description-and-keyword-meta-tags/&#34;&gt;Make the Magic Happen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;やっぱり同じ認識のようだ。&lt;/p&gt;

&lt;p&gt;elseifってこう書くんだね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% raw %}
  {% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{% else %}{{ content | raw_content }}{% endif %}{% endcapture %}
  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ description | strip_html | condense_spaces | truncate:150 }}&amp;quot;&amp;gt;
  {% if page.keywords %}&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;{{ page.keywords }}&amp;quot;&amp;gt;{% endif %}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worked!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Octopressのテーマを作ってみる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</link>
          <pubDate>Sun, 21 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/21/make-new-theme-flatten/</guid>
          <description>

&lt;p&gt;元のやつもすっごいかっこよくてよかったんだけど、さすがに他の人とかぶっちゃうのはやだよね。&lt;/p&gt;

&lt;p&gt;でもオレはデザイナーじゃないから、あんまりがっつりやるのもやだよね。&lt;/p&gt;

&lt;p&gt;てことで元のclassicテーマをパクって作ろう。&lt;/p&gt;

&lt;p&gt;Octopressから移行してしまったので、スクリーンショットだけ載せとく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-09-21/flatten.png&#34; class=&#34;image&#34; alt=&#34;flatten&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーマの変え方:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの変え方&lt;/h2&gt;

&lt;p&gt;そもそも変え方すら知らない。&lt;/p&gt;

&lt;p&gt;てことで調べた。&lt;/p&gt;

&lt;p&gt;どうやらここにテーマ単位のディレクトリが配置されるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes
classic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;rake install[theme name]&lt;/code&gt;でインストール。&lt;/p&gt;

&lt;h2 id=&#34;テーマの構成:76235ef2906f03f2c7b92537a8f6cdf7&#34;&gt;テーマの構成&lt;/h2&gt;

&lt;p&gt;作るにも、テーマの定義に何が必要かがわからぬ。&lt;/p&gt;

&lt;p&gt;classicの中を見てみよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic
sass   source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んん、シンプル。&lt;/p&gt;

&lt;p&gt;察するに&lt;code&gt;sass&lt;/code&gt;がスタイル系で&lt;code&gt;source&lt;/code&gt;がテンプレート系なのかな？&lt;/p&gt;

&lt;p&gt;別にページレイアウトを変えたいとか、そんなたいそうなことは考えてないので、sass内をいじるだけでよさそう。&lt;/p&gt;

&lt;p&gt;sass内はどうなってるのかな？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls .themes/classic/sass
_base.scss     _partials.scss base           custom         partials       plugins        screen.scss

octopress git:(source)$ ls .themes/classic/sass/custom
_colors.scss _fonts.scss  _layout.scss _styles.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;.themes/classic/sass/custom/_styles.scss&lt;/code&gt;がオーバーライド用のファイルなわけだな。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;// This File is imported last, and will override other styles in the cascade
// Add styles here to make changes without digging in too much
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本当はsassで書きたいけど今その技術は持ち合わせてないし、ちょっと今やるのも面倒なので普通にCSSを書こう・・・。&lt;/p&gt;

&lt;p&gt;ということで出来ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/flatten&#34;&gt;flatten&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gravatarの件が入っちゃってるから、これは後で分離しなきゃなあ。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>gitのリポジトリ単位にproxyの設定をする</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/20/git-on-proxy/</link>
          <pubDate>Sat, 20 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/20/git-on-proxy/</guid>
          <description>

&lt;h2 id=&#34;事の発端:ca86a8bf870eabf283b4127081a3d388&#34;&gt;事の発端&lt;/h2&gt;

&lt;p&gt;会社ではvimを使ってます。&lt;/p&gt;

&lt;p&gt;plugin管理には&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle.vim&lt;/a&gt;使ってます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.vimrc&lt;/code&gt;は&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;で管理してます。&lt;/p&gt;

&lt;p&gt;neobundle.vimで管理してるpluginは大抵のものがGitHub上で管理されてるから、インストールとかアップデートをするときはneobundle.vimがGitHubまで見に行ってくれるんですね。&lt;/p&gt;

&lt;p&gt;ただ、当然社内はproxyを通していて、gitコマンドが通らない！&lt;/p&gt;

&lt;p&gt;ていうかそもそも&lt;strong&gt;GitHubから&lt;code&gt;.vimrc&lt;/code&gt;を落としてくることすら出来ない！いいやzipで落とせ！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;しかしpluginの導入を手でやるのはだるい・・・。&lt;/p&gt;

&lt;p&gt;マジで？サクラエディタで頑張るしかない？&lt;/p&gt;

&lt;p&gt;いやいやそんなことはない。&lt;/p&gt;

&lt;h2 id=&#34;解決:ca86a8bf870eabf283b4127081a3d388&#34;&gt;解決&lt;/h2&gt;

&lt;p&gt;じゃあこうしようってことで、&lt;code&gt;~/.gitconfig&lt;/code&gt;をこんな感じにしたのよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[https]
        proxy = http://proxy.com:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ひとまず解決したんです。&lt;/p&gt;

&lt;p&gt;そしたら次は&lt;strong&gt;社内のgitに繋がらない！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;マジかよじゃあ&lt;code&gt;~/.gitconfig&lt;/code&gt;をちょこちょこ変えるのかよだせえよそれと思ったら既に解決してくれてる人がいた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tanacasino.hatenablog.com/entry/2013/12/21/003750&#34;&gt;Git の http proxy に関するまとめ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;めんどくさかったけど、個々のpluginの&lt;code&gt;config&lt;/code&gt;にだけproxyの記述を追加することで解決。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OctopressのサイドバーにGravatarを表示させる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/20/make-gravatar-sidebar/</link>
          <pubDate>Sat, 20 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/20/make-gravatar-sidebar/</guid>
          <description>

&lt;h2 id=&#34;octopressのサイドバーってどうなってんの:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;Octopressのサイドバーってどうなってんの？&lt;/h2&gt;

&lt;p&gt;そもそもOctopressの構成がまだよくわかってないのでそこから勉強しよう。&lt;/p&gt;

&lt;p&gt;どうやらデフォルトで準備されてるサイドバーはここに格納されているらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/asides/
delicious.html    github.html       googleplus.html   pinboard.html     recent_posts.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、自分で作りたい場合はここに格納するっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;octopress git:(source)$ ls source/_includes/custom/asides
about.html   twitter.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って&lt;code&gt;_config.yml&lt;/code&gt;に書いてあった。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# list each of the sidebar modules you want to include, in the order you want them to appear.
# To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like &#39;custom/asides/custom_aside_name.html&#39;
default_asides: [custom/asides/about.html, asides/recent_posts.html, custom/asides/twitter.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gravatarの情報って持って来れるの:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;Gravatarの情報って持って来れるの？&lt;/h2&gt;

&lt;p&gt;ちょっとだけ調べてみたらGravatarの画像だけ持ってくるpluginは用意されてるっぽい。&lt;/p&gt;

&lt;p&gt;でもどうせなら自己紹介のところとかも欲しいよね。&lt;/p&gt;

&lt;p&gt;で、Gravatarに&lt;a href=&#34;https://ja.gravatar.com/site/implement/&#34;&gt;開発者向け資料&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;しっかり読んでないけど、&lt;a href=&#34;https://ja.gravatar.com/site/implement/profiles/json/&#34;&gt;JSONで返せるっぽい&lt;/a&gt;からこれを使えばいいかな。&lt;/p&gt;

&lt;p&gt;ハッシュを指定する必要があるみたいなので、公式から取得しとく。&lt;/p&gt;

&lt;h2 id=&#34;作るぞ:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;作るぞ&lt;/h2&gt;

&lt;p&gt;なんか最初から&lt;code&gt;source/_include/custom/asides&lt;/code&gt;に&lt;code&gt;about.html&lt;/code&gt;ってのがあるし、これにプロフィールを書こうかな。&lt;/p&gt;

&lt;p&gt;まず取得したハッシュを&lt;code&gt;_config.yml&lt;/code&gt;に定義しちゃおう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gravatar
gravatar_hash: 1e092e9f2cda827deb8623be2e846936
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;about.html&lt;/code&gt;からハッシュを参照してJSONを取得しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section id=&amp;quot;about&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;img id=&amp;quot;photo&amp;quot;&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;displayname&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;aboutme&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;currentlocation&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;div id=&amp;quot;urls&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;script&amp;gt;
    $(function() {
        var url = &amp;quot;https://ja.gravatar.com/{% raw %}{{ site.gravatar_hash }}{% endraw %}.json?callback=?&amp;quot;;
        $.getJSON(url)
            .done(function(data) {
                var entry = data.entry[0];
                $(&amp;quot;#photo&amp;quot;).attr(&amp;quot;src&amp;quot;, entry.photos[0].value);
                $(&amp;quot;#displayname&amp;quot;).html(entry.displayName);
                $(&amp;quot;#aboutme&amp;quot;).html(entry.aboutMe);
                // $(&amp;quot;#currentlocation&amp;quot;).html(entry.currentLocation);
                entry.urls.forEach(function(el){
                    $(&amp;quot;#urls&amp;quot;).append($(&amp;quot;&amp;lt;a href=&#39;&amp;quot; + el.value + &amp;quot;&#39;&amp;gt;&amp;quot; + el.title + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;br /&amp;gt;&amp;quot;));
                });

                $(&amp;quot;#about&amp;quot;).show();
            });
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはCSSにちょちょいとスタイルをつけるだけ。&lt;/p&gt;

&lt;p&gt;独自のスタイルは&lt;code&gt;.themes/classic/sass/custom/_styles.scss&lt;/code&gt;に書けばいいぽい。&lt;/p&gt;

&lt;p&gt;SASSとかも頃合い見て勉強しなきゃいけないかな・・・。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;img#photo {
    display: block;
    margin: auto;
}

div#displayname {
    text-align: center;
    font-weight: bold;
}

div#aboutme {
}

div#currentlocation {
    text-align: center;
}

div#urls {
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず表示出来たからここまででいいや。&lt;/p&gt;

&lt;p&gt;ついでに自分用のtheme作っちゃったから、ある程度整備出来たらgithubにあげよっかな。&lt;/p&gt;

&lt;h2 id=&#34;参考にさせて頂きました:c73b8990ae6ff308f2649661fb572fc8&#34;&gt;参考にさせて頂きました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.awairo.net/blog/2013/12/24/octopress-aside-of-getting-profile-from-gravatar/&#34;&gt;Gravatarのプロフィールを表示するOctopressのサイドバー&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>GitHub PagesにOctopressをのっけてみる</title>
          <link>http://yet.unresolved.xyz/blog/2014/09/17/install-the-octopress-on-github-pages/</link>
          <pubDate>Wed, 17 Sep 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/09/17/install-the-octopress-on-github-pages/</guid>
          <description>

&lt;p&gt;&lt;a href=&#34;https://ja.wordpress.com/&#34;&gt;WordPress.com&lt;/a&gt;を使ってたんだけど、お金払わないと融通がきかないぽいので移行することに。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;が使ってみたかったのと、カッコいいデザインが多そうな&lt;a href=&#34;http://hatenablog.com/&#34;&gt;Hatena&lt;/a&gt;かなーと思ってたんだけど、&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;が面白そうなのでとりあえずノリでこっちにしてみるよ。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;github-pages:b7f97f2e97092fbf52749ce6e3f01256&#34;&gt;Github Pages？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;は&lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt;に&lt;code&gt;[ユーザ名].github.io&lt;/code&gt;って名前のリポジトリを作るだけで、pushしたページを外部公開出来るサービス。&lt;/p&gt;

&lt;p&gt;そこでよく使われるBlogフレームワーク(?)が&lt;a href=&#34;http://octopress.org/&#34;&gt;Octopress&lt;/a&gt;らしい。&lt;/p&gt;

&lt;p&gt;どうやらOctopressは&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;という静的ページジェネレータをさらに活用するためのものとのことで、&lt;/p&gt;

&lt;p&gt;このJekyll(読みはジキル？)はMarkdownとかで書いたテキストファイルを静的ページに変換したりしてくれるものみたい。&lt;/p&gt;

&lt;h2 id=&#34;octopressをインストールする:b7f97f2e97092fbf52749ce6e3f01256&#34;&gt;Octopressをインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/docs/setup/&#34;&gt;Octopress Setup&lt;/a&gt;が非常に良く書かれているのと、Octopress自体が見通しよく作られているので特に躓くことなく導入出来ました。&lt;/p&gt;

&lt;p&gt;Octopressは記事を書くPCに導入して丸ごとGitHubにpushしてしまう仕組みらしく、まずは個人のPCに導入が必要。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ gem install bundler
$ rbenv rehash
$ bundle install
$ rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、次にデプロイする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/docs/deploying/&#34;&gt;Deploying&lt;/a&gt;を見る限り、GitHub Pagesだけじゃなく、HerokuやRsyncでの利用も出来るっぽい。&lt;/p&gt;

&lt;p&gt;なんかVPSとかでも運用してる人がいるっぽいね。&lt;/p&gt;

&lt;p&gt;前述した通り今回はGitHub Pagesを利用することにしました。&lt;/p&gt;

&lt;p&gt;最初に&lt;code&gt;[ユーザ名].github.io&lt;/code&gt;って名前のリポジトリを作っておく必要があるよ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rake setup_github_pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リポジトリのURLとかが聞かれるので、表示された説明の通り入力。&lt;/p&gt;

&lt;p&gt;pushしとく必要もあるっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ rake generate
$ rake deploy
$ git add .
$ git commit -m &#39;your message&#39;
$ git push origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rake deploy&lt;/code&gt;で乗っかるのは記事とかその辺のファイルだけなのかな？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a few seconds you should get an email from Github telling you that your commit has been received and will be published on your site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;待ってりゃ公開されるぜとのことで、ちょっと待ったら公開されました。&lt;/p&gt;

&lt;h2 id=&#34;記事を書く:b7f97f2e97092fbf52749ce6e3f01256&#34;&gt;記事を書く&lt;/h2&gt;

&lt;p&gt;記事は&lt;code&gt;rake new_post[&amp;quot;title&amp;quot;]&lt;/code&gt;で行けるらしい。&lt;/p&gt;

&lt;p&gt;でもオレは&lt;code&gt;alias rake=&amp;quot;noglob rake&amp;quot;&lt;/code&gt;しとかなきゃダメだった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ackintosh.github.io/blog/2013/02/02/cant-create-post/&#34;&gt;Octopressで記事が作れない(zsh)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;どうやらzshを使ってる人は同様の事象になるっぽい？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake new_post[&amp;quot;title&amp;quot;]&lt;/code&gt;で`source/_posts&amp;rsquo;に記事が作成されるのでそれを編集。&lt;/p&gt;

&lt;p&gt;Markdown用にエディタ入れようかな。&lt;/p&gt;

&lt;p&gt;記事を書いたら&lt;code&gt;rake generate&lt;/code&gt;で記事が見れる状態のファイルに変換される。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake watch&lt;/code&gt;しとくとファイルの変更を監視して常時generateしてくれる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rake preview&lt;/code&gt;でWEBrickが立ち上がってローカルで確認出来る。&lt;/p&gt;

&lt;p&gt;必要なものはすべて揃ってて便利。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
