<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unresolved </title>
    <link>http://yet.unresolved.xyz/tags/html/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2015-04-04 22:39:07 &#43;0900 JST</updated>

    
      
        <item>
          <title>CSS / HTMLで味わった苦悩の数々</title>
          <link>http://yet.unresolved.xyz/blog/2015/04/04/anguish-in-the-css-and-html/</link>
          <pubDate>Sat, 04 Apr 2015 22:39:07 JST</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2015/04/04/anguish-in-the-css-and-html/</guid>
          <description>

&lt;p&gt;CSSってアンチパターンとかベストプラクティスみたいなのをあんまり聞かないよね。&lt;/p&gt;

&lt;p&gt;デザイナじゃないオレがフロントエンドに触れて苦しんだこととかノウハウとかをまとめてみようと思う。&lt;/p&gt;

&lt;h2 id=&#34;セクションを意識する:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;セクションを意識する&lt;/h2&gt;

&lt;p&gt;HTML5から&lt;code&gt;section&lt;/code&gt;タグが出てきたね。&lt;/p&gt;

&lt;p&gt;これはそのタグの話ではなくて、画面レイアウトを考えた上での大枠について。&lt;/p&gt;

&lt;p&gt;オレがやって失敗だったなと思ったのは&lt;strong&gt;ページの一部からHTMLを書き始めるやり方。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;これをやってしまうとページの一部分から完成していくから、全体で統制が取れなくなることが多かった。&lt;/p&gt;

&lt;p&gt;具体的に言うと、だいたいのページはこんな感じのセクション分けになるはず。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype HTML&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    metaタグ。
    CSSフレームワークの読み込み。
    オーバライド用のCSSファイルの読み込み。
    などなど。
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      ヘッダ。ロゴや一部のメニューを置く。
    &amp;lt;/header&amp;gt;
    &amp;lt;div&amp;gt;
      グローバルメニュー。サイトによってはheaderで事足りる場合も。
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      メインコンテンツ。この中でカラム分けをしたり、さらに細分化されたセクション分けをしたりする。
    &amp;lt;/div&amp;gt;
    &amp;lt;footer&amp;gt;
      コピーライトを書いたりする。
      最近はサイトマップをここに置いたりすることが多いみたい。
    &amp;lt;/footer&amp;gt;
    JavaScriptの読み込み
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;個人的に好きに書いていい場面では&lt;code&gt;html&lt;/code&gt;タグ、&lt;code&gt;head&lt;/code&gt;、&lt;code&gt;body&lt;/code&gt;タグは省略するんだけど、今回はその話は置いておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/wadako111/items/7100c02337f14df07205&#34;&gt;&amp;lt;html&amp;gt;,&amp;lt;body&amp;gt;は要らない？Googleが推奨するHTMLファイルの記法 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こういう風に、自分が作りたいサイトの全体像から、&lt;strong&gt;各セクションの根底に来るであろうタグ&lt;/strong&gt;を最初に配置しておく。&lt;/p&gt;

&lt;p&gt;こうしなかったせいで、あとで要素を追加したときにDOMの全体像が不自然な形になってしまうことがあった。&lt;/p&gt;

&lt;p&gt;あと、無駄に要素を重ねたりするとHTMLの構造を理解するのが辛くなる。&lt;/p&gt;

&lt;h2 id=&#34;idとクラスを使い分ける:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;IDとクラスを使い分ける&lt;/h2&gt;

&lt;p&gt;CSSは本当にパフォーマンスコストがかかりづらいのだろうか？&lt;/p&gt;

&lt;p&gt;もしそうだとしても、意識しない理由はどこにもないと思う。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/jonrohan/githubs-css-performance&#34;&gt;https://speakerdeck.com/jonrohan/githubs-css-performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正直な話をすれば、スタイルをあてたいならもうクラスを見境なしにつけてしまっても多分問題なくやっていける。&lt;/p&gt;

&lt;p&gt;なのにID、クラスどっちにするかとかそういう不要な検討事項を増やすのはいやだよね。&lt;/p&gt;

&lt;p&gt;でもサイトの規模によってはパフォーマンスは死活問題だし、何よりIDとクラスの違いで読みやすさが変わると思う。&lt;/p&gt;

&lt;p&gt;さっきの例を使うと、オレはだいたいこういうIDを先に付けておく。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;
    ヘッダ。ロゴや一部のメニューを置く。
  &amp;lt;/header&amp;gt;
  &amp;lt;div id=&amp;quot;menu&amp;quot;&amp;gt;
    グローバルメニュー。サイトによってはheaderで事足りる場合も。
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&amp;quot;body&amp;quot;&amp;gt;
    メインコンテンツ。この中でカラム分けをしたり、さらに細分化されたセクション分けをしたりする。
  &amp;lt;/div&amp;gt;
  &amp;lt;footer id=&amp;quot;footer&amp;quot;&amp;gt;
    コピーライトを書いたりする。
    最近はサイトマップをここに置いたりすることが多いみたい。
  &amp;lt;/footer&amp;gt;
  JavaScriptの読み込み
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この各セクションのルート要素は絶対にサイト内でユニークだから。&lt;/p&gt;

&lt;p&gt;こうすることで、後から見たときに&lt;strong&gt;この要素は固有なものなんだな&lt;/strong&gt;っていうのがわかる。&lt;/p&gt;

&lt;p&gt;でも&lt;code&gt;header&lt;/code&gt;タグの&lt;code&gt;#header&lt;/code&gt;とか、&lt;code&gt;#body&lt;/code&gt;や&lt;code&gt;#footer&lt;/code&gt;の命名はイケてないように見えるよね。&lt;/p&gt;

&lt;p&gt;ここの命名については個人的なものだから、意図する意味の単語をつけてもらえればいいと思う。&lt;/p&gt;

&lt;p&gt;ただ、&lt;code&gt;header&lt;/code&gt;タグや&lt;code&gt;footer&lt;/code&gt;タグはサイト内でユニークなもの&lt;strong&gt;ではない&lt;/strong&gt;ので、タグに直接スタイルをあてるのは避けるべき。&lt;/p&gt;

&lt;h2 id=&#34;命名は1分考えてからつける:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;命名は1分考えてからつける&lt;/h2&gt;

&lt;p&gt;まあこれはCSSだけじゃなくプログラミング言語でも同じ事だけど、命名はしっかり考えたほうがいい。&lt;/p&gt;

&lt;p&gt;例えばIDなら固有な名前にしたほうがいいし、クラスならある程度抽象的なものにしたほうがいい。&lt;/p&gt;

&lt;p&gt;クラスに固有なものをつける場合は、それがIDにするべきでないかを検討すべき。&lt;/p&gt;

&lt;p&gt;個人的にやめてほしいのは、&lt;strong&gt;そのスタイルを体現した命名&lt;/strong&gt;をすること。&lt;/p&gt;

&lt;p&gt;例えば、赤いボタンに&lt;code&gt;.red-button&lt;/code&gt;とかそういうの。&lt;/p&gt;

&lt;p&gt;これは後の章でも書くけど、もう少し抽象的でスタイルの内容を変えたときに命名と齟齬が出ないものにすべきだと思う。&lt;/p&gt;

&lt;p&gt;Bootstrapでは、&lt;code&gt;.btn-danger&lt;/code&gt;とかつけてるね。&lt;/p&gt;

&lt;p&gt;じゃないとあとで色を変えたときにクラス名まで変える羽目になることがある。&lt;/p&gt;

&lt;h2 id=&#34;抽象的な名前を付ける-固有な名前をつけない:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;抽象的な名前を付ける、固有な名前をつけない&lt;/h2&gt;

&lt;p&gt;例えば、&lt;code&gt;.title&lt;/code&gt;ってクラスを考えるとする。&lt;/p&gt;

&lt;p&gt;これはメインコンテンツのタイトルかもしれないし、サイドバーに置くパネルのタイトルかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.main-title&lt;/code&gt;とか&lt;code&gt;.side-bar-title&lt;/code&gt;とか付けてもいいんだけど、汎用的で固有な使い方が出来ればそれが一番だよね。&lt;/p&gt;

&lt;p&gt;そういう時はこう書くのが今の段階での、自分の解。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;body&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;sidebar&amp;quot;&amp;gt;
        &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;サイドバーのタイトル&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
        &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;メインコンテンツのタイトル&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.title {
  color: #ddd;
}

#sidebar .title {
  font-size: 2rem;
}

#content .title {
  font-size: 2.5rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておけば、タイトル共通の定義も出来るし、個々のタイトルに対しての定義も出来る。&lt;/p&gt;

&lt;p&gt;でも、もしかしたらサイドバーの中でも特定のタイトルだけ、スタイルを変えたい場合があるかもね。&lt;/p&gt;

&lt;p&gt;今の書き方だと、サイドバーのタイトルを個別に変えたりするのは出来そうにない。&lt;/p&gt;

&lt;p&gt;そういう時は、&lt;code&gt;.title&lt;/code&gt;の派生を作る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&amp;quot;body&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;sidebar&amp;quot;&amp;gt;
        &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;サイドバーのタイトル&amp;lt;/h2&amp;gt;
        &amp;lt;h2 class=&amp;quot;title title-active&amp;quot;&amp;gt;サイドバーのちょっと強調したいタイトル&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
        &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;メインコンテンツのタイトル&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.title {
  color: #ddd;
}

#sidebar .title {
  font-size: 2rem;
}

#sidebar .title-active {
  font-weight: 900;
}

#content .title {
  font-size: 2.5rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうすることで、&lt;strong&gt;特定のクラスを付けたり外したりするだけでスタイルを変えることが出来る。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.title&lt;/code&gt;自体は残しておくことで、共通の定義を生かすことも出来る。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.title&lt;/code&gt;を消さずに新たなクラスを追加してるところが大事なポイント。&lt;/p&gt;

&lt;p&gt;極力まとめておいて、特別なスタイルを当てたい場合にだけクラスを追加していくやり方がいいと思う。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.side-bar-title&lt;/code&gt;とかにしてもいいんだけど、その名前だと同じスタイルを他の場所で使いたいときに困るよね。&lt;/p&gt;

&lt;p&gt;それに固有な名前をつけてしまうと、固有な要素の数だけクラスが溢れることになっちゃう。&lt;/p&gt;

&lt;p&gt;この場合は、&lt;code&gt;#sidebar&lt;/code&gt;に入れなくてもいいかもしれないね。&lt;/p&gt;

&lt;h2 id=&#34;無駄なネストをしない:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;無駄なネストをしない&lt;/h2&gt;

&lt;p&gt;当たり前の事。&lt;/p&gt;

&lt;p&gt;深くすれば読みづらくなるしタグの抜け漏れとかも発生する。&lt;/p&gt;

&lt;p&gt;タグは増やすのは楽だけど減らすのは大変。&lt;/p&gt;

&lt;p&gt;だからサイトの運営が続くにつれてネストが深くなりがちだし、当たり前のことだけど気をつけていなきゃいけない。&lt;/p&gt;

&lt;h2 id=&#34;タグの用途を意識する:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;タグの用途を意識する&lt;/h2&gt;

&lt;p&gt;なんか見出しを&lt;code&gt;div&lt;/code&gt;で囲んで&lt;code&gt;font-size&lt;/code&gt;を指定する人をよく見る気がする。&lt;/p&gt;

&lt;p&gt;その意図を持ったタグがあるのであればそれを使おう。&lt;/p&gt;

&lt;p&gt;見出しなら&lt;code&gt;h&lt;/code&gt;タグがあるしね。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;h1&lt;/code&gt;タグは1ページに付き、1つまで！(MUSTではないらしい)&lt;/p&gt;

&lt;h2 id=&#34;remとかpxとか-単位は理解した上で使う:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;remとかpxとか、単位は理解した上で使う&lt;/h2&gt;

&lt;p&gt;個人的に、&lt;code&gt;font-size&lt;/code&gt;は&lt;code&gt;rem&lt;/code&gt;、&lt;code&gt;margin&lt;/code&gt;や&lt;code&gt;padding&lt;/code&gt;は&lt;code&gt;px&lt;/code&gt;と決めて使ってる。&lt;/p&gt;

&lt;p&gt;単位が混在するのは統一感がなくなるし、小さな差異が発生するからある程度ルールを決めて書くのがいいのかなと思う。&lt;/p&gt;

&lt;p&gt;単位は色々種類があるから、見た目がそれなりだからいいやではなく理解してから使うべきだと思った。&lt;/p&gt;

&lt;h2 id=&#34;不用意にfloatを使わない:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;不用意にfloatを使わない&lt;/h2&gt;

&lt;p&gt;もちろん必要な場面はあるんだけど、&lt;code&gt;float&lt;/code&gt;はあんまり気軽に使うと変なところに影響が出たりする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clearfix&lt;/code&gt;とかも考えながら使える人ならいいけど、そうでないならまず本当に&lt;code&gt;float&lt;/code&gt;が必要なのかを検討すべき。&lt;/p&gt;

&lt;p&gt;ちなみにBootstrapを使っているなら、&lt;code&gt;.pull-left&lt;/code&gt;や&lt;code&gt;.pull-right&lt;/code&gt;っていうhelperクラスが用意されてる。&lt;/p&gt;

&lt;h2 id=&#34;不用意にdisplayをいじらない:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;不用意にdisplayをいじらない&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;display&lt;/code&gt;は各タグにしっかり設定されているものだから、&lt;code&gt;display&lt;/code&gt;を変更する前にタグ選びから見直したほうがいい。&lt;/p&gt;

&lt;p&gt;もちろん、どうしても変えなきゃいけない場面はあるんだけども。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;block&lt;/code&gt;と&lt;code&gt;inline&lt;/code&gt;くらいは最初に勉強しておくべきだと思った。&lt;/p&gt;

&lt;h2 id=&#34;cssフレームワークを信じる:8ce6f11ffb5ab38525aa42f985db3a46&#34;&gt;CSSフレームワークを信じる&lt;/h2&gt;

&lt;p&gt;BootstrapとかSkeltonとかを使っている場合の話。&lt;/p&gt;

&lt;p&gt;いろいろ頑張った結果なんだけど、隠蔽してくれるフレームワークがあるのであれば出来る限りそれに任せたほうがいい。&lt;/p&gt;

&lt;p&gt;例えばレスポンシブにするならフレームワークが用意してくれてるブレークポイントに従ったほうがいいし、&lt;/p&gt;

&lt;p&gt;そもそもレスポンシブなコンポーネントを提供してくれてるならそれを使ったほうがいい。&lt;/p&gt;

&lt;p&gt;スタイルを変えたいならオーバライドすればいいしね。&lt;/p&gt;

&lt;p&gt;あと、helperクラスは結構使える。&lt;/p&gt;

&lt;p&gt;Bootstrapであれば&lt;code&gt;.text-center&lt;/code&gt;とか&lt;code&gt;.cleafix&lt;/code&gt;とかも便利に使えると思う。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>OctopressをW3Cのバリデーションにパスさせる</title>
          <link>http://yet.unresolved.xyz/blog/2014/11/12/pass-the-validation-of-w3c/</link>
          <pubDate>Wed, 12 Nov 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/11/12/pass-the-validation-of-w3c/</guid>
          <description>&lt;p&gt;ふと思い立って&lt;a href=&#34;http://validator.w3.org/&#34;&gt;Markup Validation Service&lt;/a&gt;をやってみたら13個もエラーが出たので対応してみるよ。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code&gt;Error Line 50, Column 32: Element hgroup not allowed as child of element header in this context. (Suppressing further errors from this subtree.)
  &amp;lt;header role=&amp;quot;banner&amp;quot;&amp;gt;&amp;lt;hgroup&amp;gt;
Content model for element header:
Flow content, but with no header, footer, or main element descendants.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hgroup&lt;/code&gt;は&lt;code&gt;header&lt;/code&gt;タグの中に入れちゃダメだよ。&lt;/p&gt;

&lt;p&gt;次のも関連してる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 50, Column 32: The hgroup element is obsolete. To mark up subheadings, consider either just putting the subheading into a p element after the h1-h6 element containing the main heading, or else putting the subheading directly within the h1-h6 element containing the main heading, but separated from the main heading by punctuation and/or within, for example, a span class=&amp;quot;subheading&amp;quot; element with differentiated styling. To group headings and subheadings, alternative titles, or taglines, consider using the header or div elements.
  &amp;lt;header role=&amp;quot;banner&amp;quot;&amp;gt;&amp;lt;hgroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hgorup&lt;/code&gt;タグは非推奨だよ。&lt;/p&gt;

&lt;p&gt;よし、消そう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 57, Column 72: Bad value subscribe-rss for attribute rel on element a: The string subscribe-rss is not a registered keyword.
…&amp;gt;&amp;lt;a href=&amp;quot;/atom.xml&amp;quot; rel=&amp;quot;subscribe-rss&amp;quot; title=&amp;quot;subscribe via RSS&amp;quot;&amp;gt;RSS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
Syntax of list of link-type keywords:
A whitespace-separated list of link types, with no duplicate keywords in the list. Each link type must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; in the HTML specification, or must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; on the Microformats wiki, or must be an absolute URL. You can register link types on the Microformats wiki yourself.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;subscribe-rss&lt;/code&gt;は&lt;code&gt;rel&lt;/code&gt;に入れていいkeywordじゃないよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Line 64, Column 81: Attribute results not allowed on element input at this point.
…  &amp;lt;input class=&amp;quot;search&amp;quot; type=&amp;quot;text&amp;quot; name=&amp;quot;q&amp;quot; results=&amp;quot;0&amp;quot; placeholder=&amp;quot;Search&amp;quot;/&amp;gt;
Attributes for element input:
Global attributes
accept when type is file
alt when type is image
autocomplete when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, number, range, or color
autofocus
checked when type is checkbox or radio
dirname when type is text or search
disabled
form
formaction when type is submit or image
formenctype when type is submit or image
formmethod when type is submit or image
formnovalidate when type is submit or image
formtarget when type is submit or image
height when type is image
list when type is text, search, url, tel, e-mail, datetime, date, month, week, time, datetime-local, number, range, or color
max when type is datetime, date, month, week, time, datetime-local, number, or range
maxlength when type is text, search, url, tel, e-mail, or password
min when type is datetime, date, month, week, time, datetime-local, number, or range
multiple when type is email or file
name
pattern when type is text, search, url, tel, e-mail, or password
placeholder when type is text, search, url, tel, e-mail, password, or number
readonly when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, or number
required when type is text, search, url, tel, e-mail, password, datetime, date, month, week, time, datetime-local, number, checkbox, radio, or file
size when type is text, search, url, tel, e-mail, or password
src when type is image
step when type is datetime, date, month, week, time, datetime-local, number, or range
type
value when type is not file or image
width when type is image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;input&lt;/code&gt;タグに&lt;code&gt;results&lt;/code&gt;っていう属性は入れちゃだめだよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 110, Column 66: Bad value full-article for attribute rel on element a: The string full-article is not a registered keyword.
… &amp;lt;a rel=&amp;quot;full-article&amp;quot; href=&amp;quot;/blog/2014/11/09/learn-docker/&amp;quot;&amp;gt;Read on &amp;amp;rarr;&amp;lt;/a&amp;gt;
Syntax of list of link-type keywords:
A whitespace-separated list of link types, with no duplicate keywords in the list. Each link type must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; in the HTML specification, or must be listed as allowed on &amp;lt;a&amp;gt; and &amp;lt;area&amp;gt; on the Microformats wiki, or must be an absolute URL. You can register link types on the Microformats wiki yourself.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;full-article&lt;/code&gt;は&lt;code&gt;rel&lt;/code&gt;に入れていいkeywordじゃないよ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Line 332, Column 100: An img element must have an alt attribute, except under certain conditions. For details, consult guidance on providing text alternatives for images.
…3/verify.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/images/2014-10-23/verify.png&amp;quot; title=&amp;quot;verify&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;タグは&lt;code&gt;alt&lt;/code&gt;属性をつけなきゃだめだよ。&lt;/p&gt;

&lt;p&gt;これが計7個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning Line 511, Column 6: Consider using the h1 element as a top-level heading only (all h1 elements are treated as top-level headings by many screen readers and other tools).
  &amp;lt;h1&amp;gt;About Me&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;はトップレベルだけで使ってよ。&lt;/p&gt;

&lt;p&gt;これが計8個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Line 513, Column 18: Element img is missing required attribute src.
  &amp;lt;img id=&amp;quot;photo&amp;quot;&amp;gt;
Attributes for element img:
Global attributes
alt
src
crossorigin
usemap
ismap
width
height
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;タグに&lt;code&gt;src&lt;/code&gt;属性がないよ。(Ajaxで書いてたせい。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error Line 612, Column 7: Element style not allowed as child of element aside in this context. (Suppressing further errors from this subtree.)
&amp;lt;style&amp;gt;
Contexts in which element style may be used:
If the scoped attribute is absent: where metadata content is expected.
If the scoped attribute is absent: in a noscript element that is a child of a head element.
If the scoped attribute is present: where flow content is expected, but before any other flow content other than inter-element whitespace and style elements, and not as the child of an element whose content model is transparent.
Content model for element aside:
Flow content, but with no main element descendants.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;aside&lt;/code&gt;タグの中で&lt;code&gt;style&lt;/code&gt;書いちゃだめだよ。&lt;/p&gt;

&lt;p&gt;てことで、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://yet.unresolved.xyz/images/2014-11-12/green.png&#34;&gt;&lt;img src=&#34;http://yet.unresolved.xyz/images/2014-11-12/green.png&#34; class=&#34;image&#34; alt=&#34;green&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;オールグリーン！&lt;/p&gt;

&lt;p&gt;警告はもうだるいからいいや&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
