<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UNRESOLVED </title>
    <link>http://yet.unresolved.xyz/tags/database/</link>
    <language>en-us</language>
    <author>Daisuke Tsuji</author>
    <rights>(C) 2015</rights>
    <updated>2014-12-11 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Lobosを使ってマイグレーションをする</title>
          <link>http://yet.unresolved.xyz/blog/2014/12/11/usage-for-lobos-migration/</link>
          <pubDate>Thu, 11 Dec 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/12/11/usage-for-lobos-migration/</guid>
          <description>

&lt;p&gt;1年前くらいには、SQLまで隠蔽するORMとか嫌い！テーブルの自動生成やだ！とか言ってたのに、いつの間にかスキーマ操作なんてフレームワークがやるものだよね、って考えになってしまったよ・・・。&lt;/p&gt;

&lt;p&gt;というわけでClojureを使ってWeb開発をする際も使いたいので、Lobosというスキーマのマニュピレーション、マイグレーションツールを使ってみます。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;本体はここ&lt;a href=&#34;https://github.com/budu/lobos&#34;&gt;budu/lobos&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;project.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;:dependencies [[lobos &amp;quot;1.0.0-beta3&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加して&lt;code&gt;lein deps&lt;/code&gt;するだけでおーけー。&lt;/p&gt;

&lt;p&gt;Leiningenのプラグインとして使える&lt;a href=&#34;https://github.com/pupeno/lein-lobos&#34;&gt;pupeno/lein-lobos&lt;/a&gt;ってのもあるようだ。&lt;/p&gt;

&lt;p&gt;こっちも使う場合は、&lt;code&gt;ploject.clj&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;:plugins [lein-lobos &amp;quot;1.0.0-beta1&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加。&lt;/p&gt;

&lt;p&gt;全体を載っけるとこんな感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(defproject tpc &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]
                 [compojure &amp;quot;1.2.0&amp;quot;]
                 [ring/ring-defaults &amp;quot;0.1.2&amp;quot;]
                 [enlive &amp;quot;1.1.5&amp;quot;]
                 [korma &amp;quot;0.4.0&amp;quot;]
                 [postgresql &amp;quot;9.1-901.jdbc4&amp;quot;]
                 [lobos &amp;quot;1.0.0-beta3&amp;quot;]]
  :plugins [[lein-ring &amp;quot;0.8.13&amp;quot;]
            [lein-haml-sass &amp;quot;0.2.7-SNAPSHOT&amp;quot;]
            [lein-lobos &amp;quot;1.0.0-beta1&amp;quot;]]
  :ring {:handler tpc.core.handler/app}
  :profiles
  {:dev {:dependencies [[javax.servlet/servlet-api &amp;quot;2.5&amp;quot;]
                        [ring-mock &amp;quot;0.1.5&amp;quot;]
                        [org.xerial/sqlite-jdbc &amp;quot;3.6.16&amp;quot;]]}}
  :scss {:src &amp;quot;resources/scss&amp;quot;
         :output-directory &amp;quot;resources/public/css&amp;quot;
         :output-extension &amp;quot;css&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テーブル定義をしてみる:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;テーブル定義をしてみる&lt;/h2&gt;

&lt;p&gt;今回はSQLiteにて実施。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src&lt;/code&gt;ディレクトリ直下に&lt;code&gt;lobos&lt;/code&gt;ってディレクトリを作成して、その中にいろいろな設定を突っ込む必要があるらしい。&lt;/p&gt;

&lt;p&gt;このディレクトリの名前は変えてもいいみたいだけど面倒になりそうだからこのままで。&lt;/p&gt;

&lt;p&gt;まずは接続情報を記載する&lt;code&gt;src/lobos/config.clj&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.config
  (:use lobos.connectivity))

(def db_dev
     {:classname &amp;quot;org.sqlite.JDBC&amp;quot;
      :subprotocol &amp;quot;sqlite&amp;quot;
      :subname &amp;quot;./dev.sqlite3&amp;quot;})

(open-global db_dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にスキーマ操作で使われている(と思われる)ヘルパー、&lt;code&gt;src/lobos/helpers.clj&lt;/code&gt;を定義。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.helpers
  (:refer-clojure :exclude [bigint boolean char double float time])
  (:use (lobos schema)))

(defn surrogate-key [table]
  (integer table :id :auto-inc :primary-key))

(defn timestamps [table]
  (-&amp;gt; table
      (timestamp :updated_on)
      (timestamp :created_on (default (now)))))

(defn refer-to [table ptable]
  (let [cname (-&amp;gt; (-&amp;gt;&amp;gt; ptable name butlast (apply str))
                  (str &amp;quot;_id&amp;quot;)
                  keyword)]
    (integer table cname [:refer ptable :id :on-delete :set-null])))

(defmacro tbl [name &amp;amp; elements]
  `(-&amp;gt; (table ~name)
       (timestamps)
       ~@(reverse elements)
       (surrogate-key)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、目的のマイグレーション定義を&lt;code&gt;src/lobos/migrations.clj&lt;/code&gt;に。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clj&#34;&gt;(ns lobos.migrations
  (:refer-clojure :exclude [alter drop
                            bigint boolean char double float time])
  (:use (lobos [migration :only [defmigration]] core schema
               config helpers)))

(defmigration add-sites-table
  (up [] (create
          (tbl :sites
            (varchar :name 255)
            (varchar :url 255)
            (varchar :rss 255)
            (varchar :image 255)
            (integer :cat)
            )))
  (down [] (drop (table :sites))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;マイグレーションの実行:a4d3af33140cffc65cf5c9a1e4293067&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;ここが結構厄介だった。&lt;/p&gt;

&lt;p&gt;というか、出来たといえば出来たんだけど、もっと正しい方法があるような気が・・・。&lt;/p&gt;

&lt;p&gt;REPLにて以下を実行。&lt;/p&gt;

&lt;p&gt;WARNINGは多分すでに存在するシンボルを置き換えてしまってることの警告だからとりあえず無視。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure-repl&#34;&gt;tpc git:(master)$ lein repl
(use &#39;(lobos connectivity core schema))nREPL server started on port 50092 on host 127.0.0.1 - nrepl://127.0.0.1:50092
REPL-y 0.3.1
Clojure 1.6.0
    Docs: (doc function-name-here)
          (find-doc &amp;quot;part-of-name-here&amp;quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt; (use &#39;(lobos connectivity core schema))
WARNING: alter already refers to: #&#39;clojure.core/alter in namespace: user, being replaced by: #&#39;lobos.core/alter
WARNING: drop already refers to: #&#39;clojure.core/drop in namespace: user, being replaced by: #&#39;lobos.core/drop
WARNING: boolean already refers to: #&#39;clojure.core/boolean in namespace: user, being replaced by: #&#39;lobos.schema/boolean
WARNING: char already refers to: #&#39;clojure.core/char in namespace: user, being replaced by: #&#39;lobos.schema/char
WARNING: double already refers to: #&#39;clojure.core/double in namespace: user, being replaced by: #&#39;lobos.schema/double
WARNING: bigint already refers to: #&#39;clojure.core/bigint in namespace: user, being replaced by: #&#39;lobos.schema/bigint
WARNING: float already refers to: #&#39;clojure.core/float in namespace: user, being replaced by: #&#39;lobos.schema/float
WARNING: time already refers to: #&#39;clojure.core/time in namespace: user, being replaced by: #&#39;lobos.schema/time
nil
user=&amp;gt; (require &#39;lobos.migrations)
nil
user=&amp;gt; (migrate)
add-sites-table
nil
user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tpc git:(master)$ sqlite3 dev.sqlite3
SQLite version 3.8.5 2014-08-15 22:37:57
Enter &amp;quot;.help&amp;quot; for usage hints.
sqlite&amp;gt; .tables
lobos_migrations  sites
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できてる！&lt;/p&gt;

&lt;p&gt;まだまだ名前空間とか&lt;code&gt;require&lt;/code&gt;あたりの理解が甘いなー・・・。&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>クラスタ化インデックスとかカバリングインデックスについてどうせ忘れるからまとめる</title>
          <link>http://yet.unresolved.xyz/blog/2014/10/23/about-sqlserver-clusteredindex-and-nonclustered-index/</link>
          <pubDate>Thu, 23 Oct 2014 00:00:00 UTC</pubDate>
          <author>Daisuke Tsuji</author>
          <guid>http://yet.unresolved.xyz/blog/2014/10/23/about-sqlserver-clusteredindex-and-nonclustered-index/</guid>
          <description>

&lt;p&gt;SQL Serverを使ってて、ちょっと曖昧にしかわからんなってところがあったので少し調べてみた。&lt;/p&gt;

&lt;h2 id=&#34;クラスタ化-非クラスタ化インデックスの違い:c92488df51ae62a183920f8a12e0e585&#34;&gt;クラスタ化 / 非クラスタ化インデックスの違い&lt;/h2&gt;

&lt;p&gt;MySQLにも同じ話があったんだね。&lt;/p&gt;

&lt;p&gt;まず参考にしたのはMSDN。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/ms190457.aspx&#34;&gt;クラスター化インデックスと非クラスター化インデックスの概念&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まさにぴったりのタイトルじゃんと思ったんだけどいまいちよくわからない。&lt;/p&gt;

&lt;p&gt;いや、わかったっちゃわかったんだけど、だからどうなるとか、だからどうする、っていうところが掴めなかった。&lt;/p&gt;

&lt;h3 id=&#34;ここでわかったこと:c92488df51ae62a183920f8a12e0e585&#34;&gt;ここでわかったこと&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;クラスタ化インデックス&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1テーブルに1つしか作れない。&lt;/li&gt;
&lt;li&gt;これがあると指定されたインデックスの値によってソートされた構造体が出来る。(テーブルの構造ごとそうなる？)&lt;/li&gt;
&lt;li&gt;クラスタ化インデックスが設定されていないテーブルはヒープと呼ばれる未ソートの状態になる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;非クラスタ化インデックス&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーブルとは別に構造を持つ。&lt;/li&gt;
&lt;li&gt;実データじゃなく、実データへのポインタを持つ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に参考にさせてもらったのがこっち。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/0501/18/news097.html&#34;&gt;SQL Serverのインデックス構造（前編） (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここは非常にわかりやすかった&lt;/p&gt;

&lt;p&gt;B-Treeのイメージも、SQL Server上での実装が具体的にイメージ出来たし、非クラスタ化インデックスじゃ結局ランダムI/Oが発生するんだね、ってこともわかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/fcoding/articles/delphi/05/delphi05a.html&#34;&gt;RDBMSで使われるB木を学ぼう&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ここでわかったこと-1:c92488df51ae62a183920f8a12e0e585&#34;&gt;ここでわかったこと&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;B-Treeなのでリーフノードのレベルが全部同じになる。&lt;/li&gt;
&lt;li&gt;クラスタ化インデックスを利用したクエリの場合、リーフノードに実データがあるのでランダムI/Oが発生しない。&lt;/li&gt;
&lt;li&gt;非クラスタ化インデックスを利用したクエリの場合、リーフノードにはポインタしかないので、ランダムI/Oが発生する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こっちのページはよくわかんなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://enterprisezine.jp/iti/detail/3357&#34;&gt;SQL Serverの大きな特徴、クラスタ化インデックスを押さえよう！&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;カバリングインデックス:c92488df51ae62a183920f8a12e0e585&#34;&gt;カバリングインデックス&lt;/h2&gt;

&lt;p&gt;マルチカラムインデックスと混同するよね。&lt;/p&gt;

&lt;p&gt;これは結構わかりやすく書いてくれている記事があった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/a666666/20100920/1284992435&#34;&gt;MySQLのインデックスを学ぶ (1)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;クエリが必要とするカラムがすべてインデックスに含まれている場合、インデックスだけを読めば良いのでとても速い、というもの。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/ja-jp/library/ff650692.aspx&#34;&gt;SQL インデックスを最適化する方法&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;カバーリング インデックスは、WHERE 句およびクエリ列選択の形態をとるすべての列を含む、非クラスタ化インデックスです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;誤った認識があればご指摘を。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
